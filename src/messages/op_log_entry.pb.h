// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_log_entry.proto

#ifndef PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED
#define PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

class PbLogSetRecord;
class PbLogTccWrenSetRecord;
class PbLogTccGrainSetRecord;
class PbLogTccCureSetRecord;

// ===================================================================

class PbLogSetRecord : public ::google::protobuf::Message {
 public:
  PbLogSetRecord();
  virtual ~PbLogSetRecord();

  PbLogSetRecord(const PbLogSetRecord& from);

  inline PbLogSetRecord& operator=(const PbLogSetRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogSetRecord& default_instance();

  void Swap(PbLogSetRecord* other);

  // implements Message ----------------------------------------------

  PbLogSetRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLogSetRecord& from);
  void MergeFrom(const PbLogSetRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required .PbPhysicalTimeSpec PUT = 3;
  inline bool has_put() const;
  inline void clear_put();
  static const int kPUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& put() const;
  inline ::PbPhysicalTimeSpec* mutable_put();
  inline ::PbPhysicalTimeSpec* release_put();
  inline void set_allocated_put(::PbPhysicalTimeSpec* put);

  // optional .PbPhysicalTimeSpec PDUT = 4;
  inline bool has_pdut() const;
  inline void clear_pdut();
  static const int kPDUTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& pdut() const;
  inline ::PbPhysicalTimeSpec* mutable_pdut();
  inline ::PbPhysicalTimeSpec* release_pdut();
  inline void set_allocated_pdut(::PbPhysicalTimeSpec* pdut);

  // repeated .PbPhysicalTimeSpec DV = 5;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // required int32 SrcReplica = 6;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 6;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbLogSetRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_put();
  inline void clear_has_put();
  inline void set_has_pdut();
  inline void clear_has_pdut();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* put_;
  ::PbPhysicalTimeSpec* pdut_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

  void InitAsDefaultInstance();
  static PbLogSetRecord* default_instance_;
};
// -------------------------------------------------------------------

class PbLogTccWrenSetRecord : public ::google::protobuf::Message {
 public:
  PbLogTccWrenSetRecord();
  virtual ~PbLogTccWrenSetRecord();

  PbLogTccWrenSetRecord(const PbLogTccWrenSetRecord& from);

  inline PbLogTccWrenSetRecord& operator=(const PbLogTccWrenSetRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogTccWrenSetRecord& default_instance();

  void Swap(PbLogTccWrenSetRecord* other);

  // implements Message ----------------------------------------------

  PbLogTccWrenSetRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLogTccWrenSetRecord& from);
  void MergeFrom(const PbLogTccWrenSetRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required .PbPhysicalTimeSpec UT = 3;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // optional .PbPhysicalTimeSpec RST = 4;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // required int32 SrcReplica = 5;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 5;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // required int64 LUT = 6;
  inline bool has_lut() const;
  inline void clear_lut();
  static const int kLUTFieldNumber = 6;
  inline ::google::protobuf::int64 lut() const;
  inline void set_lut(::google::protobuf::int64 value);

  // optional .PbPhysicalTimeSpec CreationTime = 7;
  inline bool has_creationtime() const;
  inline void clear_creationtime();
  static const int kCreationTimeFieldNumber = 7;
  inline const ::PbPhysicalTimeSpec& creationtime() const;
  inline ::PbPhysicalTimeSpec* mutable_creationtime();
  inline ::PbPhysicalTimeSpec* release_creationtime();
  inline void set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime);

  // @@protoc_insertion_point(class_scope:PbLogTccWrenSetRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ut();
  inline void clear_has_ut();
  inline void set_has_rst();
  inline void clear_has_rst();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_lut();
  inline void clear_has_lut();
  inline void set_has_creationtime();
  inline void clear_has_creationtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* ut_;
  ::PbPhysicalTimeSpec* rst_;
  ::google::protobuf::int64 lut_;
  ::PbPhysicalTimeSpec* creationtime_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

  void InitAsDefaultInstance();
  static PbLogTccWrenSetRecord* default_instance_;
};
// -------------------------------------------------------------------

class PbLogTccGrainSetRecord : public ::google::protobuf::Message {
 public:
  PbLogTccGrainSetRecord();
  virtual ~PbLogTccGrainSetRecord();

  PbLogTccGrainSetRecord(const PbLogTccGrainSetRecord& from);

  inline PbLogTccGrainSetRecord& operator=(const PbLogTccGrainSetRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogTccGrainSetRecord& default_instance();

  void Swap(PbLogTccGrainSetRecord* other);

  // implements Message ----------------------------------------------

  PbLogTccGrainSetRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLogTccGrainSetRecord& from);
  void MergeFrom(const PbLogTccGrainSetRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required .PbPhysicalTimeSpec UT = 3;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // optional .PbPhysicalTimeSpec PDUT = 4;
  inline bool has_pdut() const;
  inline void clear_pdut();
  static const int kPDUTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& pdut() const;
  inline ::PbPhysicalTimeSpec* mutable_pdut();
  inline ::PbPhysicalTimeSpec* release_pdut();
  inline void set_allocated_pdut(::PbPhysicalTimeSpec* pdut);

  // required int32 SrcReplica = 5;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 5;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // required int64 LUT = 6;
  inline bool has_lut() const;
  inline void clear_lut();
  static const int kLUTFieldNumber = 6;
  inline ::google::protobuf::int64 lut() const;
  inline void set_lut(::google::protobuf::int64 value);

  // optional .PbPhysicalTimeSpec CreationTime = 7;
  inline bool has_creationtime() const;
  inline void clear_creationtime();
  static const int kCreationTimeFieldNumber = 7;
  inline const ::PbPhysicalTimeSpec& creationtime() const;
  inline ::PbPhysicalTimeSpec* mutable_creationtime();
  inline ::PbPhysicalTimeSpec* release_creationtime();
  inline void set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime);

  // @@protoc_insertion_point(class_scope:PbLogTccGrainSetRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ut();
  inline void clear_has_ut();
  inline void set_has_pdut();
  inline void clear_has_pdut();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_lut();
  inline void clear_has_lut();
  inline void set_has_creationtime();
  inline void clear_has_creationtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* ut_;
  ::PbPhysicalTimeSpec* pdut_;
  ::google::protobuf::int64 lut_;
  ::PbPhysicalTimeSpec* creationtime_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

  void InitAsDefaultInstance();
  static PbLogTccGrainSetRecord* default_instance_;
};
// -------------------------------------------------------------------

class PbLogTccCureSetRecord : public ::google::protobuf::Message {
 public:
  PbLogTccCureSetRecord();
  virtual ~PbLogTccCureSetRecord();

  PbLogTccCureSetRecord(const PbLogTccCureSetRecord& from);

  inline PbLogTccCureSetRecord& operator=(const PbLogTccCureSetRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogTccCureSetRecord& default_instance();

  void Swap(PbLogTccCureSetRecord* other);

  // implements Message ----------------------------------------------

  PbLogTccCureSetRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLogTccCureSetRecord& from);
  void MergeFrom(const PbLogTccCureSetRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required .PbPhysicalTimeSpec UT = 3;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // repeated .PbPhysicalTimeSpec DV = 4;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // required int32 SrcReplica = 5;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 5;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // required int64 LUT = 6;
  inline bool has_lut() const;
  inline void clear_lut();
  static const int kLUTFieldNumber = 6;
  inline ::google::protobuf::int64 lut() const;
  inline void set_lut(::google::protobuf::int64 value);

  // optional .PbPhysicalTimeSpec CreationTime = 7;
  inline bool has_creationtime() const;
  inline void clear_creationtime();
  static const int kCreationTimeFieldNumber = 7;
  inline const ::PbPhysicalTimeSpec& creationtime() const;
  inline ::PbPhysicalTimeSpec* mutable_creationtime();
  inline ::PbPhysicalTimeSpec* release_creationtime();
  inline void set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime);

  // @@protoc_insertion_point(class_scope:PbLogTccCureSetRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ut();
  inline void clear_has_ut();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_lut();
  inline void clear_has_lut();
  inline void set_has_creationtime();
  inline void clear_has_creationtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* ut_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::int64 lut_;
  ::PbPhysicalTimeSpec* creationtime_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

  void InitAsDefaultInstance();
  static PbLogTccCureSetRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// PbLogSetRecord

// required bytes Key = 1;
inline bool PbLogSetRecord::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLogSetRecord::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLogSetRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLogSetRecord::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbLogSetRecord::key() const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.Key)
  return *key_;
}
inline void PbLogSetRecord::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogSetRecord.Key)
}
inline void PbLogSetRecord::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogSetRecord.Key)
}
inline void PbLogSetRecord::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogSetRecord.Key)
}
inline ::std::string* PbLogSetRecord::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogSetRecord.Key)
  return key_;
}
inline ::std::string* PbLogSetRecord::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogSetRecord::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogSetRecord.Key)
}

// required bytes Value = 2;
inline bool PbLogSetRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLogSetRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLogSetRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLogSetRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbLogSetRecord::value() const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.Value)
  return *value_;
}
inline void PbLogSetRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogSetRecord.Value)
}
inline void PbLogSetRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogSetRecord.Value)
}
inline void PbLogSetRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogSetRecord.Value)
}
inline ::std::string* PbLogSetRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogSetRecord.Value)
  return value_;
}
inline ::std::string* PbLogSetRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogSetRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogSetRecord.Value)
}

// required .PbPhysicalTimeSpec PUT = 3;
inline bool PbLogSetRecord::has_put() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLogSetRecord::set_has_put() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLogSetRecord::clear_has_put() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLogSetRecord::clear_put() {
  if (put_ != NULL) put_->::PbPhysicalTimeSpec::Clear();
  clear_has_put();
}
inline const ::PbPhysicalTimeSpec& PbLogSetRecord::put() const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.PUT)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::mutable_put() {
  set_has_put();
  if (put_ == NULL) put_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogSetRecord.PUT)
  return put_;
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::release_put() {
  clear_has_put();
  ::PbPhysicalTimeSpec* temp = put_;
  put_ = NULL;
  return temp;
}
inline void PbLogSetRecord::set_allocated_put(::PbPhysicalTimeSpec* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogSetRecord.PUT)
}

// optional .PbPhysicalTimeSpec PDUT = 4;
inline bool PbLogSetRecord::has_pdut() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbLogSetRecord::set_has_pdut() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbLogSetRecord::clear_has_pdut() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbLogSetRecord::clear_pdut() {
  if (pdut_ != NULL) pdut_->::PbPhysicalTimeSpec::Clear();
  clear_has_pdut();
}
inline const ::PbPhysicalTimeSpec& PbLogSetRecord::pdut() const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.PDUT)
  return pdut_ != NULL ? *pdut_ : *default_instance_->pdut_;
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::mutable_pdut() {
  set_has_pdut();
  if (pdut_ == NULL) pdut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogSetRecord.PDUT)
  return pdut_;
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::release_pdut() {
  clear_has_pdut();
  ::PbPhysicalTimeSpec* temp = pdut_;
  pdut_ = NULL;
  return temp;
}
inline void PbLogSetRecord::set_allocated_pdut(::PbPhysicalTimeSpec* pdut) {
  delete pdut_;
  pdut_ = pdut;
  if (pdut) {
    set_has_pdut();
  } else {
    clear_has_pdut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogSetRecord.PDUT)
}

// repeated .PbPhysicalTimeSpec DV = 5;
inline int PbLogSetRecord::dv_size() const {
  return dv_.size();
}
inline void PbLogSetRecord::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbLogSetRecord::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbLogSetRecord.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbLogSetRecord::add_dv() {
  // @@protoc_insertion_point(field_add:PbLogSetRecord.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbLogSetRecord::dv() const {
  // @@protoc_insertion_point(field_list:PbLogSetRecord.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbLogSetRecord::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbLogSetRecord.DV)
  return &dv_;
}

// required int32 SrcReplica = 6;
inline bool PbLogSetRecord::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbLogSetRecord::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbLogSetRecord::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbLogSetRecord::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbLogSetRecord::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbLogSetRecord.SrcReplica)
  return srcreplica_;
}
inline void PbLogSetRecord::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbLogSetRecord.SrcReplica)
}

// -------------------------------------------------------------------

// PbLogTccWrenSetRecord

// required bytes Key = 1;
inline bool PbLogTccWrenSetRecord::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLogTccWrenSetRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLogTccWrenSetRecord::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbLogTccWrenSetRecord::key() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.Key)
  return *key_;
}
inline void PbLogTccWrenSetRecord::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccWrenSetRecord.Key)
}
inline void PbLogTccWrenSetRecord::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccWrenSetRecord.Key)
}
inline void PbLogTccWrenSetRecord::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccWrenSetRecord.Key)
}
inline ::std::string* PbLogTccWrenSetRecord::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccWrenSetRecord.Key)
  return key_;
}
inline ::std::string* PbLogTccWrenSetRecord::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccWrenSetRecord::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccWrenSetRecord.Key)
}

// required bytes Value = 2;
inline bool PbLogTccWrenSetRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLogTccWrenSetRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLogTccWrenSetRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbLogTccWrenSetRecord::value() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.Value)
  return *value_;
}
inline void PbLogTccWrenSetRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccWrenSetRecord.Value)
}
inline void PbLogTccWrenSetRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccWrenSetRecord.Value)
}
inline void PbLogTccWrenSetRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccWrenSetRecord.Value)
}
inline ::std::string* PbLogTccWrenSetRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccWrenSetRecord.Value)
  return value_;
}
inline ::std::string* PbLogTccWrenSetRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccWrenSetRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccWrenSetRecord.Value)
}

// required .PbPhysicalTimeSpec UT = 3;
inline bool PbLogTccWrenSetRecord::has_ut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_ut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLogTccWrenSetRecord::clear_has_ut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLogTccWrenSetRecord::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbLogTccWrenSetRecord::ut() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccWrenSetRecord.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbLogTccWrenSetRecord::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccWrenSetRecord.UT)
}

// optional .PbPhysicalTimeSpec RST = 4;
inline bool PbLogTccWrenSetRecord::has_rst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_rst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbLogTccWrenSetRecord::clear_has_rst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbLogTccWrenSetRecord::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbLogTccWrenSetRecord::rst() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccWrenSetRecord.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbLogTccWrenSetRecord::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccWrenSetRecord.RST)
}

// required int32 SrcReplica = 5;
inline bool PbLogTccWrenSetRecord::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbLogTccWrenSetRecord::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbLogTccWrenSetRecord::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbLogTccWrenSetRecord::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.SrcReplica)
  return srcreplica_;
}
inline void PbLogTccWrenSetRecord::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccWrenSetRecord.SrcReplica)
}

// required int64 LUT = 6;
inline bool PbLogTccWrenSetRecord::has_lut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_lut() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbLogTccWrenSetRecord::clear_has_lut() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbLogTccWrenSetRecord::clear_lut() {
  lut_ = GOOGLE_LONGLONG(0);
  clear_has_lut();
}
inline ::google::protobuf::int64 PbLogTccWrenSetRecord::lut() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.LUT)
  return lut_;
}
inline void PbLogTccWrenSetRecord::set_lut(::google::protobuf::int64 value) {
  set_has_lut();
  lut_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccWrenSetRecord.LUT)
}

// optional .PbPhysicalTimeSpec CreationTime = 7;
inline bool PbLogTccWrenSetRecord::has_creationtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbLogTccWrenSetRecord::set_has_creationtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbLogTccWrenSetRecord::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbLogTccWrenSetRecord::clear_creationtime() {
  if (creationtime_ != NULL) creationtime_->::PbPhysicalTimeSpec::Clear();
  clear_has_creationtime();
}
inline const ::PbPhysicalTimeSpec& PbLogTccWrenSetRecord::creationtime() const {
  // @@protoc_insertion_point(field_get:PbLogTccWrenSetRecord.CreationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::mutable_creationtime() {
  set_has_creationtime();
  if (creationtime_ == NULL) creationtime_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccWrenSetRecord.CreationTime)
  return creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccWrenSetRecord::release_creationtime() {
  clear_has_creationtime();
  ::PbPhysicalTimeSpec* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
inline void PbLogTccWrenSetRecord::set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime) {
  delete creationtime_;
  creationtime_ = creationtime;
  if (creationtime) {
    set_has_creationtime();
  } else {
    clear_has_creationtime();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccWrenSetRecord.CreationTime)
}

// -------------------------------------------------------------------

// PbLogTccGrainSetRecord

// required bytes Key = 1;
inline bool PbLogTccGrainSetRecord::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLogTccGrainSetRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLogTccGrainSetRecord::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbLogTccGrainSetRecord::key() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.Key)
  return *key_;
}
inline void PbLogTccGrainSetRecord::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccGrainSetRecord.Key)
}
inline void PbLogTccGrainSetRecord::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccGrainSetRecord.Key)
}
inline void PbLogTccGrainSetRecord::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccGrainSetRecord.Key)
}
inline ::std::string* PbLogTccGrainSetRecord::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccGrainSetRecord.Key)
  return key_;
}
inline ::std::string* PbLogTccGrainSetRecord::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccGrainSetRecord::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccGrainSetRecord.Key)
}

// required bytes Value = 2;
inline bool PbLogTccGrainSetRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLogTccGrainSetRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLogTccGrainSetRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbLogTccGrainSetRecord::value() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.Value)
  return *value_;
}
inline void PbLogTccGrainSetRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccGrainSetRecord.Value)
}
inline void PbLogTccGrainSetRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccGrainSetRecord.Value)
}
inline void PbLogTccGrainSetRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccGrainSetRecord.Value)
}
inline ::std::string* PbLogTccGrainSetRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccGrainSetRecord.Value)
  return value_;
}
inline ::std::string* PbLogTccGrainSetRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccGrainSetRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccGrainSetRecord.Value)
}

// required .PbPhysicalTimeSpec UT = 3;
inline bool PbLogTccGrainSetRecord::has_ut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_ut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLogTccGrainSetRecord::clear_has_ut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLogTccGrainSetRecord::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbLogTccGrainSetRecord::ut() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccGrainSetRecord.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbLogTccGrainSetRecord::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccGrainSetRecord.UT)
}

// optional .PbPhysicalTimeSpec PDUT = 4;
inline bool PbLogTccGrainSetRecord::has_pdut() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_pdut() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbLogTccGrainSetRecord::clear_has_pdut() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbLogTccGrainSetRecord::clear_pdut() {
  if (pdut_ != NULL) pdut_->::PbPhysicalTimeSpec::Clear();
  clear_has_pdut();
}
inline const ::PbPhysicalTimeSpec& PbLogTccGrainSetRecord::pdut() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.PDUT)
  return pdut_ != NULL ? *pdut_ : *default_instance_->pdut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::mutable_pdut() {
  set_has_pdut();
  if (pdut_ == NULL) pdut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccGrainSetRecord.PDUT)
  return pdut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::release_pdut() {
  clear_has_pdut();
  ::PbPhysicalTimeSpec* temp = pdut_;
  pdut_ = NULL;
  return temp;
}
inline void PbLogTccGrainSetRecord::set_allocated_pdut(::PbPhysicalTimeSpec* pdut) {
  delete pdut_;
  pdut_ = pdut;
  if (pdut) {
    set_has_pdut();
  } else {
    clear_has_pdut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccGrainSetRecord.PDUT)
}

// required int32 SrcReplica = 5;
inline bool PbLogTccGrainSetRecord::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbLogTccGrainSetRecord::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbLogTccGrainSetRecord::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbLogTccGrainSetRecord::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.SrcReplica)
  return srcreplica_;
}
inline void PbLogTccGrainSetRecord::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccGrainSetRecord.SrcReplica)
}

// required int64 LUT = 6;
inline bool PbLogTccGrainSetRecord::has_lut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_lut() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbLogTccGrainSetRecord::clear_has_lut() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbLogTccGrainSetRecord::clear_lut() {
  lut_ = GOOGLE_LONGLONG(0);
  clear_has_lut();
}
inline ::google::protobuf::int64 PbLogTccGrainSetRecord::lut() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.LUT)
  return lut_;
}
inline void PbLogTccGrainSetRecord::set_lut(::google::protobuf::int64 value) {
  set_has_lut();
  lut_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccGrainSetRecord.LUT)
}

// optional .PbPhysicalTimeSpec CreationTime = 7;
inline bool PbLogTccGrainSetRecord::has_creationtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbLogTccGrainSetRecord::set_has_creationtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbLogTccGrainSetRecord::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbLogTccGrainSetRecord::clear_creationtime() {
  if (creationtime_ != NULL) creationtime_->::PbPhysicalTimeSpec::Clear();
  clear_has_creationtime();
}
inline const ::PbPhysicalTimeSpec& PbLogTccGrainSetRecord::creationtime() const {
  // @@protoc_insertion_point(field_get:PbLogTccGrainSetRecord.CreationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::mutable_creationtime() {
  set_has_creationtime();
  if (creationtime_ == NULL) creationtime_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccGrainSetRecord.CreationTime)
  return creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccGrainSetRecord::release_creationtime() {
  clear_has_creationtime();
  ::PbPhysicalTimeSpec* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
inline void PbLogTccGrainSetRecord::set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime) {
  delete creationtime_;
  creationtime_ = creationtime;
  if (creationtime) {
    set_has_creationtime();
  } else {
    clear_has_creationtime();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccGrainSetRecord.CreationTime)
}

// -------------------------------------------------------------------

// PbLogTccCureSetRecord

// required bytes Key = 1;
inline bool PbLogTccCureSetRecord::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLogTccCureSetRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLogTccCureSetRecord::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbLogTccCureSetRecord::key() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.Key)
  return *key_;
}
inline void PbLogTccCureSetRecord::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccCureSetRecord.Key)
}
inline void PbLogTccCureSetRecord::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccCureSetRecord.Key)
}
inline void PbLogTccCureSetRecord::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccCureSetRecord.Key)
}
inline ::std::string* PbLogTccCureSetRecord::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccCureSetRecord.Key)
  return key_;
}
inline ::std::string* PbLogTccCureSetRecord::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccCureSetRecord::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccCureSetRecord.Key)
}

// required bytes Value = 2;
inline bool PbLogTccCureSetRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLogTccCureSetRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLogTccCureSetRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbLogTccCureSetRecord::value() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.Value)
  return *value_;
}
inline void PbLogTccCureSetRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogTccCureSetRecord.Value)
}
inline void PbLogTccCureSetRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogTccCureSetRecord.Value)
}
inline void PbLogTccCureSetRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogTccCureSetRecord.Value)
}
inline ::std::string* PbLogTccCureSetRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogTccCureSetRecord.Value)
  return value_;
}
inline ::std::string* PbLogTccCureSetRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogTccCureSetRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccCureSetRecord.Value)
}

// required .PbPhysicalTimeSpec UT = 3;
inline bool PbLogTccCureSetRecord::has_ut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_ut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLogTccCureSetRecord::clear_has_ut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLogTccCureSetRecord::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbLogTccCureSetRecord::ut() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccCureSetRecord.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbLogTccCureSetRecord::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccCureSetRecord.UT)
}

// repeated .PbPhysicalTimeSpec DV = 4;
inline int PbLogTccCureSetRecord::dv_size() const {
  return dv_.size();
}
inline void PbLogTccCureSetRecord::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbLogTccCureSetRecord::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbLogTccCureSetRecord.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::add_dv() {
  // @@protoc_insertion_point(field_add:PbLogTccCureSetRecord.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbLogTccCureSetRecord::dv() const {
  // @@protoc_insertion_point(field_list:PbLogTccCureSetRecord.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbLogTccCureSetRecord::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbLogTccCureSetRecord.DV)
  return &dv_;
}

// required int32 SrcReplica = 5;
inline bool PbLogTccCureSetRecord::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbLogTccCureSetRecord::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbLogTccCureSetRecord::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbLogTccCureSetRecord::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.SrcReplica)
  return srcreplica_;
}
inline void PbLogTccCureSetRecord::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccCureSetRecord.SrcReplica)
}

// required int64 LUT = 6;
inline bool PbLogTccCureSetRecord::has_lut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_lut() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbLogTccCureSetRecord::clear_has_lut() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbLogTccCureSetRecord::clear_lut() {
  lut_ = GOOGLE_LONGLONG(0);
  clear_has_lut();
}
inline ::google::protobuf::int64 PbLogTccCureSetRecord::lut() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.LUT)
  return lut_;
}
inline void PbLogTccCureSetRecord::set_lut(::google::protobuf::int64 value) {
  set_has_lut();
  lut_ = value;
  // @@protoc_insertion_point(field_set:PbLogTccCureSetRecord.LUT)
}

// optional .PbPhysicalTimeSpec CreationTime = 7;
inline bool PbLogTccCureSetRecord::has_creationtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbLogTccCureSetRecord::set_has_creationtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbLogTccCureSetRecord::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbLogTccCureSetRecord::clear_creationtime() {
  if (creationtime_ != NULL) creationtime_->::PbPhysicalTimeSpec::Clear();
  clear_has_creationtime();
}
inline const ::PbPhysicalTimeSpec& PbLogTccCureSetRecord::creationtime() const {
  // @@protoc_insertion_point(field_get:PbLogTccCureSetRecord.CreationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::mutable_creationtime() {
  set_has_creationtime();
  if (creationtime_ == NULL) creationtime_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogTccCureSetRecord.CreationTime)
  return creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogTccCureSetRecord::release_creationtime() {
  clear_has_creationtime();
  ::PbPhysicalTimeSpec* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
inline void PbLogTccCureSetRecord::set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime) {
  delete creationtime_;
  creationtime_ = creationtime;
  if (creationtime) {
    set_has_creationtime();
  } else {
    clear_has_creationtime();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogTccCureSetRecord.CreationTime)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED
