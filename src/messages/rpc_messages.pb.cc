// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbRpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcEchoTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcEchoTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbVersionVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVersionVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbPhysicalTimeSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPhysicalTimeSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicGetServerConfigResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicGetServerConfigResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicGetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicGetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicGetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicGetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicSetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicSetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicSetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicSetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicTxGetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicTxGetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicTxGetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicTxGetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicShowArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicShowArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicShowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicShowResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalGetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalGetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalGetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalGetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalSetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalSetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalSetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalSetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalTxSliceGetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalTxSliceGetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalTxSliceGetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalTxSliceGetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalShowItemArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalShowItemArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalShowItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalShowItemResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbUpdatedItemVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbUpdatedItemVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcReplicationArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcReplicationArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcLST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcLST_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGST_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGSTReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGSTReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPVV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPVV_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGSV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGSV_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGroupServiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGroupServiceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbPartition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPartition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRegisteredPartitions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRegisteredPartitions_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVInternalPrepareReplyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVInternalPrepareReplyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpCommitRequestArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpCommitRequestArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicCommitArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicCommitArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcKVPublicCommitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcKVPublicCommitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPartitionClientPrepareRequestResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPartitionClientPrepareRequestResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5fmessages_2eproto() {
  protobuf_AddDesc_rpc_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PbRpcRequest_descriptor_ = file->message_type(0);
  static const int PbRpcRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcRequest, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcRequest, methodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcRequest, arguments_),
  };
  PbRpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcRequest_descriptor_,
      PbRpcRequest::default_instance_,
      PbRpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcRequest));
  PbRpcReply_descriptor_ = file->message_type(1);
  static const int PbRpcReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReply, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReply, results_),
  };
  PbRpcReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcReply_descriptor_,
      PbRpcReply::default_instance_,
      PbRpcReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcReply));
  PbRpcEchoTest_descriptor_ = file->message_type(2);
  static const int PbRpcEchoTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcEchoTest, text_),
  };
  PbRpcEchoTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcEchoTest_descriptor_,
      PbRpcEchoTest::default_instance_,
      PbRpcEchoTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcEchoTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcEchoTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcEchoTest));
  PbVersionVector_descriptor_ = file->message_type(3);
  static const int PbVersionVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVersionVector, version_),
  };
  PbVersionVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVersionVector_descriptor_,
      PbVersionVector::default_instance_,
      PbVersionVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVersionVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVersionVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVersionVector));
  PbPhysicalTimeSpec_descriptor_ = file->message_type(4);
  static const int PbPhysicalTimeSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhysicalTimeSpec, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhysicalTimeSpec, nanoseconds_),
  };
  PbPhysicalTimeSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPhysicalTimeSpec_descriptor_,
      PbPhysicalTimeSpec::default_instance_,
      PbPhysicalTimeSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhysicalTimeSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhysicalTimeSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPhysicalTimeSpec));
  PbRpcKVPublicGetServerConfigResult_descriptor_ = file->message_type(5);
  static const int PbRpcKVPublicGetServerConfigResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, numpartitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, numreplicasperpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, optimisticmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, replicaid_),
  };
  PbRpcKVPublicGetServerConfigResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicGetServerConfigResult_descriptor_,
      PbRpcKVPublicGetServerConfigResult::default_instance_,
      PbRpcKVPublicGetServerConfigResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetServerConfigResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicGetServerConfigResult));
  PbRpcKVPublicGetArg_descriptor_ = file->message_type(6);
  static const int PbRpcKVPublicGetArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, minlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, ndv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, gsv_),
  };
  PbRpcKVPublicGetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicGetArg_descriptor_,
      PbRpcKVPublicGetArg::default_instance_,
      PbRpcKVPublicGetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicGetArg));
  PbRpcKVPublicGetResult_descriptor_ = file->message_type(7);
  static const int PbRpcKVPublicGetResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, getvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, dut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, minlstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, srcreplica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, gsv_),
  };
  PbRpcKVPublicGetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicGetResult_descriptor_,
      PbRpcKVPublicGetResult::default_instance_,
      PbRpcKVPublicGetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicGetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicGetResult));
  PbRpcKVPublicSetArg_descriptor_ = file->message_type(8);
  static const int PbRpcKVPublicSetArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, minlstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, dv_),
  };
  PbRpcKVPublicSetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicSetArg_descriptor_,
      PbRpcKVPublicSetArg::default_instance_,
      PbRpcKVPublicSetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicSetArg));
  PbRpcKVPublicSetResult_descriptor_ = file->message_type(9);
  static const int PbRpcKVPublicSetResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetResult, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetResult, srcreplica_),
  };
  PbRpcKVPublicSetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicSetResult_descriptor_,
      PbRpcKVPublicSetResult::default_instance_,
      PbRpcKVPublicSetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicSetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicSetResult));
  PbRpcKVPublicTxGetArg_descriptor_ = file->message_type(10);
  static const int PbRpcKVPublicTxGetArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, ut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, sv_),
  };
  PbRpcKVPublicTxGetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicTxGetArg_descriptor_,
      PbRpcKVPublicTxGetArg::default_instance_,
      PbRpcKVPublicTxGetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicTxGetArg));
  PbRpcKVPublicTxGetResult_descriptor_ = file->message_type(11);
  static const int PbRpcKVPublicTxGetResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, getvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, sv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, ut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, uv_),
  };
  PbRpcKVPublicTxGetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicTxGetResult_descriptor_,
      PbRpcKVPublicTxGetResult::default_instance_,
      PbRpcKVPublicTxGetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicTxGetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicTxGetResult));
  PbRpcKVPublicShowArg_descriptor_ = file->message_type(12);
  static const int PbRpcKVPublicShowArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowArg, key_),
  };
  PbRpcKVPublicShowArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicShowArg_descriptor_,
      PbRpcKVPublicShowArg::default_instance_,
      PbRpcKVPublicShowArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicShowArg));
  PbRpcKVPublicShowResult_descriptor_ = file->message_type(13);
  static const int PbRpcKVPublicShowResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowResult, returnstring_),
  };
  PbRpcKVPublicShowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicShowResult_descriptor_,
      PbRpcKVPublicShowResult::default_instance_,
      PbRpcKVPublicShowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicShowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicShowResult));
  PbRpcKVInternalGetArg_descriptor_ = file->message_type(14);
  static const int PbRpcKVInternalGetArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, minlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, ndv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, gsv_),
  };
  PbRpcKVInternalGetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalGetArg_descriptor_,
      PbRpcKVInternalGetArg::default_instance_,
      PbRpcKVInternalGetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalGetArg));
  PbRpcKVInternalGetResult_descriptor_ = file->message_type(15);
  static const int PbRpcKVInternalGetResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, getvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, dut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, minlstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, srcreplica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, gsv_),
  };
  PbRpcKVInternalGetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalGetResult_descriptor_,
      PbRpcKVInternalGetResult::default_instance_,
      PbRpcKVInternalGetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalGetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalGetResult));
  PbRpcKVInternalSetArg_descriptor_ = file->message_type(16);
  static const int PbRpcKVInternalSetArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, minlstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, dv_),
  };
  PbRpcKVInternalSetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalSetArg_descriptor_,
      PbRpcKVInternalSetArg::default_instance_,
      PbRpcKVInternalSetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalSetArg));
  PbRpcKVInternalSetResult_descriptor_ = file->message_type(17);
  static const int PbRpcKVInternalSetResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetResult, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetResult, srcreplica_),
  };
  PbRpcKVInternalSetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalSetResult_descriptor_,
      PbRpcKVInternalSetResult::default_instance_,
      PbRpcKVInternalSetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalSetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalSetResult));
  PbRpcKVInternalTxSliceGetArg_descriptor_ = file->message_type(18);
  static const int PbRpcKVInternalTxSliceGetArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, sv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, src_),
  };
  PbRpcKVInternalTxSliceGetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalTxSliceGetArg_descriptor_,
      PbRpcKVInternalTxSliceGetArg::default_instance_,
      PbRpcKVInternalTxSliceGetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalTxSliceGetArg));
  PbRpcKVInternalTxSliceGetResult_descriptor_ = file->message_type(19);
  static const int PbRpcKVInternalTxSliceGetResult_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, getvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, dut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, ndv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, gsv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, srcreplica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, waitedxact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, src_),
  };
  PbRpcKVInternalTxSliceGetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalTxSliceGetResult_descriptor_,
      PbRpcKVInternalTxSliceGetResult::default_instance_,
      PbRpcKVInternalTxSliceGetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalTxSliceGetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalTxSliceGetResult));
  PbRpcKVInternalShowItemArg_descriptor_ = file->message_type(20);
  static const int PbRpcKVInternalShowItemArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemArg, key_),
  };
  PbRpcKVInternalShowItemArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalShowItemArg_descriptor_,
      PbRpcKVInternalShowItemArg::default_instance_,
      PbRpcKVInternalShowItemArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalShowItemArg));
  PbRpcKVInternalShowItemResult_descriptor_ = file->message_type(21);
  static const int PbRpcKVInternalShowItemResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemResult, itemversions_),
  };
  PbRpcKVInternalShowItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalShowItemResult_descriptor_,
      PbRpcKVInternalShowItemResult::default_instance_,
      PbRpcKVInternalShowItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalShowItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalShowItemResult));
  PbUpdatedItemVersion_descriptor_ = file->message_type(22);
  static const int PbUpdatedItemVersion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUpdatedItemVersion, lut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUpdatedItemVersion, srcreplica_),
  };
  PbUpdatedItemVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbUpdatedItemVersion_descriptor_,
      PbUpdatedItemVersion::default_instance_,
      PbUpdatedItemVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUpdatedItemVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUpdatedItemVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbUpdatedItemVersion));
  PbRpcReplicationArg_descriptor_ = file->message_type(23);
  static const int PbRpcReplicationArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReplicationArg, remotedv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReplicationArg, updaterecord_),
  };
  PbRpcReplicationArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcReplicationArg_descriptor_,
      PbRpcReplicationArg::default_instance_,
      PbRpcReplicationArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReplicationArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcReplicationArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcReplicationArg));
  PbRpcHeartbeat_descriptor_ = file->message_type(24);
  static const int PbRpcHeartbeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcHeartbeat, physicaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcHeartbeat, logicaltime_),
  };
  PbRpcHeartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcHeartbeat_descriptor_,
      PbRpcHeartbeat::default_instance_,
      PbRpcHeartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcHeartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcHeartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcHeartbeat));
  PbRpcLST_descriptor_ = file->message_type(25);
  static const int PbRpcLST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, pvv_),
  };
  PbRpcLST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcLST_descriptor_,
      PbRpcLST::default_instance_,
      PbRpcLST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcLST));
  PbRpcGST_descriptor_ = file->message_type(26);
  static const int PbRpcGST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, time_),
  };
  PbRpcGST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGST_descriptor_,
      PbRpcGST::default_instance_,
      PbRpcGST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGST));
  PbRpcGSTReq_descriptor_ = file->message_type(27);
  static const int PbRpcGSTReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTReq, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTReq, peerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTReq, gsv_),
  };
  PbRpcGSTReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGSTReq_descriptor_,
      PbRpcGSTReq::default_instance_,
      PbRpcGSTReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGSTReq));
  PbRpcPVV_descriptor_ = file->message_type(28);
  static const int PbRpcPVV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPVV, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPVV, pvv_),
  };
  PbRpcPVV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPVV_descriptor_,
      PbRpcPVV::default_instance_,
      PbRpcPVV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPVV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPVV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPVV));
  PbRpcGSV_descriptor_ = file->message_type(29);
  static const int PbRpcGSV_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSV, gsv_),
  };
  PbRpcGSV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGSV_descriptor_,
      PbRpcGSV::default_instance_,
      PbRpcGSV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGSV));
  PbRpcGroupServiceResult_descriptor_ = file->message_type(30);
  static const int PbRpcGroupServiceResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGroupServiceResult, succeeded_),
  };
  PbRpcGroupServiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGroupServiceResult_descriptor_,
      PbRpcGroupServiceResult::default_instance_,
      PbRpcGroupServiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGroupServiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGroupServiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGroupServiceResult));
  PbPartition_descriptor_ = file->message_type(31);
  static const int PbPartition_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, publicport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, partitionport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, replicationport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, partitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, replicaid_),
  };
  PbPartition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPartition_descriptor_,
      PbPartition::default_instance_,
      PbPartition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPartition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPartition));
  PbRegisteredPartitions_descriptor_ = file->message_type(32);
  static const int PbRegisteredPartitions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRegisteredPartitions, numpartitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRegisteredPartitions, numreplicasperpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRegisteredPartitions, partition_),
  };
  PbRegisteredPartitions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRegisteredPartitions_descriptor_,
      PbRegisteredPartitions::default_instance_,
      PbRegisteredPartitions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRegisteredPartitions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRegisteredPartitions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRegisteredPartitions));
  PbRpcKVInternalPrepareReplyResult_descriptor_ = file->message_type(33);
  static const int PbRpcKVInternalPrepareReplyResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, blockduration_),
  };
  PbRpcKVInternalPrepareReplyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVInternalPrepareReplyResult_descriptor_,
      PbRpcKVInternalPrepareReplyResult::default_instance_,
      PbRpcKVInternalPrepareReplyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVInternalPrepareReplyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVInternalPrepareReplyResult));
  PbRpCommitRequestArg_descriptor_ = file->message_type(34);
  static const int PbRpCommitRequestArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpCommitRequestArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpCommitRequestArg, ct_),
  };
  PbRpCommitRequestArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpCommitRequestArg_descriptor_,
      PbRpCommitRequestArg::default_instance_,
      PbRpCommitRequestArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpCommitRequestArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpCommitRequestArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpCommitRequestArg));
  PbRpcKVPublicCommitArg_descriptor_ = file->message_type(35);
  static const int PbRpcKVPublicCommitArg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitArg, value_),
  };
  PbRpcKVPublicCommitArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicCommitArg_descriptor_,
      PbRpcKVPublicCommitArg::default_instance_,
      PbRpcKVPublicCommitArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicCommitArg));
  PbRpcKVPublicCommitResult_descriptor_ = file->message_type(36);
  static const int PbRpcKVPublicCommitResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitResult, ct_),
  };
  PbRpcKVPublicCommitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcKVPublicCommitResult_descriptor_,
      PbRpcKVPublicCommitResult::default_instance_,
      PbRpcKVPublicCommitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcKVPublicCommitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcKVPublicCommitResult));
  PbRpcPartitionClientPrepareRequestResult_descriptor_ = file->message_type(37);
  static const int PbRpcPartitionClientPrepareRequestResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, blockduration_),
  };
  PbRpcPartitionClientPrepareRequestResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPartitionClientPrepareRequestResult_descriptor_,
      PbRpcPartitionClientPrepareRequestResult::default_instance_,
      PbRpcPartitionClientPrepareRequestResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPartitionClientPrepareRequestResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPartitionClientPrepareRequestResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcRequest_descriptor_, &PbRpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcReply_descriptor_, &PbRpcReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcEchoTest_descriptor_, &PbRpcEchoTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVersionVector_descriptor_, &PbVersionVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPhysicalTimeSpec_descriptor_, &PbPhysicalTimeSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicGetServerConfigResult_descriptor_, &PbRpcKVPublicGetServerConfigResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicGetArg_descriptor_, &PbRpcKVPublicGetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicGetResult_descriptor_, &PbRpcKVPublicGetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicSetArg_descriptor_, &PbRpcKVPublicSetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicSetResult_descriptor_, &PbRpcKVPublicSetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicTxGetArg_descriptor_, &PbRpcKVPublicTxGetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicTxGetResult_descriptor_, &PbRpcKVPublicTxGetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicShowArg_descriptor_, &PbRpcKVPublicShowArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicShowResult_descriptor_, &PbRpcKVPublicShowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalGetArg_descriptor_, &PbRpcKVInternalGetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalGetResult_descriptor_, &PbRpcKVInternalGetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalSetArg_descriptor_, &PbRpcKVInternalSetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalSetResult_descriptor_, &PbRpcKVInternalSetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalTxSliceGetArg_descriptor_, &PbRpcKVInternalTxSliceGetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalTxSliceGetResult_descriptor_, &PbRpcKVInternalTxSliceGetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalShowItemArg_descriptor_, &PbRpcKVInternalShowItemArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalShowItemResult_descriptor_, &PbRpcKVInternalShowItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbUpdatedItemVersion_descriptor_, &PbUpdatedItemVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcReplicationArg_descriptor_, &PbRpcReplicationArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcHeartbeat_descriptor_, &PbRpcHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcLST_descriptor_, &PbRpcLST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGST_descriptor_, &PbRpcGST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGSTReq_descriptor_, &PbRpcGSTReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPVV_descriptor_, &PbRpcPVV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGSV_descriptor_, &PbRpcGSV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGroupServiceResult_descriptor_, &PbRpcGroupServiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPartition_descriptor_, &PbPartition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRegisteredPartitions_descriptor_, &PbRegisteredPartitions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVInternalPrepareReplyResult_descriptor_, &PbRpcKVInternalPrepareReplyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpCommitRequestArg_descriptor_, &PbRpCommitRequestArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicCommitArg_descriptor_, &PbRpcKVPublicCommitArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcKVPublicCommitResult_descriptor_, &PbRpcKVPublicCommitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPartitionClientPrepareRequestResult_descriptor_, &PbRpcPartitionClientPrepareRequestResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5fmessages_2eproto() {
  delete PbRpcRequest::default_instance_;
  delete PbRpcRequest_reflection_;
  delete PbRpcReply::default_instance_;
  delete PbRpcReply_reflection_;
  delete PbRpcEchoTest::default_instance_;
  delete PbRpcEchoTest_reflection_;
  delete PbVersionVector::default_instance_;
  delete PbVersionVector_reflection_;
  delete PbPhysicalTimeSpec::default_instance_;
  delete PbPhysicalTimeSpec_reflection_;
  delete PbRpcKVPublicGetServerConfigResult::default_instance_;
  delete PbRpcKVPublicGetServerConfigResult_reflection_;
  delete PbRpcKVPublicGetArg::default_instance_;
  delete PbRpcKVPublicGetArg_reflection_;
  delete PbRpcKVPublicGetResult::default_instance_;
  delete PbRpcKVPublicGetResult_reflection_;
  delete PbRpcKVPublicSetArg::default_instance_;
  delete PbRpcKVPublicSetArg_reflection_;
  delete PbRpcKVPublicSetResult::default_instance_;
  delete PbRpcKVPublicSetResult_reflection_;
  delete PbRpcKVPublicTxGetArg::default_instance_;
  delete PbRpcKVPublicTxGetArg_reflection_;
  delete PbRpcKVPublicTxGetResult::default_instance_;
  delete PbRpcKVPublicTxGetResult_reflection_;
  delete PbRpcKVPublicShowArg::default_instance_;
  delete PbRpcKVPublicShowArg_reflection_;
  delete PbRpcKVPublicShowResult::default_instance_;
  delete PbRpcKVPublicShowResult_reflection_;
  delete PbRpcKVInternalGetArg::default_instance_;
  delete PbRpcKVInternalGetArg_reflection_;
  delete PbRpcKVInternalGetResult::default_instance_;
  delete PbRpcKVInternalGetResult_reflection_;
  delete PbRpcKVInternalSetArg::default_instance_;
  delete PbRpcKVInternalSetArg_reflection_;
  delete PbRpcKVInternalSetResult::default_instance_;
  delete PbRpcKVInternalSetResult_reflection_;
  delete PbRpcKVInternalTxSliceGetArg::default_instance_;
  delete PbRpcKVInternalTxSliceGetArg_reflection_;
  delete PbRpcKVInternalTxSliceGetResult::default_instance_;
  delete PbRpcKVInternalTxSliceGetResult_reflection_;
  delete PbRpcKVInternalShowItemArg::default_instance_;
  delete PbRpcKVInternalShowItemArg_reflection_;
  delete PbRpcKVInternalShowItemResult::default_instance_;
  delete PbRpcKVInternalShowItemResult_reflection_;
  delete PbUpdatedItemVersion::default_instance_;
  delete PbUpdatedItemVersion_reflection_;
  delete PbRpcReplicationArg::default_instance_;
  delete PbRpcReplicationArg_reflection_;
  delete PbRpcHeartbeat::default_instance_;
  delete PbRpcHeartbeat_reflection_;
  delete PbRpcLST::default_instance_;
  delete PbRpcLST_reflection_;
  delete PbRpcGST::default_instance_;
  delete PbRpcGST_reflection_;
  delete PbRpcGSTReq::default_instance_;
  delete PbRpcGSTReq_reflection_;
  delete PbRpcPVV::default_instance_;
  delete PbRpcPVV_reflection_;
  delete PbRpcGSV::default_instance_;
  delete PbRpcGSV_reflection_;
  delete PbRpcGroupServiceResult::default_instance_;
  delete PbRpcGroupServiceResult_reflection_;
  delete PbPartition::default_instance_;
  delete PbPartition_reflection_;
  delete PbRegisteredPartitions::default_instance_;
  delete PbRegisteredPartitions_reflection_;
  delete PbRpcKVInternalPrepareReplyResult::default_instance_;
  delete PbRpcKVInternalPrepareReplyResult_reflection_;
  delete PbRpCommitRequestArg::default_instance_;
  delete PbRpCommitRequestArg_reflection_;
  delete PbRpcKVPublicCommitArg::default_instance_;
  delete PbRpcKVPublicCommitArg_reflection_;
  delete PbRpcKVPublicCommitResult::default_instance_;
  delete PbRpcKVPublicCommitResult_reflection_;
  delete PbRpcPartitionClientPrepareRequestResult::default_instance_;
  delete PbRpcPartitionClientPrepareRequestResult_reflection_;
}

void protobuf_AddDesc_rpc_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rpc_messages.proto\"B\n\014PbRpcRequest\022\r\n\005"
    "MsgId\030\001 \002(\005\022\020\n\010MethodId\030\002 \002(\005\022\021\n\tArgumen"
    "ts\030\003 \001(\014\",\n\nPbRpcReply\022\r\n\005MsgId\030\001 \002(\005\022\017\n"
    "\007Results\030\002 \001(\014\"\035\n\rPbRpcEchoTest\022\014\n\004text\030"
    "\001 \001(\014\"\"\n\017PbVersionVector\022\017\n\007Version\030\001 \003("
    "\020\":\n\022PbPhysicalTimeSpec\022\017\n\007Seconds\030\001 \002(\003"
    "\022\023\n\013NanoSeconds\030\002 \002(\003\"\232\001\n\"PbRpcKVPublicG"
    "etServerConfigResult\022\021\n\tSucceeded\030\001 \002(\010\022"
    "\025\n\rNumPartitions\030\002 \002(\005\022\037\n\027NumReplicasPer"
    "Partition\030\003 \002(\005\022\026\n\016OptimisticMode\030\004 \002(\010\022"
    "\021\n\treplicaId\030\005 \002(\005\"\255\001\n\023PbRpcKVPublicGetA"
    "rg\022\013\n\003Key\030\001 \002(\014\022 \n\003GST\030\002 \001(\0132\023.PbPhysica"
    "lTimeSpec\022#\n\006minLST\030\003 \001(\0132\023.PbPhysicalTi"
    "meSpec\022 \n\003NDV\030\004 \003(\0132\023.PbPhysicalTimeSpec"
    "\022 \n\003GSV\030\005 \003(\0132\023.PbPhysicalTimeSpec\"\235\002\n\026P"
    "bRpcKVPublicGetResult\022\021\n\tSucceeded\030\001 \002(\010"
    "\022\020\n\010GetValue\030\002 \002(\014\022\037\n\002DT\030\003 \001(\0132\023.PbPhysi"
    "calTimeSpec\022 \n\003GST\030\004 \001(\0132\023.PbPhysicalTim"
    "eSpec\022 \n\003DUT\030\005 \001(\0132\023.PbPhysicalTimeSpec\022"
    "\017\n\007Blocked\030\006 \001(\010\022\021\n\tMinLSTKey\030\007 \001(\014\022\037\n\002D"
    "V\030\010 \003(\0132\023.PbPhysicalTimeSpec\022\022\n\nSrcRepli"
    "ca\030\t \001(\005\022 \n\003GSV\030\n \003(\0132\023.PbPhysicalTimeSp"
    "ec\"\206\001\n\023PbRpcKVPublicSetArg\022\013\n\003Key\030\001 \002(\014\022"
    "\r\n\005Value\030\002 \002(\014\022\037\n\002DT\030\003 \001(\0132\023.PbPhysicalT"
    "imeSpec\022\021\n\tMinLSTKey\030\004 \001(\014\022\037\n\002DV\030\005 \003(\0132\023"
    ".PbPhysicalTimeSpec\"`\n\026PbRpcKVPublicSetR"
    "esult\022\021\n\tSucceeded\030\001 \002(\010\022\037\n\002DT\030\002 \001(\0132\023.P"
    "bPhysicalTimeSpec\022\022\n\nSrcReplica\030\003 \001(\005\"\207\001"
    "\n\025PbRpcKVPublicTxGetArg\022\013\n\003Key\030\001 \003(\014\022\037\n\002"
    "ST\030\002 \001(\0132\023.PbPhysicalTimeSpec\022\037\n\002UT\030\003 \001("
    "\0132\023.PbPhysicalTimeSpec\022\037\n\002SV\030\004 \003(\0132\023.PbP"
    "hysicalTimeSpec\"\303\001\n\030PbRpcKVPublicTxGetRe"
    "sult\022\021\n\tSucceeded\030\001 \002(\010\022\020\n\010GetValue\030\002 \003("
    "\014\022\037\n\002ST\030\003 \001(\0132\023.PbPhysicalTimeSpec\022\037\n\002SV"
    "\030\004 \003(\0132\023.PbPhysicalTimeSpec\022\037\n\002UT\030\005 \001(\0132"
    "\023.PbPhysicalTimeSpec\022\037\n\002UV\030\006 \003(\0132\023.PbPhy"
    "sicalTimeSpec\"#\n\024PbRpcKVPublicShowArg\022\013\n"
    "\003Key\030\001 \001(\014\"B\n\027PbRpcKVPublicShowResult\022\021\n"
    "\tSucceeded\030\001 \002(\010\022\024\n\014ReturnString\030\002 \002(\014\"\257"
    "\001\n\025PbRpcKVInternalGetArg\022\013\n\003Key\030\001 \002(\014\022 \n"
    "\003GST\030\002 \001(\0132\023.PbPhysicalTimeSpec\022#\n\006minLS"
    "T\030\003 \001(\0132\023.PbPhysicalTimeSpec\022 \n\003NDV\030\004 \003("
    "\0132\023.PbPhysicalTimeSpec\022 \n\003GSV\030\005 \003(\0132\023.Pb"
    "PhysicalTimeSpec\"\237\002\n\030PbRpcKVInternalGetR"
    "esult\022\021\n\tSucceeded\030\001 \002(\010\022\020\n\010GetValue\030\002 \002"
    "(\014\022\037\n\002DT\030\003 \001(\0132\023.PbPhysicalTimeSpec\022 \n\003G"
    "ST\030\004 \001(\0132\023.PbPhysicalTimeSpec\022 \n\003DUT\030\005 \001"
    "(\0132\023.PbPhysicalTimeSpec\022\021\n\tMinLSTKey\030\006 \001"
    "(\014\022\017\n\007Blocked\030\007 \001(\010\022\037\n\002DV\030\010 \003(\0132\023.PbPhys"
    "icalTimeSpec\022\022\n\nSrcReplica\030\t \001(\005\022 \n\003GSV\030"
    "\n \003(\0132\023.PbPhysicalTimeSpec\"\210\001\n\025PbRpcKVIn"
    "ternalSetArg\022\013\n\003Key\030\001 \002(\014\022\r\n\005Value\030\002 \002(\014"
    "\022\037\n\002DT\030\003 \001(\0132\023.PbPhysicalTimeSpec\022\021\n\tMin"
    "LSTKey\030\004 \001(\014\022\037\n\002DV\030\005 \003(\0132\023.PbPhysicalTim"
    "eSpec\"b\n\030PbRpcKVInternalSetResult\022\021\n\tSuc"
    "ceeded\030\001 \002(\010\022\037\n\002DT\030\002 \001(\0132\023.PbPhysicalTim"
    "eSpec\022\022\n\nSrcReplica\030\003 \001(\005\"\206\001\n\034PbRpcKVInt"
    "ernalTxSliceGetArg\022\013\n\003Key\030\001 \002(\014\022\037\n\002ST\030\002 "
    "\001(\0132\023.PbPhysicalTimeSpec\022\037\n\002SV\030\003 \003(\0132\023.P"
    "bPhysicalTimeSpec\022\n\n\002id\030\004 \001(\003\022\013\n\003src\030\005 \001"
    "(\003\"\321\002\n\037PbRpcKVInternalTxSliceGetResult\022\021"
    "\n\tSucceeded\030\001 \002(\010\022\020\n\010GetValue\030\002 \002(\014\022\037\n\002D"
    "T\030\003 \001(\0132\023.PbPhysicalTimeSpec\022 \n\003GST\030\004 \001("
    "\0132\023.PbPhysicalTimeSpec\022 \n\003DUT\030\005 \001(\0132\023.Pb"
    "PhysicalTimeSpec\022\037\n\002DV\030\006 \003(\0132\023.PbPhysica"
    "lTimeSpec\022 \n\003NDV\030\007 \003(\0132\023.PbPhysicalTimeS"
    "pec\022 \n\003GSV\030\010 \003(\0132\023.PbPhysicalTimeSpec\022\022\n"
    "\nSrcReplica\030\t \001(\005\022\022\n\nwaitedXact\030\n \001(\001\022\n\n"
    "\002id\030\013 \001(\003\022\013\n\003src\030\014 \001(\003\")\n\032PbRpcKVInterna"
    "lShowItemArg\022\013\n\003Key\030\001 \002(\014\"H\n\035PbRpcKVInte"
    "rnalShowItemResult\022\021\n\tSucceeded\030\001 \002(\010\022\024\n"
    "\014ItemVersions\030\002 \002(\014\"7\n\024PbUpdatedItemVers"
    "ion\022\013\n\003LUT\030\001 \002(\003\022\022\n\nSrcReplica\030\002 \002(\005\"R\n\023"
    "PbRpcReplicationArg\022%\n\010remoteDV\030\001 \003(\0132\023."
    "PbPhysicalTimeSpec\022\024\n\014UpdateRecord\030\002 \003(\014"
    "\"P\n\016PbRpcHeartbeat\022)\n\014PhysicalTime\030\001 \002(\013"
    "2\023.PbPhysicalTimeSpec\022\023\n\013LogicalTime\030\002 \002"
    "(\003\"^\n\010PbRpcLST\022!\n\004Time\030\001 \002(\0132\023.PbPhysica"
    "lTimeSpec\022\r\n\005Round\030\002 \002(\005\022 \n\003PVV\030\003 \003(\0132\023."
    "PbPhysicalTimeSpec\"-\n\010PbRpcGST\022!\n\004Time\030\001"
    " \002(\0132\023.PbPhysicalTimeSpec\"b\n\013PbRpcGSTReq"
    "\022!\n\004Time\030\001 \002(\0132\023.PbPhysicalTimeSpec\022\016\n\006P"
    "eerId\030\002 \002(\005\022 \n\003GSV\030\003 \003(\0132\023.PbPhysicalTim"
    "eSpec\";\n\010PbRpcPVV\022\r\n\005Round\030\001 \002(\005\022 \n\003PVV\030"
    "\002 \003(\0132\023.PbPhysicalTimeSpec\",\n\010PbRpcGSV\022 "
    "\n\003GSV\030\001 \003(\0132\023.PbPhysicalTimeSpec\",\n\027PbRp"
    "cGroupServiceResult\022\021\n\tSucceeded\030\001 \002(\010\"\207"
    "\001\n\013PbPartition\022\014\n\004Name\030\001 \002(\t\022\022\n\nPublicPo"
    "rt\030\002 \002(\005\022\025\n\rPartitionPort\030\003 \002(\005\022\027\n\017Repli"
    "cationPort\030\004 \002(\005\022\023\n\013PartitionId\030\005 \002(\005\022\021\n"
    "\tReplicaId\030\006 \002(\005\"q\n\026PbRegisteredPartitio"
    "ns\022\025\n\rNumPartitions\030\001 \002(\005\022\037\n\027NumReplicas"
    "PerPartition\030\002 \002(\005\022\037\n\tPartition\030\003 \003(\0132\014."
    "PbPartition\"t\n!PbRpcKVInternalPrepareRep"
    "lyResult\022\n\n\002id\030\001 \002(\003\022\037\n\002PT\030\002 \002(\0132\023.PbPhy"
    "sicalTimeSpec\022\013\n\003src\030\003 \002(\003\022\025\n\rblockDurat"
    "ion\030\004 \001(\001\"C\n\024PbRpCommitRequestArg\022\n\n\002id\030"
    "\001 \002(\003\022\037\n\002CT\030\002 \002(\0132\023.PbPhysicalTimeSpec\"@"
    "\n\026PbRpcKVPublicCommitArg\022\n\n\002ID\030\001 \002(\003\022\013\n\003"
    "Key\030\002 \003(\014\022\r\n\005Value\030\003 \003(\014\"O\n\031PbRpcKVPubli"
    "cCommitResult\022\021\n\tSucceeded\030\001 \002(\010\022\037\n\002CT\030\002"
    " \002(\0132\023.PbPhysicalTimeSpec\"{\n(PbRpcPartit"
    "ionClientPrepareRequestResult\022\n\n\002id\030\001 \002("
    "\003\022\037\n\002PT\030\002 \002(\0132\023.PbPhysicalTimeSpec\022\013\n\003sr"
    "c\030\003 \002(\003\022\025\n\rblockDuration\030\004 \001(\001", 4190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_messages.proto", &protobuf_RegisterTypes);
  PbRpcRequest::default_instance_ = new PbRpcRequest();
  PbRpcReply::default_instance_ = new PbRpcReply();
  PbRpcEchoTest::default_instance_ = new PbRpcEchoTest();
  PbVersionVector::default_instance_ = new PbVersionVector();
  PbPhysicalTimeSpec::default_instance_ = new PbPhysicalTimeSpec();
  PbRpcKVPublicGetServerConfigResult::default_instance_ = new PbRpcKVPublicGetServerConfigResult();
  PbRpcKVPublicGetArg::default_instance_ = new PbRpcKVPublicGetArg();
  PbRpcKVPublicGetResult::default_instance_ = new PbRpcKVPublicGetResult();
  PbRpcKVPublicSetArg::default_instance_ = new PbRpcKVPublicSetArg();
  PbRpcKVPublicSetResult::default_instance_ = new PbRpcKVPublicSetResult();
  PbRpcKVPublicTxGetArg::default_instance_ = new PbRpcKVPublicTxGetArg();
  PbRpcKVPublicTxGetResult::default_instance_ = new PbRpcKVPublicTxGetResult();
  PbRpcKVPublicShowArg::default_instance_ = new PbRpcKVPublicShowArg();
  PbRpcKVPublicShowResult::default_instance_ = new PbRpcKVPublicShowResult();
  PbRpcKVInternalGetArg::default_instance_ = new PbRpcKVInternalGetArg();
  PbRpcKVInternalGetResult::default_instance_ = new PbRpcKVInternalGetResult();
  PbRpcKVInternalSetArg::default_instance_ = new PbRpcKVInternalSetArg();
  PbRpcKVInternalSetResult::default_instance_ = new PbRpcKVInternalSetResult();
  PbRpcKVInternalTxSliceGetArg::default_instance_ = new PbRpcKVInternalTxSliceGetArg();
  PbRpcKVInternalTxSliceGetResult::default_instance_ = new PbRpcKVInternalTxSliceGetResult();
  PbRpcKVInternalShowItemArg::default_instance_ = new PbRpcKVInternalShowItemArg();
  PbRpcKVInternalShowItemResult::default_instance_ = new PbRpcKVInternalShowItemResult();
  PbUpdatedItemVersion::default_instance_ = new PbUpdatedItemVersion();
  PbRpcReplicationArg::default_instance_ = new PbRpcReplicationArg();
  PbRpcHeartbeat::default_instance_ = new PbRpcHeartbeat();
  PbRpcLST::default_instance_ = new PbRpcLST();
  PbRpcGST::default_instance_ = new PbRpcGST();
  PbRpcGSTReq::default_instance_ = new PbRpcGSTReq();
  PbRpcPVV::default_instance_ = new PbRpcPVV();
  PbRpcGSV::default_instance_ = new PbRpcGSV();
  PbRpcGroupServiceResult::default_instance_ = new PbRpcGroupServiceResult();
  PbPartition::default_instance_ = new PbPartition();
  PbRegisteredPartitions::default_instance_ = new PbRegisteredPartitions();
  PbRpcKVInternalPrepareReplyResult::default_instance_ = new PbRpcKVInternalPrepareReplyResult();
  PbRpCommitRequestArg::default_instance_ = new PbRpCommitRequestArg();
  PbRpcKVPublicCommitArg::default_instance_ = new PbRpcKVPublicCommitArg();
  PbRpcKVPublicCommitResult::default_instance_ = new PbRpcKVPublicCommitResult();
  PbRpcPartitionClientPrepareRequestResult::default_instance_ = new PbRpcPartitionClientPrepareRequestResult();
  PbRpcRequest::default_instance_->InitAsDefaultInstance();
  PbRpcReply::default_instance_->InitAsDefaultInstance();
  PbRpcEchoTest::default_instance_->InitAsDefaultInstance();
  PbVersionVector::default_instance_->InitAsDefaultInstance();
  PbPhysicalTimeSpec::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicGetServerConfigResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicGetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicGetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicSetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicSetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicTxGetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicTxGetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicShowArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicShowResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalGetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalGetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalSetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalSetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalTxSliceGetArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalTxSliceGetResult::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalShowItemArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalShowItemResult::default_instance_->InitAsDefaultInstance();
  PbUpdatedItemVersion::default_instance_->InitAsDefaultInstance();
  PbRpcReplicationArg::default_instance_->InitAsDefaultInstance();
  PbRpcHeartbeat::default_instance_->InitAsDefaultInstance();
  PbRpcLST::default_instance_->InitAsDefaultInstance();
  PbRpcGST::default_instance_->InitAsDefaultInstance();
  PbRpcGSTReq::default_instance_->InitAsDefaultInstance();
  PbRpcPVV::default_instance_->InitAsDefaultInstance();
  PbRpcGSV::default_instance_->InitAsDefaultInstance();
  PbRpcGroupServiceResult::default_instance_->InitAsDefaultInstance();
  PbPartition::default_instance_->InitAsDefaultInstance();
  PbRegisteredPartitions::default_instance_->InitAsDefaultInstance();
  PbRpcKVInternalPrepareReplyResult::default_instance_->InitAsDefaultInstance();
  PbRpCommitRequestArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicCommitArg::default_instance_->InitAsDefaultInstance();
  PbRpcKVPublicCommitResult::default_instance_->InitAsDefaultInstance();
  PbRpcPartitionClientPrepareRequestResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5fmessages_2eproto {
  StaticDescriptorInitializer_rpc_5fmessages_2eproto() {
    protobuf_AddDesc_rpc_5fmessages_2eproto();
  }
} static_descriptor_initializer_rpc_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRpcRequest::kMsgIdFieldNumber;
const int PbRpcRequest::kMethodIdFieldNumber;
const int PbRpcRequest::kArgumentsFieldNumber;
#endif  // !_MSC_VER

PbRpcRequest::PbRpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcRequest)
}

void PbRpcRequest::InitAsDefaultInstance() {
}

PbRpcRequest::PbRpcRequest(const PbRpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcRequest)
}

void PbRpcRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0;
  methodid_ = 0;
  arguments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcRequest::~PbRpcRequest() {
  // @@protoc_insertion_point(destructor:PbRpcRequest)
  SharedDtor();
}

void PbRpcRequest::SharedDtor() {
  if (arguments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arguments_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcRequest_descriptor_;
}

const PbRpcRequest& PbRpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcRequest* PbRpcRequest::default_instance_ = NULL;

PbRpcRequest* PbRpcRequest::New() const {
  return new PbRpcRequest;
}

void PbRpcRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(msgid_, methodid_);
    if (has_arguments()) {
      if (arguments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arguments_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MethodId;
        break;
      }

      // required int32 MethodId = 2;
      case 2: {
        if (tag == 16) {
         parse_MethodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &methodid_)));
          set_has_methodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Arguments;
        break;
      }

      // optional bytes Arguments = 3;
      case 3: {
        if (tag == 26) {
         parse_Arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcRequest)
  return false;
#undef DO_
}

void PbRpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcRequest)
  // required int32 MsgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // required int32 MethodId = 2;
  if (has_methodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->methodid(), output);
  }

  // optional bytes Arguments = 3;
  if (has_arguments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->arguments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcRequest)
}

::google::protobuf::uint8* PbRpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcRequest)
  // required int32 MsgId = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // required int32 MethodId = 2;
  if (has_methodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->methodid(), target);
  }

  // optional bytes Arguments = 3;
  if (has_arguments()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->arguments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcRequest)
  return target;
}

int PbRpcRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MsgId = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // required int32 MethodId = 2;
    if (has_methodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->methodid());
    }

    // optional bytes Arguments = 3;
    if (has_arguments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arguments());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcRequest::MergeFrom(const PbRpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_methodid()) {
      set_methodid(from.methodid());
    }
    if (from.has_arguments()) {
      set_arguments(from.arguments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcRequest::CopyFrom(const PbRpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbRpcRequest::Swap(PbRpcRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(methodid_, other->methodid_);
    std::swap(arguments_, other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcRequest_descriptor_;
  metadata.reflection = PbRpcRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcReply::kMsgIdFieldNumber;
const int PbRpcReply::kResultsFieldNumber;
#endif  // !_MSC_VER

PbRpcReply::PbRpcReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcReply)
}

void PbRpcReply::InitAsDefaultInstance() {
}

PbRpcReply::PbRpcReply(const PbRpcReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcReply)
}

void PbRpcReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0;
  results_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcReply::~PbRpcReply() {
  // @@protoc_insertion_point(destructor:PbRpcReply)
  SharedDtor();
}

void PbRpcReply::SharedDtor() {
  if (results_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete results_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcReply_descriptor_;
}

const PbRpcReply& PbRpcReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcReply* PbRpcReply::default_instance_ = NULL;

PbRpcReply* PbRpcReply::New() const {
  return new PbRpcReply;
}

void PbRpcReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 0;
    if (has_results()) {
      if (results_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        results_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Results;
        break;
      }

      // optional bytes Results = 2;
      case 2: {
        if (tag == 18) {
         parse_Results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcReply)
  return false;
#undef DO_
}

void PbRpcReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcReply)
  // required int32 MsgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional bytes Results = 2;
  if (has_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->results(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcReply)
}

::google::protobuf::uint8* PbRpcReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcReply)
  // required int32 MsgId = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional bytes Results = 2;
  if (has_results()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->results(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcReply)
  return target;
}

int PbRpcReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MsgId = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional bytes Results = 2;
    if (has_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->results());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcReply::MergeFrom(const PbRpcReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_results()) {
      set_results(from.results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcReply::CopyFrom(const PbRpcReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcReply::Swap(PbRpcReply* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(results_, other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcReply_descriptor_;
  metadata.reflection = PbRpcReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcEchoTest::kTextFieldNumber;
#endif  // !_MSC_VER

PbRpcEchoTest::PbRpcEchoTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcEchoTest)
}

void PbRpcEchoTest::InitAsDefaultInstance() {
}

PbRpcEchoTest::PbRpcEchoTest(const PbRpcEchoTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcEchoTest)
}

void PbRpcEchoTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcEchoTest::~PbRpcEchoTest() {
  // @@protoc_insertion_point(destructor:PbRpcEchoTest)
  SharedDtor();
}

void PbRpcEchoTest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcEchoTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcEchoTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcEchoTest_descriptor_;
}

const PbRpcEchoTest& PbRpcEchoTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcEchoTest* PbRpcEchoTest::default_instance_ = NULL;

PbRpcEchoTest* PbRpcEchoTest::New() const {
  return new PbRpcEchoTest;
}

void PbRpcEchoTest::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcEchoTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcEchoTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcEchoTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcEchoTest)
  return false;
#undef DO_
}

void PbRpcEchoTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcEchoTest)
  // optional bytes text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcEchoTest)
}

::google::protobuf::uint8* PbRpcEchoTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcEchoTest)
  // optional bytes text = 1;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcEchoTest)
  return target;
}

int PbRpcEchoTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcEchoTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcEchoTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcEchoTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcEchoTest::MergeFrom(const PbRpcEchoTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcEchoTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcEchoTest::CopyFrom(const PbRpcEchoTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcEchoTest::IsInitialized() const {

  return true;
}

void PbRpcEchoTest::Swap(PbRpcEchoTest* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcEchoTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcEchoTest_descriptor_;
  metadata.reflection = PbRpcEchoTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbVersionVector::kVersionFieldNumber;
#endif  // !_MSC_VER

PbVersionVector::PbVersionVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbVersionVector)
}

void PbVersionVector::InitAsDefaultInstance() {
}

PbVersionVector::PbVersionVector(const PbVersionVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbVersionVector)
}

void PbVersionVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVersionVector::~PbVersionVector() {
  // @@protoc_insertion_point(destructor:PbVersionVector)
  SharedDtor();
}

void PbVersionVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVersionVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVersionVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVersionVector_descriptor_;
}

const PbVersionVector& PbVersionVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbVersionVector* PbVersionVector::default_instance_ = NULL;

PbVersionVector* PbVersionVector::New() const {
  return new PbVersionVector;
}

void PbVersionVector::Clear() {
  version_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVersionVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbVersionVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sfixed64 Version = 1;
      case 1: {
        if (tag == 9) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 1, 9, input, this->mutable_version())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_version())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_Version;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbVersionVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbVersionVector)
  return false;
#undef DO_
}

void PbVersionVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbVersionVector)
  // repeated sfixed64 Version = 1;
  for (int i = 0; i < this->version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      1, this->version(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbVersionVector)
}

::google::protobuf::uint8* PbVersionVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbVersionVector)
  // repeated sfixed64 Version = 1;
  for (int i = 0; i < this->version_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64ToArray(1, this->version(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbVersionVector)
  return target;
}

int PbVersionVector::ByteSize() const {
  int total_size = 0;

  // repeated sfixed64 Version = 1;
  {
    int data_size = 0;
    data_size = 8 * this->version_size();
    total_size += 1 * this->version_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVersionVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVersionVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVersionVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVersionVector::MergeFrom(const PbVersionVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_.MergeFrom(from.version_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVersionVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVersionVector::CopyFrom(const PbVersionVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVersionVector::IsInitialized() const {

  return true;
}

void PbVersionVector::Swap(PbVersionVector* other) {
  if (other != this) {
    version_.Swap(&other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVersionVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVersionVector_descriptor_;
  metadata.reflection = PbVersionVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbPhysicalTimeSpec::kSecondsFieldNumber;
const int PbPhysicalTimeSpec::kNanoSecondsFieldNumber;
#endif  // !_MSC_VER

PbPhysicalTimeSpec::PbPhysicalTimeSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbPhysicalTimeSpec)
}

void PbPhysicalTimeSpec::InitAsDefaultInstance() {
}

PbPhysicalTimeSpec::PbPhysicalTimeSpec(const PbPhysicalTimeSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbPhysicalTimeSpec)
}

void PbPhysicalTimeSpec::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_LONGLONG(0);
  nanoseconds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPhysicalTimeSpec::~PbPhysicalTimeSpec() {
  // @@protoc_insertion_point(destructor:PbPhysicalTimeSpec)
  SharedDtor();
}

void PbPhysicalTimeSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbPhysicalTimeSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPhysicalTimeSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPhysicalTimeSpec_descriptor_;
}

const PbPhysicalTimeSpec& PbPhysicalTimeSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbPhysicalTimeSpec* PbPhysicalTimeSpec::default_instance_ = NULL;

PbPhysicalTimeSpec* PbPhysicalTimeSpec::New() const {
  return new PbPhysicalTimeSpec;
}

void PbPhysicalTimeSpec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbPhysicalTimeSpec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seconds_, nanoseconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPhysicalTimeSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbPhysicalTimeSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NanoSeconds;
        break;
      }

      // required int64 NanoSeconds = 2;
      case 2: {
        if (tag == 16) {
         parse_NanoSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nanoseconds_)));
          set_has_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbPhysicalTimeSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbPhysicalTimeSpec)
  return false;
#undef DO_
}

void PbPhysicalTimeSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbPhysicalTimeSpec)
  // required int64 Seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // required int64 NanoSeconds = 2;
  if (has_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nanoseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbPhysicalTimeSpec)
}

::google::protobuf::uint8* PbPhysicalTimeSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbPhysicalTimeSpec)
  // required int64 Seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // required int64 NanoSeconds = 2;
  if (has_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nanoseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbPhysicalTimeSpec)
  return target;
}

int PbPhysicalTimeSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 Seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seconds());
    }

    // required int64 NanoSeconds = 2;
    if (has_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nanoseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPhysicalTimeSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPhysicalTimeSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPhysicalTimeSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPhysicalTimeSpec::MergeFrom(const PbPhysicalTimeSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_nanoseconds()) {
      set_nanoseconds(from.nanoseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPhysicalTimeSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPhysicalTimeSpec::CopyFrom(const PbPhysicalTimeSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPhysicalTimeSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbPhysicalTimeSpec::Swap(PbPhysicalTimeSpec* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(nanoseconds_, other->nanoseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbPhysicalTimeSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPhysicalTimeSpec_descriptor_;
  metadata.reflection = PbPhysicalTimeSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicGetServerConfigResult::kSucceededFieldNumber;
const int PbRpcKVPublicGetServerConfigResult::kNumPartitionsFieldNumber;
const int PbRpcKVPublicGetServerConfigResult::kNumReplicasPerPartitionFieldNumber;
const int PbRpcKVPublicGetServerConfigResult::kOptimisticModeFieldNumber;
const int PbRpcKVPublicGetServerConfigResult::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicGetServerConfigResult::PbRpcKVPublicGetServerConfigResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicGetServerConfigResult)
}

void PbRpcKVPublicGetServerConfigResult::InitAsDefaultInstance() {
}

PbRpcKVPublicGetServerConfigResult::PbRpcKVPublicGetServerConfigResult(const PbRpcKVPublicGetServerConfigResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicGetServerConfigResult)
}

void PbRpcKVPublicGetServerConfigResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  numpartitions_ = 0;
  numreplicasperpartition_ = 0;
  optimisticmode_ = false;
  replicaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicGetServerConfigResult::~PbRpcKVPublicGetServerConfigResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicGetServerConfigResult)
  SharedDtor();
}

void PbRpcKVPublicGetServerConfigResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcKVPublicGetServerConfigResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicGetServerConfigResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicGetServerConfigResult_descriptor_;
}

const PbRpcKVPublicGetServerConfigResult& PbRpcKVPublicGetServerConfigResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicGetServerConfigResult* PbRpcKVPublicGetServerConfigResult::default_instance_ = NULL;

PbRpcKVPublicGetServerConfigResult* PbRpcKVPublicGetServerConfigResult::New() const {
  return new PbRpcKVPublicGetServerConfigResult;
}

void PbRpcKVPublicGetServerConfigResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVPublicGetServerConfigResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(numpartitions_, replicaid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicGetServerConfigResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicGetServerConfigResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumPartitions;
        break;
      }

      // required int32 NumPartitions = 2;
      case 2: {
        if (tag == 16) {
         parse_NumPartitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpartitions_)));
          set_has_numpartitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumReplicasPerPartition;
        break;
      }

      // required int32 NumReplicasPerPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_NumReplicasPerPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numreplicasperpartition_)));
          set_has_numreplicasperpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OptimisticMode;
        break;
      }

      // required bool OptimisticMode = 4;
      case 4: {
        if (tag == 32) {
         parse_OptimisticMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimisticmode_)));
          set_has_optimisticmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_replicaId;
        break;
      }

      // required int32 replicaId = 5;
      case 5: {
        if (tag == 40) {
         parse_replicaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicaid_)));
          set_has_replicaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicGetServerConfigResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicGetServerConfigResult)
  return false;
#undef DO_
}

void PbRpcKVPublicGetServerConfigResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numpartitions(), output);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numreplicasperpartition(), output);
  }

  // required bool OptimisticMode = 4;
  if (has_optimisticmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->optimisticmode(), output);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replicaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicGetServerConfigResult)
}

::google::protobuf::uint8* PbRpcKVPublicGetServerConfigResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numpartitions(), target);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numreplicasperpartition(), target);
  }

  // required bool OptimisticMode = 4;
  if (has_optimisticmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->optimisticmode(), target);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replicaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicGetServerConfigResult)
  return target;
}

int PbRpcKVPublicGetServerConfigResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int32 NumPartitions = 2;
    if (has_numpartitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpartitions());
    }

    // required int32 NumReplicasPerPartition = 3;
    if (has_numreplicasperpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numreplicasperpartition());
    }

    // required bool OptimisticMode = 4;
    if (has_optimisticmode()) {
      total_size += 1 + 1;
    }

    // required int32 replicaId = 5;
    if (has_replicaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicGetServerConfigResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicGetServerConfigResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicGetServerConfigResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicGetServerConfigResult::MergeFrom(const PbRpcKVPublicGetServerConfigResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_numpartitions()) {
      set_numpartitions(from.numpartitions());
    }
    if (from.has_numreplicasperpartition()) {
      set_numreplicasperpartition(from.numreplicasperpartition());
    }
    if (from.has_optimisticmode()) {
      set_optimisticmode(from.optimisticmode());
    }
    if (from.has_replicaid()) {
      set_replicaid(from.replicaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicGetServerConfigResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicGetServerConfigResult::CopyFrom(const PbRpcKVPublicGetServerConfigResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicGetServerConfigResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PbRpcKVPublicGetServerConfigResult::Swap(PbRpcKVPublicGetServerConfigResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(numpartitions_, other->numpartitions_);
    std::swap(numreplicasperpartition_, other->numreplicasperpartition_);
    std::swap(optimisticmode_, other->optimisticmode_);
    std::swap(replicaid_, other->replicaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicGetServerConfigResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicGetServerConfigResult_descriptor_;
  metadata.reflection = PbRpcKVPublicGetServerConfigResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicGetArg::kKeyFieldNumber;
const int PbRpcKVPublicGetArg::kGSTFieldNumber;
const int PbRpcKVPublicGetArg::kMinLSTFieldNumber;
const int PbRpcKVPublicGetArg::kNDVFieldNumber;
const int PbRpcKVPublicGetArg::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicGetArg::PbRpcKVPublicGetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicGetArg)
}

void PbRpcKVPublicGetArg::InitAsDefaultInstance() {
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  minlst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicGetArg::PbRpcKVPublicGetArg(const PbRpcKVPublicGetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicGetArg)
}

void PbRpcKVPublicGetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gst_ = NULL;
  minlst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicGetArg::~PbRpcKVPublicGetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicGetArg)
  SharedDtor();
}

void PbRpcKVPublicGetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete gst_;
    delete minlst_;
  }
}

void PbRpcKVPublicGetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicGetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicGetArg_descriptor_;
}

const PbRpcKVPublicGetArg& PbRpcKVPublicGetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicGetArg* PbRpcKVPublicGetArg::default_instance_ = NULL;

PbRpcKVPublicGetArg* PbRpcKVPublicGetArg::New() const {
  return new PbRpcKVPublicGetArg;
}

void PbRpcKVPublicGetArg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlst()) {
      if (minlst_ != NULL) minlst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ndv_.Clear();
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicGetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicGetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GST;
        break;
      }

      // optional .PbPhysicalTimeSpec GST = 2;
      case 2: {
        if (tag == 18) {
         parse_GST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_minLST;
        break;
      }

      // optional .PbPhysicalTimeSpec minLST = 3;
      case 3: {
        if (tag == 26) {
         parse_minLST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minlst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NDV;
        break;
      }

      // repeated .PbPhysicalTimeSpec NDV = 4;
      case 4: {
        if (tag == 34) {
         parse_NDV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ndv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NDV;
        if (input->ExpectTag(42)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 5;
      case 5: {
        if (tag == 42) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicGetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicGetArg)
  return false;
#undef DO_
}

void PbRpcKVPublicGetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .PbPhysicalTimeSpec GST = 2;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gst(), output);
  }

  // optional .PbPhysicalTimeSpec minLST = 3;
  if (has_minlst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->minlst(), output);
  }

  // repeated .PbPhysicalTimeSpec NDV = 4;
  for (int i = 0; i < this->ndv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ndv(i), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicGetArg)
}

::google::protobuf::uint8* PbRpcKVPublicGetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .PbPhysicalTimeSpec GST = 2;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gst(), target);
  }

  // optional .PbPhysicalTimeSpec minLST = 3;
  if (has_minlst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->minlst(), target);
  }

  // repeated .PbPhysicalTimeSpec NDV = 4;
  for (int i = 0; i < this->ndv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ndv(i), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicGetArg)
  return target;
}

int PbRpcKVPublicGetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .PbPhysicalTimeSpec GST = 2;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // optional .PbPhysicalTimeSpec minLST = 3;
    if (has_minlst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minlst());
    }

  }
  // repeated .PbPhysicalTimeSpec NDV = 4;
  total_size += 1 * this->ndv_size();
  for (int i = 0; i < this->ndv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ndv(i));
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicGetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicGetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicGetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicGetArg::MergeFrom(const PbRpcKVPublicGetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ndv_.MergeFrom(from.ndv_);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_minlst()) {
      mutable_minlst()->::PbPhysicalTimeSpec::MergeFrom(from.minlst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicGetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicGetArg::CopyFrom(const PbRpcKVPublicGetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicGetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_minlst()) {
    if (!this->minlst().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ndv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcKVPublicGetArg::Swap(PbRpcKVPublicGetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(gst_, other->gst_);
    std::swap(minlst_, other->minlst_);
    ndv_.Swap(&other->ndv_);
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicGetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicGetArg_descriptor_;
  metadata.reflection = PbRpcKVPublicGetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicGetResult::kSucceededFieldNumber;
const int PbRpcKVPublicGetResult::kGetValueFieldNumber;
const int PbRpcKVPublicGetResult::kDTFieldNumber;
const int PbRpcKVPublicGetResult::kGSTFieldNumber;
const int PbRpcKVPublicGetResult::kDUTFieldNumber;
const int PbRpcKVPublicGetResult::kBlockedFieldNumber;
const int PbRpcKVPublicGetResult::kMinLSTKeyFieldNumber;
const int PbRpcKVPublicGetResult::kDVFieldNumber;
const int PbRpcKVPublicGetResult::kSrcReplicaFieldNumber;
const int PbRpcKVPublicGetResult::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicGetResult::PbRpcKVPublicGetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicGetResult)
}

void PbRpcKVPublicGetResult::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  dut_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicGetResult::PbRpcKVPublicGetResult(const PbRpcKVPublicGetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicGetResult)
}

void PbRpcKVPublicGetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = NULL;
  gst_ = NULL;
  dut_ = NULL;
  blocked_ = false;
  minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcreplica_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicGetResult::~PbRpcKVPublicGetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicGetResult)
  SharedDtor();
}

void PbRpcKVPublicGetResult::SharedDtor() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (this != default_instance_) {
    delete dt_;
    delete gst_;
    delete dut_;
  }
}

void PbRpcKVPublicGetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicGetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicGetResult_descriptor_;
}

const PbRpcKVPublicGetResult& PbRpcKVPublicGetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicGetResult* PbRpcKVPublicGetResult::default_instance_ = NULL;

PbRpcKVPublicGetResult* PbRpcKVPublicGetResult::New() const {
  return new PbRpcKVPublicGetResult;
}

void PbRpcKVPublicGetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVPublicGetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(succeeded_, blocked_);
    if (has_getvalue()) {
      if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        getvalue_->clear();
      }
    }
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_dut()) {
      if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlstkey()) {
      if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minlstkey_->clear();
      }
    }
  }
  srcreplica_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  dv_.Clear();
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicGetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicGetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        break;
      }

      // required bytes GetValue = 2;
      case 2: {
        if (tag == 18) {
         parse_GetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_getvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 3;
      case 3: {
        if (tag == 26) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GST;
        break;
      }

      // optional .PbPhysicalTimeSpec GST = 4;
      case 4: {
        if (tag == 34) {
         parse_GST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DUT;
        break;
      }

      // optional .PbPhysicalTimeSpec DUT = 5;
      case 5: {
        if (tag == 42) {
         parse_DUT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Blocked;
        break;
      }

      // optional bool Blocked = 6;
      case 6: {
        if (tag == 48) {
         parse_Blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blocked_)));
          set_has_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MinLSTKey;
        break;
      }

      // optional bytes MinLSTKey = 7;
      case 7: {
        if (tag == 58) {
         parse_MinLSTKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_minlstkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 8;
      case 8: {
        if (tag == 66) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DV;
        if (input->ExpectTag(72)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 9;
      case 9: {
        if (tag == 72) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 10;
      case 10: {
        if (tag == 82) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicGetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicGetResult)
  return false;
#undef DO_
}

void PbRpcKVPublicGetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->getvalue(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dt(), output);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gst(), output);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dut(), output);
  }

  // optional bool Blocked = 6;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->blocked(), output);
  }

  // optional bytes MinLSTKey = 7;
  if (has_minlstkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->minlstkey(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 8;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dv(i), output);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->srcreplica(), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicGetResult)
}

::google::protobuf::uint8* PbRpcKVPublicGetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->getvalue(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dt(), target);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gst(), target);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dut(), target);
  }

  // optional bool Blocked = 6;
  if (has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->blocked(), target);
  }

  // optional bytes MinLSTKey = 7;
  if (has_minlstkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->minlstkey(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 8;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dv(i), target);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->srcreplica(), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicGetResult)
  return target;
}

int PbRpcKVPublicGetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes GetValue = 2;
    if (has_getvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->getvalue());
    }

    // optional .PbPhysicalTimeSpec DT = 3;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional .PbPhysicalTimeSpec GST = 4;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // optional .PbPhysicalTimeSpec DUT = 5;
    if (has_dut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dut());
    }

    // optional bool Blocked = 6;
    if (has_blocked()) {
      total_size += 1 + 1;
    }

    // optional bytes MinLSTKey = 7;
    if (has_minlstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->minlstkey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 SrcReplica = 9;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 8;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicGetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicGetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicGetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicGetResult::MergeFrom(const PbRpcKVPublicGetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_getvalue()) {
      set_getvalue(from.getvalue());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_dut()) {
      mutable_dut()->::PbPhysicalTimeSpec::MergeFrom(from.dut());
    }
    if (from.has_blocked()) {
      set_blocked(from.blocked());
    }
    if (from.has_minlstkey()) {
      set_minlstkey(from.minlstkey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicGetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicGetResult::CopyFrom(const PbRpcKVPublicGetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicGetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_dut()) {
    if (!this->dut().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcKVPublicGetResult::Swap(PbRpcKVPublicGetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(getvalue_, other->getvalue_);
    std::swap(dt_, other->dt_);
    std::swap(gst_, other->gst_);
    std::swap(dut_, other->dut_);
    std::swap(blocked_, other->blocked_);
    std::swap(minlstkey_, other->minlstkey_);
    dv_.Swap(&other->dv_);
    std::swap(srcreplica_, other->srcreplica_);
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicGetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicGetResult_descriptor_;
  metadata.reflection = PbRpcKVPublicGetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicSetArg::kKeyFieldNumber;
const int PbRpcKVPublicSetArg::kValueFieldNumber;
const int PbRpcKVPublicSetArg::kDTFieldNumber;
const int PbRpcKVPublicSetArg::kMinLSTKeyFieldNumber;
const int PbRpcKVPublicSetArg::kDVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicSetArg::PbRpcKVPublicSetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicSetArg)
}

void PbRpcKVPublicSetArg::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicSetArg::PbRpcKVPublicSetArg(const PbRpcKVPublicSetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicSetArg)
}

void PbRpcKVPublicSetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = NULL;
  minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicSetArg::~PbRpcKVPublicSetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicSetArg)
  SharedDtor();
}

void PbRpcKVPublicSetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (this != default_instance_) {
    delete dt_;
  }
}

void PbRpcKVPublicSetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicSetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicSetArg_descriptor_;
}

const PbRpcKVPublicSetArg& PbRpcKVPublicSetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicSetArg* PbRpcKVPublicSetArg::default_instance_ = NULL;

PbRpcKVPublicSetArg* PbRpcKVPublicSetArg::New() const {
  return new PbRpcKVPublicSetArg;
}

void PbRpcKVPublicSetArg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlstkey()) {
      if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minlstkey_->clear();
      }
    }
  }
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicSetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicSetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 3;
      case 3: {
        if (tag == 26) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MinLSTKey;
        break;
      }

      // optional bytes MinLSTKey = 4;
      case 4: {
        if (tag == 34) {
         parse_MinLSTKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_minlstkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 5;
      case 5: {
        if (tag == 42) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicSetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicSetArg)
  return false;
#undef DO_
}

void PbRpcKVPublicSetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicSetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dt(), output);
  }

  // optional bytes MinLSTKey = 4;
  if (has_minlstkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->minlstkey(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicSetArg)
}

::google::protobuf::uint8* PbRpcKVPublicSetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicSetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes Value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dt(), target);
  }

  // optional bytes MinLSTKey = 4;
  if (has_minlstkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->minlstkey(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicSetArg)
  return target;
}

int PbRpcKVPublicSetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional .PbPhysicalTimeSpec DT = 3;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional bytes MinLSTKey = 4;
    if (has_minlstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->minlstkey());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 5;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicSetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicSetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicSetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicSetArg::MergeFrom(const PbRpcKVPublicSetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_minlstkey()) {
      set_minlstkey(from.minlstkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicSetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicSetArg::CopyFrom(const PbRpcKVPublicSetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicSetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcKVPublicSetArg::Swap(PbRpcKVPublicSetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(dt_, other->dt_);
    std::swap(minlstkey_, other->minlstkey_);
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicSetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicSetArg_descriptor_;
  metadata.reflection = PbRpcKVPublicSetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicSetResult::kSucceededFieldNumber;
const int PbRpcKVPublicSetResult::kDTFieldNumber;
const int PbRpcKVPublicSetResult::kSrcReplicaFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicSetResult::PbRpcKVPublicSetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicSetResult)
}

void PbRpcKVPublicSetResult::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicSetResult::PbRpcKVPublicSetResult(const PbRpcKVPublicSetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicSetResult)
}

void PbRpcKVPublicSetResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  dt_ = NULL;
  srcreplica_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicSetResult::~PbRpcKVPublicSetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicSetResult)
  SharedDtor();
}

void PbRpcKVPublicSetResult::SharedDtor() {
  if (this != default_instance_) {
    delete dt_;
  }
}

void PbRpcKVPublicSetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicSetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicSetResult_descriptor_;
}

const PbRpcKVPublicSetResult& PbRpcKVPublicSetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicSetResult* PbRpcKVPublicSetResult::default_instance_ = NULL;

PbRpcKVPublicSetResult* PbRpcKVPublicSetResult::New() const {
  return new PbRpcKVPublicSetResult;
}

void PbRpcKVPublicSetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVPublicSetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(succeeded_, srcreplica_);
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicSetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicSetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 2;
      case 2: {
        if (tag == 18) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 3;
      case 3: {
        if (tag == 24) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicSetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicSetResult)
  return false;
#undef DO_
}

void PbRpcKVPublicSetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicSetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 2;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dt(), output);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcreplica(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicSetResult)
}

::google::protobuf::uint8* PbRpcKVPublicSetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicSetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 2;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dt(), target);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcreplica(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicSetResult)
  return target;
}

int PbRpcKVPublicSetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional .PbPhysicalTimeSpec DT = 2;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional int32 SrcReplica = 3;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicSetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicSetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicSetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicSetResult::MergeFrom(const PbRpcKVPublicSetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicSetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicSetResult::CopyFrom(const PbRpcKVPublicSetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicSetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcKVPublicSetResult::Swap(PbRpcKVPublicSetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(dt_, other->dt_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicSetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicSetResult_descriptor_;
  metadata.reflection = PbRpcKVPublicSetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicTxGetArg::kKeyFieldNumber;
const int PbRpcKVPublicTxGetArg::kSTFieldNumber;
const int PbRpcKVPublicTxGetArg::kUTFieldNumber;
const int PbRpcKVPublicTxGetArg::kSVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicTxGetArg::PbRpcKVPublicTxGetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicTxGetArg)
}

void PbRpcKVPublicTxGetArg::InitAsDefaultInstance() {
  st_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  ut_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicTxGetArg::PbRpcKVPublicTxGetArg(const PbRpcKVPublicTxGetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicTxGetArg)
}

void PbRpcKVPublicTxGetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  st_ = NULL;
  ut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicTxGetArg::~PbRpcKVPublicTxGetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicTxGetArg)
  SharedDtor();
}

void PbRpcKVPublicTxGetArg::SharedDtor() {
  if (this != default_instance_) {
    delete st_;
    delete ut_;
  }
}

void PbRpcKVPublicTxGetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicTxGetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicTxGetArg_descriptor_;
}

const PbRpcKVPublicTxGetArg& PbRpcKVPublicTxGetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicTxGetArg* PbRpcKVPublicTxGetArg::default_instance_ = NULL;

PbRpcKVPublicTxGetArg* PbRpcKVPublicTxGetArg::New() const {
  return new PbRpcKVPublicTxGetArg;
}

void PbRpcKVPublicTxGetArg::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_st()) {
      if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_ut()) {
      if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
    }
  }
  key_.Clear();
  sv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicTxGetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicTxGetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Key = 1;
      case 1: {
        if (tag == 10) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Key;
        if (input->ExpectTag(18)) goto parse_ST;
        break;
      }

      // optional .PbPhysicalTimeSpec ST = 2;
      case 2: {
        if (tag == 18) {
         parse_ST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UT;
        break;
      }

      // optional .PbPhysicalTimeSpec UT = 3;
      case 3: {
        if (tag == 26) {
         parse_UT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SV;
        break;
      }

      // repeated .PbPhysicalTimeSpec SV = 4;
      case 4: {
        if (tag == 34) {
         parse_SV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicTxGetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicTxGetArg)
  return false;
#undef DO_
}

void PbRpcKVPublicTxGetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicTxGetArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(i), output);
  }

  // optional .PbPhysicalTimeSpec ST = 2;
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->st(), output);
  }

  // optional .PbPhysicalTimeSpec UT = 3;
  if (has_ut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ut(), output);
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicTxGetArg)
}

::google::protobuf::uint8* PbRpcKVPublicTxGetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicTxGetArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->key(i), target);
  }

  // optional .PbPhysicalTimeSpec ST = 2;
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->st(), target);
  }

  // optional .PbPhysicalTimeSpec UT = 3;
  if (has_ut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ut(), target);
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicTxGetArg)
  return target;
}

int PbRpcKVPublicTxGetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PbPhysicalTimeSpec ST = 2;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st());
    }

    // optional .PbPhysicalTimeSpec UT = 3;
    if (has_ut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ut());
    }

  }
  // repeated bytes Key = 1;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  total_size += 1 * this->sv_size();
  for (int i = 0; i < this->sv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicTxGetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicTxGetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicTxGetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicTxGetArg::MergeFrom(const PbRpcKVPublicTxGetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  sv_.MergeFrom(from.sv_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_st()) {
      mutable_st()->::PbPhysicalTimeSpec::MergeFrom(from.st());
    }
    if (from.has_ut()) {
      mutable_ut()->::PbPhysicalTimeSpec::MergeFrom(from.ut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicTxGetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicTxGetArg::CopyFrom(const PbRpcKVPublicTxGetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicTxGetArg::IsInitialized() const {

  if (has_st()) {
    if (!this->st().IsInitialized()) return false;
  }
  if (has_ut()) {
    if (!this->ut().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sv())) return false;
  return true;
}

void PbRpcKVPublicTxGetArg::Swap(PbRpcKVPublicTxGetArg* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(st_, other->st_);
    std::swap(ut_, other->ut_);
    sv_.Swap(&other->sv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicTxGetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicTxGetArg_descriptor_;
  metadata.reflection = PbRpcKVPublicTxGetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicTxGetResult::kSucceededFieldNumber;
const int PbRpcKVPublicTxGetResult::kGetValueFieldNumber;
const int PbRpcKVPublicTxGetResult::kSTFieldNumber;
const int PbRpcKVPublicTxGetResult::kSVFieldNumber;
const int PbRpcKVPublicTxGetResult::kUTFieldNumber;
const int PbRpcKVPublicTxGetResult::kUVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicTxGetResult::PbRpcKVPublicTxGetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicTxGetResult)
}

void PbRpcKVPublicTxGetResult::InitAsDefaultInstance() {
  st_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  ut_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicTxGetResult::PbRpcKVPublicTxGetResult(const PbRpcKVPublicTxGetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicTxGetResult)
}

void PbRpcKVPublicTxGetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  st_ = NULL;
  ut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicTxGetResult::~PbRpcKVPublicTxGetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicTxGetResult)
  SharedDtor();
}

void PbRpcKVPublicTxGetResult::SharedDtor() {
  if (this != default_instance_) {
    delete st_;
    delete ut_;
  }
}

void PbRpcKVPublicTxGetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicTxGetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicTxGetResult_descriptor_;
}

const PbRpcKVPublicTxGetResult& PbRpcKVPublicTxGetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicTxGetResult* PbRpcKVPublicTxGetResult::default_instance_ = NULL;

PbRpcKVPublicTxGetResult* PbRpcKVPublicTxGetResult::New() const {
  return new PbRpcKVPublicTxGetResult;
}

void PbRpcKVPublicTxGetResult::Clear() {
  if (_has_bits_[0 / 32] & 21) {
    succeeded_ = false;
    if (has_st()) {
      if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_ut()) {
      if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
    }
  }
  getvalue_.Clear();
  sv_.Clear();
  uv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicTxGetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicTxGetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        break;
      }

      // repeated bytes GetValue = 2;
      case 2: {
        if (tag == 18) {
         parse_GetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_getvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        if (input->ExpectTag(26)) goto parse_ST;
        break;
      }

      // optional .PbPhysicalTimeSpec ST = 3;
      case 3: {
        if (tag == 26) {
         parse_ST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SV;
        break;
      }

      // repeated .PbPhysicalTimeSpec SV = 4;
      case 4: {
        if (tag == 34) {
         parse_SV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SV;
        if (input->ExpectTag(42)) goto parse_UT;
        break;
      }

      // optional .PbPhysicalTimeSpec UT = 5;
      case 5: {
        if (tag == 42) {
         parse_UT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UV;
        break;
      }

      // repeated .PbPhysicalTimeSpec UV = 6;
      case 6: {
        if (tag == 50) {
         parse_UV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicTxGetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicTxGetResult)
  return false;
#undef DO_
}

void PbRpcKVPublicTxGetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicTxGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes GetValue = 2;
  for (int i = 0; i < this->getvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->getvalue(i), output);
  }

  // optional .PbPhysicalTimeSpec ST = 3;
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->st(), output);
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sv(i), output);
  }

  // optional .PbPhysicalTimeSpec UT = 5;
  if (has_ut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ut(), output);
  }

  // repeated .PbPhysicalTimeSpec UV = 6;
  for (int i = 0; i < this->uv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->uv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicTxGetResult)
}

::google::protobuf::uint8* PbRpcKVPublicTxGetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicTxGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes GetValue = 2;
  for (int i = 0; i < this->getvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->getvalue(i), target);
  }

  // optional .PbPhysicalTimeSpec ST = 3;
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->st(), target);
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sv(i), target);
  }

  // optional .PbPhysicalTimeSpec UT = 5;
  if (has_ut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ut(), target);
  }

  // repeated .PbPhysicalTimeSpec UV = 6;
  for (int i = 0; i < this->uv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->uv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicTxGetResult)
  return target;
}

int PbRpcKVPublicTxGetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional .PbPhysicalTimeSpec ST = 3;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st());
    }

    // optional .PbPhysicalTimeSpec UT = 5;
    if (has_ut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ut());
    }

  }
  // repeated bytes GetValue = 2;
  total_size += 1 * this->getvalue_size();
  for (int i = 0; i < this->getvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->getvalue(i));
  }

  // repeated .PbPhysicalTimeSpec SV = 4;
  total_size += 1 * this->sv_size();
  for (int i = 0; i < this->sv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv(i));
  }

  // repeated .PbPhysicalTimeSpec UV = 6;
  total_size += 1 * this->uv_size();
  for (int i = 0; i < this->uv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicTxGetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicTxGetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicTxGetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicTxGetResult::MergeFrom(const PbRpcKVPublicTxGetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  getvalue_.MergeFrom(from.getvalue_);
  sv_.MergeFrom(from.sv_);
  uv_.MergeFrom(from.uv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_st()) {
      mutable_st()->::PbPhysicalTimeSpec::MergeFrom(from.st());
    }
    if (from.has_ut()) {
      mutable_ut()->::PbPhysicalTimeSpec::MergeFrom(from.ut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicTxGetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicTxGetResult::CopyFrom(const PbRpcKVPublicTxGetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicTxGetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_st()) {
    if (!this->st().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sv())) return false;
  if (has_ut()) {
    if (!this->ut().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->uv())) return false;
  return true;
}

void PbRpcKVPublicTxGetResult::Swap(PbRpcKVPublicTxGetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    getvalue_.Swap(&other->getvalue_);
    std::swap(st_, other->st_);
    sv_.Swap(&other->sv_);
    std::swap(ut_, other->ut_);
    uv_.Swap(&other->uv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicTxGetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicTxGetResult_descriptor_;
  metadata.reflection = PbRpcKVPublicTxGetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicShowArg::kKeyFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicShowArg::PbRpcKVPublicShowArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicShowArg)
}

void PbRpcKVPublicShowArg::InitAsDefaultInstance() {
}

PbRpcKVPublicShowArg::PbRpcKVPublicShowArg(const PbRpcKVPublicShowArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicShowArg)
}

void PbRpcKVPublicShowArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicShowArg::~PbRpcKVPublicShowArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicShowArg)
  SharedDtor();
}

void PbRpcKVPublicShowArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcKVPublicShowArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicShowArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicShowArg_descriptor_;
}

const PbRpcKVPublicShowArg& PbRpcKVPublicShowArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicShowArg* PbRpcKVPublicShowArg::default_instance_ = NULL;

PbRpcKVPublicShowArg* PbRpcKVPublicShowArg::New() const {
  return new PbRpcKVPublicShowArg;
}

void PbRpcKVPublicShowArg::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicShowArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicShowArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicShowArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicShowArg)
  return false;
#undef DO_
}

void PbRpcKVPublicShowArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicShowArg)
  // optional bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicShowArg)
}

::google::protobuf::uint8* PbRpcKVPublicShowArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicShowArg)
  // optional bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicShowArg)
  return target;
}

int PbRpcKVPublicShowArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicShowArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicShowArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicShowArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicShowArg::MergeFrom(const PbRpcKVPublicShowArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicShowArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicShowArg::CopyFrom(const PbRpcKVPublicShowArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicShowArg::IsInitialized() const {

  return true;
}

void PbRpcKVPublicShowArg::Swap(PbRpcKVPublicShowArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicShowArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicShowArg_descriptor_;
  metadata.reflection = PbRpcKVPublicShowArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicShowResult::kSucceededFieldNumber;
const int PbRpcKVPublicShowResult::kReturnStringFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicShowResult::PbRpcKVPublicShowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicShowResult)
}

void PbRpcKVPublicShowResult::InitAsDefaultInstance() {
}

PbRpcKVPublicShowResult::PbRpcKVPublicShowResult(const PbRpcKVPublicShowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicShowResult)
}

void PbRpcKVPublicShowResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  returnstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicShowResult::~PbRpcKVPublicShowResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicShowResult)
  SharedDtor();
}

void PbRpcKVPublicShowResult::SharedDtor() {
  if (returnstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete returnstring_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcKVPublicShowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicShowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicShowResult_descriptor_;
}

const PbRpcKVPublicShowResult& PbRpcKVPublicShowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicShowResult* PbRpcKVPublicShowResult::default_instance_ = NULL;

PbRpcKVPublicShowResult* PbRpcKVPublicShowResult::New() const {
  return new PbRpcKVPublicShowResult;
}

void PbRpcKVPublicShowResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    if (has_returnstring()) {
      if (returnstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        returnstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicShowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicShowResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReturnString;
        break;
      }

      // required bytes ReturnString = 2;
      case 2: {
        if (tag == 18) {
         parse_ReturnString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_returnstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicShowResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicShowResult)
  return false;
#undef DO_
}

void PbRpcKVPublicShowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicShowResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes ReturnString = 2;
  if (has_returnstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->returnstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicShowResult)
}

::google::protobuf::uint8* PbRpcKVPublicShowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicShowResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes ReturnString = 2;
  if (has_returnstring()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->returnstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicShowResult)
  return target;
}

int PbRpcKVPublicShowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes ReturnString = 2;
    if (has_returnstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->returnstring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicShowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicShowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicShowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicShowResult::MergeFrom(const PbRpcKVPublicShowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_returnstring()) {
      set_returnstring(from.returnstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicShowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicShowResult::CopyFrom(const PbRpcKVPublicShowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicShowResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbRpcKVPublicShowResult::Swap(PbRpcKVPublicShowResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(returnstring_, other->returnstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicShowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicShowResult_descriptor_;
  metadata.reflection = PbRpcKVPublicShowResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalGetArg::kKeyFieldNumber;
const int PbRpcKVInternalGetArg::kGSTFieldNumber;
const int PbRpcKVInternalGetArg::kMinLSTFieldNumber;
const int PbRpcKVInternalGetArg::kNDVFieldNumber;
const int PbRpcKVInternalGetArg::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalGetArg::PbRpcKVInternalGetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalGetArg)
}

void PbRpcKVInternalGetArg::InitAsDefaultInstance() {
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  minlst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalGetArg::PbRpcKVInternalGetArg(const PbRpcKVInternalGetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalGetArg)
}

void PbRpcKVInternalGetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gst_ = NULL;
  minlst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalGetArg::~PbRpcKVInternalGetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalGetArg)
  SharedDtor();
}

void PbRpcKVInternalGetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete gst_;
    delete minlst_;
  }
}

void PbRpcKVInternalGetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalGetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalGetArg_descriptor_;
}

const PbRpcKVInternalGetArg& PbRpcKVInternalGetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalGetArg* PbRpcKVInternalGetArg::default_instance_ = NULL;

PbRpcKVInternalGetArg* PbRpcKVInternalGetArg::New() const {
  return new PbRpcKVInternalGetArg;
}

void PbRpcKVInternalGetArg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlst()) {
      if (minlst_ != NULL) minlst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ndv_.Clear();
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalGetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalGetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GST;
        break;
      }

      // optional .PbPhysicalTimeSpec GST = 2;
      case 2: {
        if (tag == 18) {
         parse_GST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_minLST;
        break;
      }

      // optional .PbPhysicalTimeSpec minLST = 3;
      case 3: {
        if (tag == 26) {
         parse_minLST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minlst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NDV;
        break;
      }

      // repeated .PbPhysicalTimeSpec NDV = 4;
      case 4: {
        if (tag == 34) {
         parse_NDV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ndv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NDV;
        if (input->ExpectTag(42)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 5;
      case 5: {
        if (tag == 42) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalGetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalGetArg)
  return false;
#undef DO_
}

void PbRpcKVInternalGetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .PbPhysicalTimeSpec GST = 2;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gst(), output);
  }

  // optional .PbPhysicalTimeSpec minLST = 3;
  if (has_minlst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->minlst(), output);
  }

  // repeated .PbPhysicalTimeSpec NDV = 4;
  for (int i = 0; i < this->ndv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ndv(i), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalGetArg)
}

::google::protobuf::uint8* PbRpcKVInternalGetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .PbPhysicalTimeSpec GST = 2;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gst(), target);
  }

  // optional .PbPhysicalTimeSpec minLST = 3;
  if (has_minlst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->minlst(), target);
  }

  // repeated .PbPhysicalTimeSpec NDV = 4;
  for (int i = 0; i < this->ndv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ndv(i), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalGetArg)
  return target;
}

int PbRpcKVInternalGetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .PbPhysicalTimeSpec GST = 2;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // optional .PbPhysicalTimeSpec minLST = 3;
    if (has_minlst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minlst());
    }

  }
  // repeated .PbPhysicalTimeSpec NDV = 4;
  total_size += 1 * this->ndv_size();
  for (int i = 0; i < this->ndv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ndv(i));
  }

  // repeated .PbPhysicalTimeSpec GSV = 5;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalGetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalGetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalGetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalGetArg::MergeFrom(const PbRpcKVInternalGetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ndv_.MergeFrom(from.ndv_);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_minlst()) {
      mutable_minlst()->::PbPhysicalTimeSpec::MergeFrom(from.minlst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalGetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalGetArg::CopyFrom(const PbRpcKVInternalGetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalGetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_minlst()) {
    if (!this->minlst().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ndv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcKVInternalGetArg::Swap(PbRpcKVInternalGetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(gst_, other->gst_);
    std::swap(minlst_, other->minlst_);
    ndv_.Swap(&other->ndv_);
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalGetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalGetArg_descriptor_;
  metadata.reflection = PbRpcKVInternalGetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalGetResult::kSucceededFieldNumber;
const int PbRpcKVInternalGetResult::kGetValueFieldNumber;
const int PbRpcKVInternalGetResult::kDTFieldNumber;
const int PbRpcKVInternalGetResult::kGSTFieldNumber;
const int PbRpcKVInternalGetResult::kDUTFieldNumber;
const int PbRpcKVInternalGetResult::kMinLSTKeyFieldNumber;
const int PbRpcKVInternalGetResult::kBlockedFieldNumber;
const int PbRpcKVInternalGetResult::kDVFieldNumber;
const int PbRpcKVInternalGetResult::kSrcReplicaFieldNumber;
const int PbRpcKVInternalGetResult::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalGetResult::PbRpcKVInternalGetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalGetResult)
}

void PbRpcKVInternalGetResult::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  dut_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalGetResult::PbRpcKVInternalGetResult(const PbRpcKVInternalGetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalGetResult)
}

void PbRpcKVInternalGetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = NULL;
  gst_ = NULL;
  dut_ = NULL;
  minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocked_ = false;
  srcreplica_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalGetResult::~PbRpcKVInternalGetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalGetResult)
  SharedDtor();
}

void PbRpcKVInternalGetResult::SharedDtor() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (this != default_instance_) {
    delete dt_;
    delete gst_;
    delete dut_;
  }
}

void PbRpcKVInternalGetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalGetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalGetResult_descriptor_;
}

const PbRpcKVInternalGetResult& PbRpcKVInternalGetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalGetResult* PbRpcKVInternalGetResult::default_instance_ = NULL;

PbRpcKVInternalGetResult* PbRpcKVInternalGetResult::New() const {
  return new PbRpcKVInternalGetResult;
}

void PbRpcKVInternalGetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVInternalGetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(succeeded_, blocked_);
    if (has_getvalue()) {
      if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        getvalue_->clear();
      }
    }
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_dut()) {
      if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlstkey()) {
      if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minlstkey_->clear();
      }
    }
  }
  srcreplica_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  dv_.Clear();
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalGetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalGetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        break;
      }

      // required bytes GetValue = 2;
      case 2: {
        if (tag == 18) {
         parse_GetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_getvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 3;
      case 3: {
        if (tag == 26) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GST;
        break;
      }

      // optional .PbPhysicalTimeSpec GST = 4;
      case 4: {
        if (tag == 34) {
         parse_GST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DUT;
        break;
      }

      // optional .PbPhysicalTimeSpec DUT = 5;
      case 5: {
        if (tag == 42) {
         parse_DUT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MinLSTKey;
        break;
      }

      // optional bytes MinLSTKey = 6;
      case 6: {
        if (tag == 50) {
         parse_MinLSTKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_minlstkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Blocked;
        break;
      }

      // optional bool Blocked = 7;
      case 7: {
        if (tag == 56) {
         parse_Blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blocked_)));
          set_has_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 8;
      case 8: {
        if (tag == 66) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DV;
        if (input->ExpectTag(72)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 9;
      case 9: {
        if (tag == 72) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 10;
      case 10: {
        if (tag == 82) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalGetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalGetResult)
  return false;
#undef DO_
}

void PbRpcKVInternalGetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->getvalue(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dt(), output);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gst(), output);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dut(), output);
  }

  // optional bytes MinLSTKey = 6;
  if (has_minlstkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->minlstkey(), output);
  }

  // optional bool Blocked = 7;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->blocked(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 8;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dv(i), output);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->srcreplica(), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalGetResult)
}

::google::protobuf::uint8* PbRpcKVInternalGetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->getvalue(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dt(), target);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gst(), target);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dut(), target);
  }

  // optional bytes MinLSTKey = 6;
  if (has_minlstkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->minlstkey(), target);
  }

  // optional bool Blocked = 7;
  if (has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->blocked(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 8;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dv(i), target);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->srcreplica(), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalGetResult)
  return target;
}

int PbRpcKVInternalGetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes GetValue = 2;
    if (has_getvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->getvalue());
    }

    // optional .PbPhysicalTimeSpec DT = 3;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional .PbPhysicalTimeSpec GST = 4;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // optional .PbPhysicalTimeSpec DUT = 5;
    if (has_dut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dut());
    }

    // optional bytes MinLSTKey = 6;
    if (has_minlstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->minlstkey());
    }

    // optional bool Blocked = 7;
    if (has_blocked()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 SrcReplica = 9;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 8;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  // repeated .PbPhysicalTimeSpec GSV = 10;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalGetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalGetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalGetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalGetResult::MergeFrom(const PbRpcKVInternalGetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_getvalue()) {
      set_getvalue(from.getvalue());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_dut()) {
      mutable_dut()->::PbPhysicalTimeSpec::MergeFrom(from.dut());
    }
    if (from.has_minlstkey()) {
      set_minlstkey(from.minlstkey());
    }
    if (from.has_blocked()) {
      set_blocked(from.blocked());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalGetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalGetResult::CopyFrom(const PbRpcKVInternalGetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalGetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_dut()) {
    if (!this->dut().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcKVInternalGetResult::Swap(PbRpcKVInternalGetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(getvalue_, other->getvalue_);
    std::swap(dt_, other->dt_);
    std::swap(gst_, other->gst_);
    std::swap(dut_, other->dut_);
    std::swap(minlstkey_, other->minlstkey_);
    std::swap(blocked_, other->blocked_);
    dv_.Swap(&other->dv_);
    std::swap(srcreplica_, other->srcreplica_);
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalGetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalGetResult_descriptor_;
  metadata.reflection = PbRpcKVInternalGetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalSetArg::kKeyFieldNumber;
const int PbRpcKVInternalSetArg::kValueFieldNumber;
const int PbRpcKVInternalSetArg::kDTFieldNumber;
const int PbRpcKVInternalSetArg::kMinLSTKeyFieldNumber;
const int PbRpcKVInternalSetArg::kDVFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalSetArg::PbRpcKVInternalSetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalSetArg)
}

void PbRpcKVInternalSetArg::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalSetArg::PbRpcKVInternalSetArg(const PbRpcKVInternalSetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalSetArg)
}

void PbRpcKVInternalSetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = NULL;
  minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalSetArg::~PbRpcKVInternalSetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalSetArg)
  SharedDtor();
}

void PbRpcKVInternalSetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (this != default_instance_) {
    delete dt_;
  }
}

void PbRpcKVInternalSetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalSetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalSetArg_descriptor_;
}

const PbRpcKVInternalSetArg& PbRpcKVInternalSetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalSetArg* PbRpcKVInternalSetArg::default_instance_ = NULL;

PbRpcKVInternalSetArg* PbRpcKVInternalSetArg::New() const {
  return new PbRpcKVInternalSetArg;
}

void PbRpcKVInternalSetArg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_minlstkey()) {
      if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minlstkey_->clear();
      }
    }
  }
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalSetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalSetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 3;
      case 3: {
        if (tag == 26) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MinLSTKey;
        break;
      }

      // optional bytes MinLSTKey = 4;
      case 4: {
        if (tag == 34) {
         parse_MinLSTKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_minlstkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 5;
      case 5: {
        if (tag == 42) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalSetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalSetArg)
  return false;
#undef DO_
}

void PbRpcKVInternalSetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalSetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dt(), output);
  }

  // optional bytes MinLSTKey = 4;
  if (has_minlstkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->minlstkey(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalSetArg)
}

::google::protobuf::uint8* PbRpcKVInternalSetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalSetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes Value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dt(), target);
  }

  // optional bytes MinLSTKey = 4;
  if (has_minlstkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->minlstkey(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 5;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalSetArg)
  return target;
}

int PbRpcKVInternalSetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional .PbPhysicalTimeSpec DT = 3;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional bytes MinLSTKey = 4;
    if (has_minlstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->minlstkey());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 5;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalSetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalSetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalSetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalSetArg::MergeFrom(const PbRpcKVInternalSetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_minlstkey()) {
      set_minlstkey(from.minlstkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalSetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalSetArg::CopyFrom(const PbRpcKVInternalSetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalSetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcKVInternalSetArg::Swap(PbRpcKVInternalSetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(dt_, other->dt_);
    std::swap(minlstkey_, other->minlstkey_);
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalSetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalSetArg_descriptor_;
  metadata.reflection = PbRpcKVInternalSetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalSetResult::kSucceededFieldNumber;
const int PbRpcKVInternalSetResult::kDTFieldNumber;
const int PbRpcKVInternalSetResult::kSrcReplicaFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalSetResult::PbRpcKVInternalSetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalSetResult)
}

void PbRpcKVInternalSetResult::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalSetResult::PbRpcKVInternalSetResult(const PbRpcKVInternalSetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalSetResult)
}

void PbRpcKVInternalSetResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  dt_ = NULL;
  srcreplica_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalSetResult::~PbRpcKVInternalSetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalSetResult)
  SharedDtor();
}

void PbRpcKVInternalSetResult::SharedDtor() {
  if (this != default_instance_) {
    delete dt_;
  }
}

void PbRpcKVInternalSetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalSetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalSetResult_descriptor_;
}

const PbRpcKVInternalSetResult& PbRpcKVInternalSetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalSetResult* PbRpcKVInternalSetResult::default_instance_ = NULL;

PbRpcKVInternalSetResult* PbRpcKVInternalSetResult::New() const {
  return new PbRpcKVInternalSetResult;
}

void PbRpcKVInternalSetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVInternalSetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(succeeded_, srcreplica_);
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalSetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalSetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 2;
      case 2: {
        if (tag == 18) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 3;
      case 3: {
        if (tag == 24) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalSetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalSetResult)
  return false;
#undef DO_
}

void PbRpcKVInternalSetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalSetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 2;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dt(), output);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcreplica(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalSetResult)
}

::google::protobuf::uint8* PbRpcKVInternalSetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalSetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 2;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dt(), target);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcreplica(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalSetResult)
  return target;
}

int PbRpcKVInternalSetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional .PbPhysicalTimeSpec DT = 2;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional int32 SrcReplica = 3;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalSetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalSetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalSetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalSetResult::MergeFrom(const PbRpcKVInternalSetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalSetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalSetResult::CopyFrom(const PbRpcKVInternalSetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalSetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcKVInternalSetResult::Swap(PbRpcKVInternalSetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(dt_, other->dt_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalSetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalSetResult_descriptor_;
  metadata.reflection = PbRpcKVInternalSetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalTxSliceGetArg::kKeyFieldNumber;
const int PbRpcKVInternalTxSliceGetArg::kSTFieldNumber;
const int PbRpcKVInternalTxSliceGetArg::kSVFieldNumber;
const int PbRpcKVInternalTxSliceGetArg::kIdFieldNumber;
const int PbRpcKVInternalTxSliceGetArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalTxSliceGetArg::PbRpcKVInternalTxSliceGetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalTxSliceGetArg)
}

void PbRpcKVInternalTxSliceGetArg::InitAsDefaultInstance() {
  st_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalTxSliceGetArg::PbRpcKVInternalTxSliceGetArg(const PbRpcKVInternalTxSliceGetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalTxSliceGetArg)
}

void PbRpcKVInternalTxSliceGetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalTxSliceGetArg::~PbRpcKVInternalTxSliceGetArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalTxSliceGetArg)
  SharedDtor();
}

void PbRpcKVInternalTxSliceGetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete st_;
  }
}

void PbRpcKVInternalTxSliceGetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalTxSliceGetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalTxSliceGetArg_descriptor_;
}

const PbRpcKVInternalTxSliceGetArg& PbRpcKVInternalTxSliceGetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalTxSliceGetArg* PbRpcKVInternalTxSliceGetArg::default_instance_ = NULL;

PbRpcKVInternalTxSliceGetArg* PbRpcKVInternalTxSliceGetArg::New() const {
  return new PbRpcKVInternalTxSliceGetArg;
}

void PbRpcKVInternalTxSliceGetArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVInternalTxSliceGetArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(id_, src_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_st()) {
      if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalTxSliceGetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalTxSliceGetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ST;
        break;
      }

      // optional .PbPhysicalTimeSpec ST = 2;
      case 2: {
        if (tag == 18) {
         parse_ST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SV;
        break;
      }

      // repeated .PbPhysicalTimeSpec SV = 3;
      case 3: {
        if (tag == 26) {
         parse_SV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SV;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_src;
        break;
      }

      // optional int64 src = 5;
      case 5: {
        if (tag == 40) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalTxSliceGetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalTxSliceGetArg)
  return false;
#undef DO_
}

void PbRpcKVInternalTxSliceGetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalTxSliceGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .PbPhysicalTimeSpec ST = 2;
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->st(), output);
  }

  // repeated .PbPhysicalTimeSpec SV = 3;
  for (int i = 0; i < this->sv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sv(i), output);
  }

  // optional int64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // optional int64 src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalTxSliceGetArg)
}

::google::protobuf::uint8* PbRpcKVInternalTxSliceGetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalTxSliceGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .PbPhysicalTimeSpec ST = 2;
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->st(), target);
  }

  // repeated .PbPhysicalTimeSpec SV = 3;
  for (int i = 0; i < this->sv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sv(i), target);
  }

  // optional int64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // optional int64 src = 5;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalTxSliceGetArg)
  return target;
}

int PbRpcKVInternalTxSliceGetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .PbPhysicalTimeSpec ST = 2;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st());
    }

    // optional int64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated .PbPhysicalTimeSpec SV = 3;
  total_size += 1 * this->sv_size();
  for (int i = 0; i < this->sv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalTxSliceGetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalTxSliceGetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalTxSliceGetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalTxSliceGetArg::MergeFrom(const PbRpcKVInternalTxSliceGetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  sv_.MergeFrom(from.sv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_st()) {
      mutable_st()->::PbPhysicalTimeSpec::MergeFrom(from.st());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalTxSliceGetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalTxSliceGetArg::CopyFrom(const PbRpcKVInternalTxSliceGetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalTxSliceGetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_st()) {
    if (!this->st().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sv())) return false;
  return true;
}

void PbRpcKVInternalTxSliceGetArg::Swap(PbRpcKVInternalTxSliceGetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(st_, other->st_);
    sv_.Swap(&other->sv_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalTxSliceGetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalTxSliceGetArg_descriptor_;
  metadata.reflection = PbRpcKVInternalTxSliceGetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalTxSliceGetResult::kSucceededFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kGetValueFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kDTFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kGSTFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kDUTFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kDVFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kNDVFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kGSVFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kSrcReplicaFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kWaitedXactFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kIdFieldNumber;
const int PbRpcKVInternalTxSliceGetResult::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalTxSliceGetResult::PbRpcKVInternalTxSliceGetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalTxSliceGetResult)
}

void PbRpcKVInternalTxSliceGetResult::InitAsDefaultInstance() {
  dt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  dut_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalTxSliceGetResult::PbRpcKVInternalTxSliceGetResult(const PbRpcKVInternalTxSliceGetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalTxSliceGetResult)
}

void PbRpcKVInternalTxSliceGetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = NULL;
  gst_ = NULL;
  dut_ = NULL;
  srcreplica_ = 0;
  waitedxact_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalTxSliceGetResult::~PbRpcKVInternalTxSliceGetResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalTxSliceGetResult)
  SharedDtor();
}

void PbRpcKVInternalTxSliceGetResult::SharedDtor() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (this != default_instance_) {
    delete dt_;
    delete gst_;
    delete dut_;
  }
}

void PbRpcKVInternalTxSliceGetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalTxSliceGetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalTxSliceGetResult_descriptor_;
}

const PbRpcKVInternalTxSliceGetResult& PbRpcKVInternalTxSliceGetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalTxSliceGetResult* PbRpcKVInternalTxSliceGetResult::default_instance_ = NULL;

PbRpcKVInternalTxSliceGetResult* PbRpcKVInternalTxSliceGetResult::New() const {
  return new PbRpcKVInternalTxSliceGetResult;
}

void PbRpcKVInternalTxSliceGetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVInternalTxSliceGetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    succeeded_ = false;
    if (has_getvalue()) {
      if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        getvalue_->clear();
      }
    }
    if (has_dt()) {
      if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_dut()) {
      if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(waitedxact_, src_);
    srcreplica_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dv_.Clear();
  ndv_.Clear();
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalTxSliceGetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalTxSliceGetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        break;
      }

      // required bytes GetValue = 2;
      case 2: {
        if (tag == 18) {
         parse_GetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_getvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DT;
        break;
      }

      // optional .PbPhysicalTimeSpec DT = 3;
      case 3: {
        if (tag == 26) {
         parse_DT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GST;
        break;
      }

      // optional .PbPhysicalTimeSpec GST = 4;
      case 4: {
        if (tag == 34) {
         parse_GST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DUT;
        break;
      }

      // optional .PbPhysicalTimeSpec DUT = 5;
      case 5: {
        if (tag == 42) {
         parse_DUT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 6;
      case 6: {
        if (tag == 50) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DV;
        if (input->ExpectTag(58)) goto parse_NDV;
        break;
      }

      // repeated .PbPhysicalTimeSpec NDV = 7;
      case 7: {
        if (tag == 58) {
         parse_NDV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ndv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_NDV;
        if (input->ExpectTag(66)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 8;
      case 8: {
        if (tag == 66) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GSV;
        if (input->ExpectTag(72)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 9;
      case 9: {
        if (tag == 72) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_waitedXact;
        break;
      }

      // optional double waitedXact = 10;
      case 10: {
        if (tag == 81) {
         parse_waitedXact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitedxact_)));
          set_has_waitedxact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_id;
        break;
      }

      // optional int64 id = 11;
      case 11: {
        if (tag == 88) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_src;
        break;
      }

      // optional int64 src = 12;
      case 12: {
        if (tag == 96) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalTxSliceGetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalTxSliceGetResult)
  return false;
#undef DO_
}

void PbRpcKVInternalTxSliceGetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalTxSliceGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->getvalue(), output);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dt(), output);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gst(), output);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dut(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 6;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dv(i), output);
  }

  // repeated .PbPhysicalTimeSpec NDV = 7;
  for (int i = 0; i < this->ndv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ndv(i), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 8;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gsv(i), output);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->srcreplica(), output);
  }

  // optional double waitedXact = 10;
  if (has_waitedxact()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->waitedxact(), output);
  }

  // optional int64 id = 11;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->id(), output);
  }

  // optional int64 src = 12;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalTxSliceGetResult)
}

::google::protobuf::uint8* PbRpcKVInternalTxSliceGetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalTxSliceGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->getvalue(), target);
  }

  // optional .PbPhysicalTimeSpec DT = 3;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dt(), target);
  }

  // optional .PbPhysicalTimeSpec GST = 4;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gst(), target);
  }

  // optional .PbPhysicalTimeSpec DUT = 5;
  if (has_dut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dut(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 6;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dv(i), target);
  }

  // repeated .PbPhysicalTimeSpec NDV = 7;
  for (int i = 0; i < this->ndv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ndv(i), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 8;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gsv(i), target);
  }

  // optional int32 SrcReplica = 9;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->srcreplica(), target);
  }

  // optional double waitedXact = 10;
  if (has_waitedxact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->waitedxact(), target);
  }

  // optional int64 id = 11;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->id(), target);
  }

  // optional int64 src = 12;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalTxSliceGetResult)
  return target;
}

int PbRpcKVInternalTxSliceGetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes GetValue = 2;
    if (has_getvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->getvalue());
    }

    // optional .PbPhysicalTimeSpec DT = 3;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional .PbPhysicalTimeSpec GST = 4;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // optional .PbPhysicalTimeSpec DUT = 5;
    if (has_dut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dut());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 SrcReplica = 9;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

    // optional double waitedXact = 10;
    if (has_waitedxact()) {
      total_size += 1 + 8;
    }

    // optional int64 id = 11;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 12;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 6;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  // repeated .PbPhysicalTimeSpec NDV = 7;
  total_size += 1 * this->ndv_size();
  for (int i = 0; i < this->ndv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ndv(i));
  }

  // repeated .PbPhysicalTimeSpec GSV = 8;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalTxSliceGetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalTxSliceGetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalTxSliceGetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalTxSliceGetResult::MergeFrom(const PbRpcKVInternalTxSliceGetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  ndv_.MergeFrom(from.ndv_);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_getvalue()) {
      set_getvalue(from.getvalue());
    }
    if (from.has_dt()) {
      mutable_dt()->::PbPhysicalTimeSpec::MergeFrom(from.dt());
    }
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_dut()) {
      mutable_dut()->::PbPhysicalTimeSpec::MergeFrom(from.dut());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
    if (from.has_waitedxact()) {
      set_waitedxact(from.waitedxact());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalTxSliceGetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalTxSliceGetResult::CopyFrom(const PbRpcKVInternalTxSliceGetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalTxSliceGetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_dut()) {
    if (!this->dut().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ndv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcKVInternalTxSliceGetResult::Swap(PbRpcKVInternalTxSliceGetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(getvalue_, other->getvalue_);
    std::swap(dt_, other->dt_);
    std::swap(gst_, other->gst_);
    std::swap(dut_, other->dut_);
    dv_.Swap(&other->dv_);
    ndv_.Swap(&other->ndv_);
    gsv_.Swap(&other->gsv_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(waitedxact_, other->waitedxact_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalTxSliceGetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalTxSliceGetResult_descriptor_;
  metadata.reflection = PbRpcKVInternalTxSliceGetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalShowItemArg::kKeyFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalShowItemArg::PbRpcKVInternalShowItemArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalShowItemArg)
}

void PbRpcKVInternalShowItemArg::InitAsDefaultInstance() {
}

PbRpcKVInternalShowItemArg::PbRpcKVInternalShowItemArg(const PbRpcKVInternalShowItemArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalShowItemArg)
}

void PbRpcKVInternalShowItemArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalShowItemArg::~PbRpcKVInternalShowItemArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalShowItemArg)
  SharedDtor();
}

void PbRpcKVInternalShowItemArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcKVInternalShowItemArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalShowItemArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalShowItemArg_descriptor_;
}

const PbRpcKVInternalShowItemArg& PbRpcKVInternalShowItemArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalShowItemArg* PbRpcKVInternalShowItemArg::default_instance_ = NULL;

PbRpcKVInternalShowItemArg* PbRpcKVInternalShowItemArg::New() const {
  return new PbRpcKVInternalShowItemArg;
}

void PbRpcKVInternalShowItemArg::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalShowItemArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalShowItemArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalShowItemArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalShowItemArg)
  return false;
#undef DO_
}

void PbRpcKVInternalShowItemArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalShowItemArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalShowItemArg)
}

::google::protobuf::uint8* PbRpcKVInternalShowItemArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalShowItemArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalShowItemArg)
  return target;
}

int PbRpcKVInternalShowItemArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalShowItemArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalShowItemArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalShowItemArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalShowItemArg::MergeFrom(const PbRpcKVInternalShowItemArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalShowItemArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalShowItemArg::CopyFrom(const PbRpcKVInternalShowItemArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalShowItemArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcKVInternalShowItemArg::Swap(PbRpcKVInternalShowItemArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalShowItemArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalShowItemArg_descriptor_;
  metadata.reflection = PbRpcKVInternalShowItemArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalShowItemResult::kSucceededFieldNumber;
const int PbRpcKVInternalShowItemResult::kItemVersionsFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalShowItemResult::PbRpcKVInternalShowItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalShowItemResult)
}

void PbRpcKVInternalShowItemResult::InitAsDefaultInstance() {
}

PbRpcKVInternalShowItemResult::PbRpcKVInternalShowItemResult(const PbRpcKVInternalShowItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalShowItemResult)
}

void PbRpcKVInternalShowItemResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  itemversions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalShowItemResult::~PbRpcKVInternalShowItemResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalShowItemResult)
  SharedDtor();
}

void PbRpcKVInternalShowItemResult::SharedDtor() {
  if (itemversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemversions_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcKVInternalShowItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalShowItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalShowItemResult_descriptor_;
}

const PbRpcKVInternalShowItemResult& PbRpcKVInternalShowItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalShowItemResult* PbRpcKVInternalShowItemResult::default_instance_ = NULL;

PbRpcKVInternalShowItemResult* PbRpcKVInternalShowItemResult::New() const {
  return new PbRpcKVInternalShowItemResult;
}

void PbRpcKVInternalShowItemResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    if (has_itemversions()) {
      if (itemversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemversions_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalShowItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalShowItemResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemVersions;
        break;
      }

      // required bytes ItemVersions = 2;
      case 2: {
        if (tag == 18) {
         parse_ItemVersions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemversions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalShowItemResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalShowItemResult)
  return false;
#undef DO_
}

void PbRpcKVInternalShowItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalShowItemResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes ItemVersions = 2;
  if (has_itemversions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->itemversions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalShowItemResult)
}

::google::protobuf::uint8* PbRpcKVInternalShowItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalShowItemResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes ItemVersions = 2;
  if (has_itemversions()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->itemversions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalShowItemResult)
  return target;
}

int PbRpcKVInternalShowItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes ItemVersions = 2;
    if (has_itemversions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemversions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalShowItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalShowItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalShowItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalShowItemResult::MergeFrom(const PbRpcKVInternalShowItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_itemversions()) {
      set_itemversions(from.itemversions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalShowItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalShowItemResult::CopyFrom(const PbRpcKVInternalShowItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalShowItemResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbRpcKVInternalShowItemResult::Swap(PbRpcKVInternalShowItemResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(itemversions_, other->itemversions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalShowItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalShowItemResult_descriptor_;
  metadata.reflection = PbRpcKVInternalShowItemResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbUpdatedItemVersion::kLUTFieldNumber;
const int PbUpdatedItemVersion::kSrcReplicaFieldNumber;
#endif  // !_MSC_VER

PbUpdatedItemVersion::PbUpdatedItemVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbUpdatedItemVersion)
}

void PbUpdatedItemVersion::InitAsDefaultInstance() {
}

PbUpdatedItemVersion::PbUpdatedItemVersion(const PbUpdatedItemVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbUpdatedItemVersion)
}

void PbUpdatedItemVersion::SharedCtor() {
  _cached_size_ = 0;
  lut_ = GOOGLE_LONGLONG(0);
  srcreplica_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbUpdatedItemVersion::~PbUpdatedItemVersion() {
  // @@protoc_insertion_point(destructor:PbUpdatedItemVersion)
  SharedDtor();
}

void PbUpdatedItemVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbUpdatedItemVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbUpdatedItemVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbUpdatedItemVersion_descriptor_;
}

const PbUpdatedItemVersion& PbUpdatedItemVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbUpdatedItemVersion* PbUpdatedItemVersion::default_instance_ = NULL;

PbUpdatedItemVersion* PbUpdatedItemVersion::New() const {
  return new PbUpdatedItemVersion;
}

void PbUpdatedItemVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbUpdatedItemVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lut_, srcreplica_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbUpdatedItemVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbUpdatedItemVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 LUT = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lut_)));
          set_has_lut();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SrcReplica;
        break;
      }

      // required int32 SrcReplica = 2;
      case 2: {
        if (tag == 16) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbUpdatedItemVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbUpdatedItemVersion)
  return false;
#undef DO_
}

void PbUpdatedItemVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbUpdatedItemVersion)
  // required int64 LUT = 1;
  if (has_lut()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lut(), output);
  }

  // required int32 SrcReplica = 2;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srcreplica(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbUpdatedItemVersion)
}

::google::protobuf::uint8* PbUpdatedItemVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbUpdatedItemVersion)
  // required int64 LUT = 1;
  if (has_lut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lut(), target);
  }

  // required int32 SrcReplica = 2;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srcreplica(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbUpdatedItemVersion)
  return target;
}

int PbUpdatedItemVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 LUT = 1;
    if (has_lut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lut());
    }

    // required int32 SrcReplica = 2;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbUpdatedItemVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbUpdatedItemVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbUpdatedItemVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbUpdatedItemVersion::MergeFrom(const PbUpdatedItemVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lut()) {
      set_lut(from.lut());
    }
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbUpdatedItemVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbUpdatedItemVersion::CopyFrom(const PbUpdatedItemVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbUpdatedItemVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbUpdatedItemVersion::Swap(PbUpdatedItemVersion* other) {
  if (other != this) {
    std::swap(lut_, other->lut_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbUpdatedItemVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbUpdatedItemVersion_descriptor_;
  metadata.reflection = PbUpdatedItemVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcReplicationArg::kRemoteDVFieldNumber;
const int PbRpcReplicationArg::kUpdateRecordFieldNumber;
#endif  // !_MSC_VER

PbRpcReplicationArg::PbRpcReplicationArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcReplicationArg)
}

void PbRpcReplicationArg::InitAsDefaultInstance() {
}

PbRpcReplicationArg::PbRpcReplicationArg(const PbRpcReplicationArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcReplicationArg)
}

void PbRpcReplicationArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcReplicationArg::~PbRpcReplicationArg() {
  // @@protoc_insertion_point(destructor:PbRpcReplicationArg)
  SharedDtor();
}

void PbRpcReplicationArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcReplicationArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcReplicationArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcReplicationArg_descriptor_;
}

const PbRpcReplicationArg& PbRpcReplicationArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcReplicationArg* PbRpcReplicationArg::default_instance_ = NULL;

PbRpcReplicationArg* PbRpcReplicationArg::New() const {
  return new PbRpcReplicationArg;
}

void PbRpcReplicationArg::Clear() {
  remotedv_.Clear();
  updaterecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcReplicationArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcReplicationArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbPhysicalTimeSpec remoteDV = 1;
      case 1: {
        if (tag == 10) {
         parse_remoteDV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remotedv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_remoteDV;
        if (input->ExpectTag(18)) goto parse_UpdateRecord;
        break;
      }

      // repeated bytes UpdateRecord = 2;
      case 2: {
        if (tag == 18) {
         parse_UpdateRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_updaterecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UpdateRecord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcReplicationArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcReplicationArg)
  return false;
#undef DO_
}

void PbRpcReplicationArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcReplicationArg)
  // repeated .PbPhysicalTimeSpec remoteDV = 1;
  for (int i = 0; i < this->remotedv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->remotedv(i), output);
  }

  // repeated bytes UpdateRecord = 2;
  for (int i = 0; i < this->updaterecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->updaterecord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcReplicationArg)
}

::google::protobuf::uint8* PbRpcReplicationArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcReplicationArg)
  // repeated .PbPhysicalTimeSpec remoteDV = 1;
  for (int i = 0; i < this->remotedv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->remotedv(i), target);
  }

  // repeated bytes UpdateRecord = 2;
  for (int i = 0; i < this->updaterecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->updaterecord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcReplicationArg)
  return target;
}

int PbRpcReplicationArg::ByteSize() const {
  int total_size = 0;

  // repeated .PbPhysicalTimeSpec remoteDV = 1;
  total_size += 1 * this->remotedv_size();
  for (int i = 0; i < this->remotedv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remotedv(i));
  }

  // repeated bytes UpdateRecord = 2;
  total_size += 1 * this->updaterecord_size();
  for (int i = 0; i < this->updaterecord_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->updaterecord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcReplicationArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcReplicationArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcReplicationArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcReplicationArg::MergeFrom(const PbRpcReplicationArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  remotedv_.MergeFrom(from.remotedv_);
  updaterecord_.MergeFrom(from.updaterecord_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcReplicationArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcReplicationArg::CopyFrom(const PbRpcReplicationArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcReplicationArg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->remotedv())) return false;
  return true;
}

void PbRpcReplicationArg::Swap(PbRpcReplicationArg* other) {
  if (other != this) {
    remotedv_.Swap(&other->remotedv_);
    updaterecord_.Swap(&other->updaterecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcReplicationArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcReplicationArg_descriptor_;
  metadata.reflection = PbRpcReplicationArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcHeartbeat::kPhysicalTimeFieldNumber;
const int PbRpcHeartbeat::kLogicalTimeFieldNumber;
#endif  // !_MSC_VER

PbRpcHeartbeat::PbRpcHeartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcHeartbeat)
}

void PbRpcHeartbeat::InitAsDefaultInstance() {
  physicaltime_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcHeartbeat::PbRpcHeartbeat(const PbRpcHeartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcHeartbeat)
}

void PbRpcHeartbeat::SharedCtor() {
  _cached_size_ = 0;
  physicaltime_ = NULL;
  logicaltime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcHeartbeat::~PbRpcHeartbeat() {
  // @@protoc_insertion_point(destructor:PbRpcHeartbeat)
  SharedDtor();
}

void PbRpcHeartbeat::SharedDtor() {
  if (this != default_instance_) {
    delete physicaltime_;
  }
}

void PbRpcHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcHeartbeat_descriptor_;
}

const PbRpcHeartbeat& PbRpcHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcHeartbeat* PbRpcHeartbeat::default_instance_ = NULL;

PbRpcHeartbeat* PbRpcHeartbeat::New() const {
  return new PbRpcHeartbeat;
}

void PbRpcHeartbeat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_physicaltime()) {
      if (physicaltime_ != NULL) physicaltime_->::PbPhysicalTimeSpec::Clear();
    }
    logicaltime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec PhysicalTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physicaltime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LogicalTime;
        break;
      }

      // required int64 LogicalTime = 2;
      case 2: {
        if (tag == 16) {
         parse_LogicalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logicaltime_)));
          set_has_logicaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcHeartbeat)
  return false;
#undef DO_
}

void PbRpcHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcHeartbeat)
  // required .PbPhysicalTimeSpec PhysicalTime = 1;
  if (has_physicaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->physicaltime(), output);
  }

  // required int64 LogicalTime = 2;
  if (has_logicaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logicaltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcHeartbeat)
}

::google::protobuf::uint8* PbRpcHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcHeartbeat)
  // required .PbPhysicalTimeSpec PhysicalTime = 1;
  if (has_physicaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->physicaltime(), target);
  }

  // required int64 LogicalTime = 2;
  if (has_logicaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logicaltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcHeartbeat)
  return target;
}

int PbRpcHeartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec PhysicalTime = 1;
    if (has_physicaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physicaltime());
    }

    // required int64 LogicalTime = 2;
    if (has_logicaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logicaltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcHeartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcHeartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcHeartbeat::MergeFrom(const PbRpcHeartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physicaltime()) {
      mutable_physicaltime()->::PbPhysicalTimeSpec::MergeFrom(from.physicaltime());
    }
    if (from.has_logicaltime()) {
      set_logicaltime(from.logicaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcHeartbeat::CopyFrom(const PbRpcHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcHeartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_physicaltime()) {
    if (!this->physicaltime().IsInitialized()) return false;
  }
  return true;
}

void PbRpcHeartbeat::Swap(PbRpcHeartbeat* other) {
  if (other != this) {
    std::swap(physicaltime_, other->physicaltime_);
    std::swap(logicaltime_, other->logicaltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcHeartbeat_descriptor_;
  metadata.reflection = PbRpcHeartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcLST::kTimeFieldNumber;
const int PbRpcLST::kRoundFieldNumber;
const int PbRpcLST::kPVVFieldNumber;
#endif  // !_MSC_VER

PbRpcLST::PbRpcLST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcLST)
}

void PbRpcLST::InitAsDefaultInstance() {
  time_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcLST::PbRpcLST(const PbRpcLST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcLST)
}

void PbRpcLST::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcLST::~PbRpcLST() {
  // @@protoc_insertion_point(destructor:PbRpcLST)
  SharedDtor();
}

void PbRpcLST::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void PbRpcLST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcLST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcLST_descriptor_;
}

const PbRpcLST& PbRpcLST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcLST* PbRpcLST::default_instance_ = NULL;

PbRpcLST* PbRpcLST::New() const {
  return new PbRpcLST;
}

void PbRpcLST::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_time()) {
      if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
    }
    round_ = 0;
  }
  pvv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcLST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcLST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec Time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Round;
        break;
      }

      // required int32 Round = 2;
      case 2: {
        if (tag == 16) {
         parse_Round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PVV;
        break;
      }

      // repeated .PbPhysicalTimeSpec PVV = 3;
      case 3: {
        if (tag == 26) {
         parse_PVV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PVV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcLST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcLST)
  return false;
#undef DO_
}

void PbRpcLST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcLST)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  // required int32 Round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  // repeated .PbPhysicalTimeSpec PVV = 3;
  for (int i = 0; i < this->pvv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pvv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcLST)
}

::google::protobuf::uint8* PbRpcLST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcLST)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  // required int32 Round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round(), target);
  }

  // repeated .PbPhysicalTimeSpec PVV = 3;
  for (int i = 0; i < this->pvv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pvv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcLST)
  return target;
}

int PbRpcLST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required int32 Round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  // repeated .PbPhysicalTimeSpec PVV = 3;
  total_size += 1 * this->pvv_size();
  for (int i = 0; i < this->pvv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcLST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcLST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcLST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcLST::MergeFrom(const PbRpcLST& from) {
  GOOGLE_CHECK_NE(&from, this);
  pvv_.MergeFrom(from.pvv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::PbPhysicalTimeSpec::MergeFrom(from.time());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcLST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcLST::CopyFrom(const PbRpcLST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcLST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pvv())) return false;
  return true;
}

void PbRpcLST::Swap(PbRpcLST* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(round_, other->round_);
    pvv_.Swap(&other->pvv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcLST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcLST_descriptor_;
  metadata.reflection = PbRpcLST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGST::kTimeFieldNumber;
#endif  // !_MSC_VER

PbRpcGST::PbRpcGST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGST)
}

void PbRpcGST::InitAsDefaultInstance() {
  time_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcGST::PbRpcGST(const PbRpcGST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGST)
}

void PbRpcGST::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGST::~PbRpcGST() {
  // @@protoc_insertion_point(destructor:PbRpcGST)
  SharedDtor();
}

void PbRpcGST::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void PbRpcGST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGST_descriptor_;
}

const PbRpcGST& PbRpcGST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGST* PbRpcGST::default_instance_ = NULL;

PbRpcGST* PbRpcGST::New() const {
  return new PbRpcGST;
}

void PbRpcGST::Clear() {
  if (has_time()) {
    if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec Time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGST)
  return false;
#undef DO_
}

void PbRpcGST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGST)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGST)
}

::google::protobuf::uint8* PbRpcGST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGST)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGST)
  return target;
}

int PbRpcGST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGST::MergeFrom(const PbRpcGST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::PbPhysicalTimeSpec::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGST::CopyFrom(const PbRpcGST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void PbRpcGST::Swap(PbRpcGST* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGST_descriptor_;
  metadata.reflection = PbRpcGST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGSTReq::kTimeFieldNumber;
const int PbRpcGSTReq::kPeerIdFieldNumber;
const int PbRpcGSTReq::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcGSTReq::PbRpcGSTReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGSTReq)
}

void PbRpcGSTReq::InitAsDefaultInstance() {
  time_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcGSTReq::PbRpcGSTReq(const PbRpcGSTReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGSTReq)
}

void PbRpcGSTReq::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  peerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGSTReq::~PbRpcGSTReq() {
  // @@protoc_insertion_point(destructor:PbRpcGSTReq)
  SharedDtor();
}

void PbRpcGSTReq::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void PbRpcGSTReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGSTReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGSTReq_descriptor_;
}

const PbRpcGSTReq& PbRpcGSTReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGSTReq* PbRpcGSTReq::default_instance_ = NULL;

PbRpcGSTReq* PbRpcGSTReq::New() const {
  return new PbRpcGSTReq;
}

void PbRpcGSTReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_time()) {
      if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
    }
    peerid_ = 0;
  }
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGSTReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGSTReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec Time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PeerId;
        break;
      }

      // required int32 PeerId = 2;
      case 2: {
        if (tag == 16) {
         parse_PeerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peerid_)));
          set_has_peerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GSV;
        break;
      }

      // repeated .PbPhysicalTimeSpec GSV = 3;
      case 3: {
        if (tag == 26) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGSTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGSTReq)
  return false;
#undef DO_
}

void PbRpcGSTReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGSTReq)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  // required int32 PeerId = 2;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peerid(), output);
  }

  // repeated .PbPhysicalTimeSpec GSV = 3;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGSTReq)
}

::google::protobuf::uint8* PbRpcGSTReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGSTReq)
  // required .PbPhysicalTimeSpec Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  // required int32 PeerId = 2;
  if (has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peerid(), target);
  }

  // repeated .PbPhysicalTimeSpec GSV = 3;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGSTReq)
  return target;
}

int PbRpcGSTReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required int32 PeerId = 2;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peerid());
    }

  }
  // repeated .PbPhysicalTimeSpec GSV = 3;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGSTReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGSTReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGSTReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGSTReq::MergeFrom(const PbRpcGSTReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gsv_.MergeFrom(from.gsv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::PbPhysicalTimeSpec::MergeFrom(from.time());
    }
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGSTReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGSTReq::CopyFrom(const PbRpcGSTReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGSTReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcGSTReq::Swap(PbRpcGSTReq* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(peerid_, other->peerid_);
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGSTReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGSTReq_descriptor_;
  metadata.reflection = PbRpcGSTReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPVV::kRoundFieldNumber;
const int PbRpcPVV::kPVVFieldNumber;
#endif  // !_MSC_VER

PbRpcPVV::PbRpcPVV()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPVV)
}

void PbRpcPVV::InitAsDefaultInstance() {
}

PbRpcPVV::PbRpcPVV(const PbRpcPVV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPVV)
}

void PbRpcPVV::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPVV::~PbRpcPVV() {
  // @@protoc_insertion_point(destructor:PbRpcPVV)
  SharedDtor();
}

void PbRpcPVV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcPVV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPVV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPVV_descriptor_;
}

const PbRpcPVV& PbRpcPVV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPVV* PbRpcPVV::default_instance_ = NULL;

PbRpcPVV* PbRpcPVV::New() const {
  return new PbRpcPVV;
}

void PbRpcPVV::Clear() {
  round_ = 0;
  pvv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPVV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPVV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PVV;
        break;
      }

      // repeated .PbPhysicalTimeSpec PVV = 2;
      case 2: {
        if (tag == 18) {
         parse_PVV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PVV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPVV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPVV)
  return false;
#undef DO_
}

void PbRpcPVV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPVV)
  // required int32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // repeated .PbPhysicalTimeSpec PVV = 2;
  for (int i = 0; i < this->pvv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pvv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPVV)
}

::google::protobuf::uint8* PbRpcPVV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPVV)
  // required int32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // repeated .PbPhysicalTimeSpec PVV = 2;
  for (int i = 0; i < this->pvv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pvv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPVV)
  return target;
}

int PbRpcPVV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  // repeated .PbPhysicalTimeSpec PVV = 2;
  total_size += 1 * this->pvv_size();
  for (int i = 0; i < this->pvv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPVV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPVV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPVV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPVV::MergeFrom(const PbRpcPVV& from) {
  GOOGLE_CHECK_NE(&from, this);
  pvv_.MergeFrom(from.pvv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPVV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPVV::CopyFrom(const PbRpcPVV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPVV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pvv())) return false;
  return true;
}

void PbRpcPVV::Swap(PbRpcPVV* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    pvv_.Swap(&other->pvv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPVV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPVV_descriptor_;
  metadata.reflection = PbRpcPVV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGSV::kGSVFieldNumber;
#endif  // !_MSC_VER

PbRpcGSV::PbRpcGSV()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGSV)
}

void PbRpcGSV::InitAsDefaultInstance() {
}

PbRpcGSV::PbRpcGSV(const PbRpcGSV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGSV)
}

void PbRpcGSV::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGSV::~PbRpcGSV() {
  // @@protoc_insertion_point(destructor:PbRpcGSV)
  SharedDtor();
}

void PbRpcGSV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcGSV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGSV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGSV_descriptor_;
}

const PbRpcGSV& PbRpcGSV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGSV* PbRpcGSV::default_instance_ = NULL;

PbRpcGSV* PbRpcGSV::New() const {
  return new PbRpcGSV;
}

void PbRpcGSV::Clear() {
  gsv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGSV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGSV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbPhysicalTimeSpec GSV = 1;
      case 1: {
        if (tag == 10) {
         parse_GSV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GSV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGSV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGSV)
  return false;
#undef DO_
}

void PbRpcGSV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGSV)
  // repeated .PbPhysicalTimeSpec GSV = 1;
  for (int i = 0; i < this->gsv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gsv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGSV)
}

::google::protobuf::uint8* PbRpcGSV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGSV)
  // repeated .PbPhysicalTimeSpec GSV = 1;
  for (int i = 0; i < this->gsv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gsv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGSV)
  return target;
}

int PbRpcGSV::ByteSize() const {
  int total_size = 0;

  // repeated .PbPhysicalTimeSpec GSV = 1;
  total_size += 1 * this->gsv_size();
  for (int i = 0; i < this->gsv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gsv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGSV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGSV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGSV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGSV::MergeFrom(const PbRpcGSV& from) {
  GOOGLE_CHECK_NE(&from, this);
  gsv_.MergeFrom(from.gsv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGSV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGSV::CopyFrom(const PbRpcGSV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGSV::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gsv())) return false;
  return true;
}

void PbRpcGSV::Swap(PbRpcGSV* other) {
  if (other != this) {
    gsv_.Swap(&other->gsv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGSV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGSV_descriptor_;
  metadata.reflection = PbRpcGSV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGroupServiceResult::kSucceededFieldNumber;
#endif  // !_MSC_VER

PbRpcGroupServiceResult::PbRpcGroupServiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGroupServiceResult)
}

void PbRpcGroupServiceResult::InitAsDefaultInstance() {
}

PbRpcGroupServiceResult::PbRpcGroupServiceResult(const PbRpcGroupServiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGroupServiceResult)
}

void PbRpcGroupServiceResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGroupServiceResult::~PbRpcGroupServiceResult() {
  // @@protoc_insertion_point(destructor:PbRpcGroupServiceResult)
  SharedDtor();
}

void PbRpcGroupServiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcGroupServiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGroupServiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGroupServiceResult_descriptor_;
}

const PbRpcGroupServiceResult& PbRpcGroupServiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGroupServiceResult* PbRpcGroupServiceResult::default_instance_ = NULL;

PbRpcGroupServiceResult* PbRpcGroupServiceResult::New() const {
  return new PbRpcGroupServiceResult;
}

void PbRpcGroupServiceResult::Clear() {
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGroupServiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGroupServiceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGroupServiceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGroupServiceResult)
  return false;
#undef DO_
}

void PbRpcGroupServiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGroupServiceResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGroupServiceResult)
}

::google::protobuf::uint8* PbRpcGroupServiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGroupServiceResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGroupServiceResult)
  return target;
}

int PbRpcGroupServiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGroupServiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGroupServiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGroupServiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGroupServiceResult::MergeFrom(const PbRpcGroupServiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGroupServiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGroupServiceResult::CopyFrom(const PbRpcGroupServiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGroupServiceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcGroupServiceResult::Swap(PbRpcGroupServiceResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGroupServiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGroupServiceResult_descriptor_;
  metadata.reflection = PbRpcGroupServiceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbPartition::kNameFieldNumber;
const int PbPartition::kPublicPortFieldNumber;
const int PbPartition::kPartitionPortFieldNumber;
const int PbPartition::kReplicationPortFieldNumber;
const int PbPartition::kPartitionIdFieldNumber;
const int PbPartition::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

PbPartition::PbPartition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbPartition)
}

void PbPartition::InitAsDefaultInstance() {
}

PbPartition::PbPartition(const PbPartition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbPartition)
}

void PbPartition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicport_ = 0;
  partitionport_ = 0;
  replicationport_ = 0;
  partitionid_ = 0;
  replicaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPartition::~PbPartition() {
  // @@protoc_insertion_point(destructor:PbPartition)
  SharedDtor();
}

void PbPartition::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PbPartition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPartition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPartition_descriptor_;
}

const PbPartition& PbPartition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbPartition* PbPartition::default_instance_ = NULL;

PbPartition* PbPartition::New() const {
  return new PbPartition;
}

void PbPartition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbPartition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(publicport_, replicaid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbPartition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PublicPort;
        break;
      }

      // required int32 PublicPort = 2;
      case 2: {
        if (tag == 16) {
         parse_PublicPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicport_)));
          set_has_publicport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PartitionPort;
        break;
      }

      // required int32 PartitionPort = 3;
      case 3: {
        if (tag == 24) {
         parse_PartitionPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionport_)));
          set_has_partitionport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReplicationPort;
        break;
      }

      // required int32 ReplicationPort = 4;
      case 4: {
        if (tag == 32) {
         parse_ReplicationPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicationport_)));
          set_has_replicationport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PartitionId;
        break;
      }

      // required int32 PartitionId = 5;
      case 5: {
        if (tag == 40) {
         parse_PartitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
          set_has_partitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ReplicaId;
        break;
      }

      // required int32 ReplicaId = 6;
      case 6: {
        if (tag == 48) {
         parse_ReplicaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicaid_)));
          set_has_replicaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbPartition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbPartition)
  return false;
#undef DO_
}

void PbPartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbPartition)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 PublicPort = 2;
  if (has_publicport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->publicport(), output);
  }

  // required int32 PartitionPort = 3;
  if (has_partitionport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partitionport(), output);
  }

  // required int32 ReplicationPort = 4;
  if (has_replicationport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replicationport(), output);
  }

  // required int32 PartitionId = 5;
  if (has_partitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->partitionid(), output);
  }

  // required int32 ReplicaId = 6;
  if (has_replicaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->replicaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbPartition)
}

::google::protobuf::uint8* PbPartition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbPartition)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 PublicPort = 2;
  if (has_publicport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->publicport(), target);
  }

  // required int32 PartitionPort = 3;
  if (has_partitionport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partitionport(), target);
  }

  // required int32 ReplicationPort = 4;
  if (has_replicationport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replicationport(), target);
  }

  // required int32 PartitionId = 5;
  if (has_partitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->partitionid(), target);
  }

  // required int32 ReplicaId = 6;
  if (has_replicaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->replicaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbPartition)
  return target;
}

int PbPartition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 PublicPort = 2;
    if (has_publicport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicport());
    }

    // required int32 PartitionPort = 3;
    if (has_partitionport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partitionport());
    }

    // required int32 ReplicationPort = 4;
    if (has_replicationport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicationport());
    }

    // required int32 PartitionId = 5;
    if (has_partitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partitionid());
    }

    // required int32 ReplicaId = 6;
    if (has_replicaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPartition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPartition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPartition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPartition::MergeFrom(const PbPartition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_publicport()) {
      set_publicport(from.publicport());
    }
    if (from.has_partitionport()) {
      set_partitionport(from.partitionport());
    }
    if (from.has_replicationport()) {
      set_replicationport(from.replicationport());
    }
    if (from.has_partitionid()) {
      set_partitionid(from.partitionid());
    }
    if (from.has_replicaid()) {
      set_replicaid(from.replicaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPartition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPartition::CopyFrom(const PbPartition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPartition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PbPartition::Swap(PbPartition* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(publicport_, other->publicport_);
    std::swap(partitionport_, other->partitionport_);
    std::swap(replicationport_, other->replicationport_);
    std::swap(partitionid_, other->partitionid_);
    std::swap(replicaid_, other->replicaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbPartition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPartition_descriptor_;
  metadata.reflection = PbPartition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRegisteredPartitions::kNumPartitionsFieldNumber;
const int PbRegisteredPartitions::kNumReplicasPerPartitionFieldNumber;
const int PbRegisteredPartitions::kPartitionFieldNumber;
#endif  // !_MSC_VER

PbRegisteredPartitions::PbRegisteredPartitions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRegisteredPartitions)
}

void PbRegisteredPartitions::InitAsDefaultInstance() {
}

PbRegisteredPartitions::PbRegisteredPartitions(const PbRegisteredPartitions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRegisteredPartitions)
}

void PbRegisteredPartitions::SharedCtor() {
  _cached_size_ = 0;
  numpartitions_ = 0;
  numreplicasperpartition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRegisteredPartitions::~PbRegisteredPartitions() {
  // @@protoc_insertion_point(destructor:PbRegisteredPartitions)
  SharedDtor();
}

void PbRegisteredPartitions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRegisteredPartitions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRegisteredPartitions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRegisteredPartitions_descriptor_;
}

const PbRegisteredPartitions& PbRegisteredPartitions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRegisteredPartitions* PbRegisteredPartitions::default_instance_ = NULL;

PbRegisteredPartitions* PbRegisteredPartitions::New() const {
  return new PbRegisteredPartitions;
}

void PbRegisteredPartitions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRegisteredPartitions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(numpartitions_, numreplicasperpartition_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRegisteredPartitions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRegisteredPartitions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 NumPartitions = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpartitions_)));
          set_has_numpartitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumReplicasPerPartition;
        break;
      }

      // required int32 NumReplicasPerPartition = 2;
      case 2: {
        if (tag == 16) {
         parse_NumReplicasPerPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numreplicasperpartition_)));
          set_has_numreplicasperpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Partition;
        break;
      }

      // repeated .PbPartition Partition = 3;
      case 3: {
        if (tag == 26) {
         parse_Partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Partition;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRegisteredPartitions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRegisteredPartitions)
  return false;
#undef DO_
}

void PbRegisteredPartitions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRegisteredPartitions)
  // required int32 NumPartitions = 1;
  if (has_numpartitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numpartitions(), output);
  }

  // required int32 NumReplicasPerPartition = 2;
  if (has_numreplicasperpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numreplicasperpartition(), output);
  }

  // repeated .PbPartition Partition = 3;
  for (int i = 0; i < this->partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->partition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRegisteredPartitions)
}

::google::protobuf::uint8* PbRegisteredPartitions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRegisteredPartitions)
  // required int32 NumPartitions = 1;
  if (has_numpartitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numpartitions(), target);
  }

  // required int32 NumReplicasPerPartition = 2;
  if (has_numreplicasperpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numreplicasperpartition(), target);
  }

  // repeated .PbPartition Partition = 3;
  for (int i = 0; i < this->partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->partition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRegisteredPartitions)
  return target;
}

int PbRegisteredPartitions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 NumPartitions = 1;
    if (has_numpartitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpartitions());
    }

    // required int32 NumReplicasPerPartition = 2;
    if (has_numreplicasperpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numreplicasperpartition());
    }

  }
  // repeated .PbPartition Partition = 3;
  total_size += 1 * this->partition_size();
  for (int i = 0; i < this->partition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRegisteredPartitions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRegisteredPartitions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRegisteredPartitions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRegisteredPartitions::MergeFrom(const PbRegisteredPartitions& from) {
  GOOGLE_CHECK_NE(&from, this);
  partition_.MergeFrom(from.partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numpartitions()) {
      set_numpartitions(from.numpartitions());
    }
    if (from.has_numreplicasperpartition()) {
      set_numreplicasperpartition(from.numreplicasperpartition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRegisteredPartitions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRegisteredPartitions::CopyFrom(const PbRegisteredPartitions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRegisteredPartitions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->partition())) return false;
  return true;
}

void PbRegisteredPartitions::Swap(PbRegisteredPartitions* other) {
  if (other != this) {
    std::swap(numpartitions_, other->numpartitions_);
    std::swap(numreplicasperpartition_, other->numreplicasperpartition_);
    partition_.Swap(&other->partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRegisteredPartitions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRegisteredPartitions_descriptor_;
  metadata.reflection = PbRegisteredPartitions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVInternalPrepareReplyResult::kIdFieldNumber;
const int PbRpcKVInternalPrepareReplyResult::kPTFieldNumber;
const int PbRpcKVInternalPrepareReplyResult::kSrcFieldNumber;
const int PbRpcKVInternalPrepareReplyResult::kBlockDurationFieldNumber;
#endif  // !_MSC_VER

PbRpcKVInternalPrepareReplyResult::PbRpcKVInternalPrepareReplyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVInternalPrepareReplyResult)
}

void PbRpcKVInternalPrepareReplyResult::InitAsDefaultInstance() {
  pt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVInternalPrepareReplyResult::PbRpcKVInternalPrepareReplyResult(const PbRpcKVInternalPrepareReplyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVInternalPrepareReplyResult)
}

void PbRpcKVInternalPrepareReplyResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  pt_ = NULL;
  src_ = GOOGLE_LONGLONG(0);
  blockduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVInternalPrepareReplyResult::~PbRpcKVInternalPrepareReplyResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVInternalPrepareReplyResult)
  SharedDtor();
}

void PbRpcKVInternalPrepareReplyResult::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PbRpcKVInternalPrepareReplyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVInternalPrepareReplyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVInternalPrepareReplyResult_descriptor_;
}

const PbRpcKVInternalPrepareReplyResult& PbRpcKVInternalPrepareReplyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVInternalPrepareReplyResult* PbRpcKVInternalPrepareReplyResult::default_instance_ = NULL;

PbRpcKVInternalPrepareReplyResult* PbRpcKVInternalPrepareReplyResult::New() const {
  return new PbRpcKVInternalPrepareReplyResult;
}

void PbRpcKVInternalPrepareReplyResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcKVInternalPrepareReplyResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(src_, blockduration_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_pt()) {
      if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVInternalPrepareReplyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVInternalPrepareReplyResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PT;
        break;
      }

      // required .PbPhysicalTimeSpec PT = 2;
      case 2: {
        if (tag == 18) {
         parse_PT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src;
        break;
      }

      // required int64 src = 3;
      case 3: {
        if (tag == 24) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_blockDuration;
        break;
      }

      // optional double blockDuration = 4;
      case 4: {
        if (tag == 33) {
         parse_blockDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blockduration_)));
          set_has_blockduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVInternalPrepareReplyResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVInternalPrepareReplyResult)
  return false;
#undef DO_
}

void PbRpcKVInternalPrepareReplyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVInternalPrepareReplyResult)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required int64 src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->src(), output);
  }

  // optional double blockDuration = 4;
  if (has_blockduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->blockduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVInternalPrepareReplyResult)
}

::google::protobuf::uint8* PbRpcKVInternalPrepareReplyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVInternalPrepareReplyResult)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required int64 src = 3;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->src(), target);
  }

  // optional double blockDuration = 4;
  if (has_blockduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->blockduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVInternalPrepareReplyResult)
  return target;
}

int PbRpcKVInternalPrepareReplyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec PT = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required int64 src = 3;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

    // optional double blockDuration = 4;
    if (has_blockduration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVInternalPrepareReplyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVInternalPrepareReplyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVInternalPrepareReplyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVInternalPrepareReplyResult::MergeFrom(const PbRpcKVInternalPrepareReplyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pt()) {
      mutable_pt()->::PbPhysicalTimeSpec::MergeFrom(from.pt());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_blockduration()) {
      set_blockduration(from.blockduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVInternalPrepareReplyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVInternalPrepareReplyResult::CopyFrom(const PbRpcKVInternalPrepareReplyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVInternalPrepareReplyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcKVInternalPrepareReplyResult::Swap(PbRpcKVInternalPrepareReplyResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pt_, other->pt_);
    std::swap(src_, other->src_);
    std::swap(blockduration_, other->blockduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVInternalPrepareReplyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVInternalPrepareReplyResult_descriptor_;
  metadata.reflection = PbRpcKVInternalPrepareReplyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpCommitRequestArg::kIdFieldNumber;
const int PbRpCommitRequestArg::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpCommitRequestArg::PbRpCommitRequestArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpCommitRequestArg)
}

void PbRpCommitRequestArg::InitAsDefaultInstance() {
  ct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpCommitRequestArg::PbRpCommitRequestArg(const PbRpCommitRequestArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpCommitRequestArg)
}

void PbRpCommitRequestArg::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpCommitRequestArg::~PbRpCommitRequestArg() {
  // @@protoc_insertion_point(destructor:PbRpCommitRequestArg)
  SharedDtor();
}

void PbRpCommitRequestArg::SharedDtor() {
  if (this != default_instance_) {
    delete ct_;
  }
}

void PbRpCommitRequestArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpCommitRequestArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpCommitRequestArg_descriptor_;
}

const PbRpCommitRequestArg& PbRpCommitRequestArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpCommitRequestArg* PbRpCommitRequestArg::default_instance_ = NULL;

PbRpCommitRequestArg* PbRpCommitRequestArg::New() const {
  return new PbRpCommitRequestArg;
}

void PbRpCommitRequestArg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_ct()) {
      if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpCommitRequestArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpCommitRequestArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // required .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpCommitRequestArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpCommitRequestArg)
  return false;
#undef DO_
}

void PbRpCommitRequestArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpCommitRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpCommitRequestArg)
}

::google::protobuf::uint8* PbRpCommitRequestArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpCommitRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpCommitRequestArg)
  return target;
}

int PbRpCommitRequestArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec CT = 2;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpCommitRequestArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpCommitRequestArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpCommitRequestArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpCommitRequestArg::MergeFrom(const PbRpCommitRequestArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ct()) {
      mutable_ct()->::PbPhysicalTimeSpec::MergeFrom(from.ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpCommitRequestArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpCommitRequestArg::CopyFrom(const PbRpCommitRequestArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpCommitRequestArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ct()) {
    if (!this->ct().IsInitialized()) return false;
  }
  return true;
}

void PbRpCommitRequestArg::Swap(PbRpCommitRequestArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ct_, other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpCommitRequestArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpCommitRequestArg_descriptor_;
  metadata.reflection = PbRpCommitRequestArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicCommitArg::kIDFieldNumber;
const int PbRpcKVPublicCommitArg::kKeyFieldNumber;
const int PbRpcKVPublicCommitArg::kValueFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicCommitArg::PbRpcKVPublicCommitArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicCommitArg)
}

void PbRpcKVPublicCommitArg::InitAsDefaultInstance() {
}

PbRpcKVPublicCommitArg::PbRpcKVPublicCommitArg(const PbRpcKVPublicCommitArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicCommitArg)
}

void PbRpcKVPublicCommitArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicCommitArg::~PbRpcKVPublicCommitArg() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicCommitArg)
  SharedDtor();
}

void PbRpcKVPublicCommitArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcKVPublicCommitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicCommitArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicCommitArg_descriptor_;
}

const PbRpcKVPublicCommitArg& PbRpcKVPublicCommitArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicCommitArg* PbRpcKVPublicCommitArg::default_instance_ = NULL;

PbRpcKVPublicCommitArg* PbRpcKVPublicCommitArg::New() const {
  return new PbRpcKVPublicCommitArg;
}

void PbRpcKVPublicCommitArg::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicCommitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicCommitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 3;
      case 3: {
        if (tag == 26) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicCommitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicCommitArg)
  return false;
#undef DO_
}

void PbRpcKVPublicCommitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicCommitArg)
}

::google::protobuf::uint8* PbRpcKVPublicCommitArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicCommitArg)
  return target;
}

int PbRpcKVPublicCommitArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicCommitArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicCommitArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicCommitArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicCommitArg::MergeFrom(const PbRpcKVPublicCommitArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicCommitArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicCommitArg::CopyFrom(const PbRpcKVPublicCommitArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicCommitArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcKVPublicCommitArg::Swap(PbRpcKVPublicCommitArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicCommitArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicCommitArg_descriptor_;
  metadata.reflection = PbRpcKVPublicCommitArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcKVPublicCommitResult::kSucceededFieldNumber;
const int PbRpcKVPublicCommitResult::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpcKVPublicCommitResult::PbRpcKVPublicCommitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcKVPublicCommitResult)
}

void PbRpcKVPublicCommitResult::InitAsDefaultInstance() {
  ct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcKVPublicCommitResult::PbRpcKVPublicCommitResult(const PbRpcKVPublicCommitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcKVPublicCommitResult)
}

void PbRpcKVPublicCommitResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcKVPublicCommitResult::~PbRpcKVPublicCommitResult() {
  // @@protoc_insertion_point(destructor:PbRpcKVPublicCommitResult)
  SharedDtor();
}

void PbRpcKVPublicCommitResult::SharedDtor() {
  if (this != default_instance_) {
    delete ct_;
  }
}

void PbRpcKVPublicCommitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcKVPublicCommitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcKVPublicCommitResult_descriptor_;
}

const PbRpcKVPublicCommitResult& PbRpcKVPublicCommitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcKVPublicCommitResult* PbRpcKVPublicCommitResult::default_instance_ = NULL;

PbRpcKVPublicCommitResult* PbRpcKVPublicCommitResult::New() const {
  return new PbRpcKVPublicCommitResult;
}

void PbRpcKVPublicCommitResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    if (has_ct()) {
      if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcKVPublicCommitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcKVPublicCommitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // required .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcKVPublicCommitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcKVPublicCommitResult)
  return false;
#undef DO_
}

void PbRpcKVPublicCommitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcKVPublicCommitResult)
}

::google::protobuf::uint8* PbRpcKVPublicCommitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcKVPublicCommitResult)
  return target;
}

int PbRpcKVPublicCommitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required .PbPhysicalTimeSpec CT = 2;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcKVPublicCommitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcKVPublicCommitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcKVPublicCommitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcKVPublicCommitResult::MergeFrom(const PbRpcKVPublicCommitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_ct()) {
      mutable_ct()->::PbPhysicalTimeSpec::MergeFrom(from.ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcKVPublicCommitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcKVPublicCommitResult::CopyFrom(const PbRpcKVPublicCommitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcKVPublicCommitResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ct()) {
    if (!this->ct().IsInitialized()) return false;
  }
  return true;
}

void PbRpcKVPublicCommitResult::Swap(PbRpcKVPublicCommitResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(ct_, other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcKVPublicCommitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcKVPublicCommitResult_descriptor_;
  metadata.reflection = PbRpcKVPublicCommitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPartitionClientPrepareRequestResult::kIdFieldNumber;
const int PbRpcPartitionClientPrepareRequestResult::kPTFieldNumber;
const int PbRpcPartitionClientPrepareRequestResult::kSrcFieldNumber;
const int PbRpcPartitionClientPrepareRequestResult::kBlockDurationFieldNumber;
#endif  // !_MSC_VER

PbRpcPartitionClientPrepareRequestResult::PbRpcPartitionClientPrepareRequestResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPartitionClientPrepareRequestResult)
}

void PbRpcPartitionClientPrepareRequestResult::InitAsDefaultInstance() {
  pt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPartitionClientPrepareRequestResult::PbRpcPartitionClientPrepareRequestResult(const PbRpcPartitionClientPrepareRequestResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPartitionClientPrepareRequestResult)
}

void PbRpcPartitionClientPrepareRequestResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  pt_ = NULL;
  src_ = GOOGLE_LONGLONG(0);
  blockduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPartitionClientPrepareRequestResult::~PbRpcPartitionClientPrepareRequestResult() {
  // @@protoc_insertion_point(destructor:PbRpcPartitionClientPrepareRequestResult)
  SharedDtor();
}

void PbRpcPartitionClientPrepareRequestResult::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PbRpcPartitionClientPrepareRequestResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPartitionClientPrepareRequestResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPartitionClientPrepareRequestResult_descriptor_;
}

const PbRpcPartitionClientPrepareRequestResult& PbRpcPartitionClientPrepareRequestResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPartitionClientPrepareRequestResult* PbRpcPartitionClientPrepareRequestResult::default_instance_ = NULL;

PbRpcPartitionClientPrepareRequestResult* PbRpcPartitionClientPrepareRequestResult::New() const {
  return new PbRpcPartitionClientPrepareRequestResult;
}

void PbRpcPartitionClientPrepareRequestResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcPartitionClientPrepareRequestResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(src_, blockduration_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_pt()) {
      if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPartitionClientPrepareRequestResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPartitionClientPrepareRequestResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PT;
        break;
      }

      // required .PbPhysicalTimeSpec PT = 2;
      case 2: {
        if (tag == 18) {
         parse_PT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src;
        break;
      }

      // required int64 src = 3;
      case 3: {
        if (tag == 24) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_blockDuration;
        break;
      }

      // optional double blockDuration = 4;
      case 4: {
        if (tag == 33) {
         parse_blockDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blockduration_)));
          set_has_blockduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPartitionClientPrepareRequestResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPartitionClientPrepareRequestResult)
  return false;
#undef DO_
}

void PbRpcPartitionClientPrepareRequestResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPartitionClientPrepareRequestResult)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required int64 src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->src(), output);
  }

  // optional double blockDuration = 4;
  if (has_blockduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->blockduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPartitionClientPrepareRequestResult)
}

::google::protobuf::uint8* PbRpcPartitionClientPrepareRequestResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPartitionClientPrepareRequestResult)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required int64 src = 3;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->src(), target);
  }

  // optional double blockDuration = 4;
  if (has_blockduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->blockduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPartitionClientPrepareRequestResult)
  return target;
}

int PbRpcPartitionClientPrepareRequestResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec PT = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required int64 src = 3;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

    // optional double blockDuration = 4;
    if (has_blockduration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPartitionClientPrepareRequestResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPartitionClientPrepareRequestResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPartitionClientPrepareRequestResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPartitionClientPrepareRequestResult::MergeFrom(const PbRpcPartitionClientPrepareRequestResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pt()) {
      mutable_pt()->::PbPhysicalTimeSpec::MergeFrom(from.pt());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_blockduration()) {
      set_blockduration(from.blockduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPartitionClientPrepareRequestResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPartitionClientPrepareRequestResult::CopyFrom(const PbRpcPartitionClientPrepareRequestResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPartitionClientPrepareRequestResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPartitionClientPrepareRequestResult::Swap(PbRpcPartitionClientPrepareRequestResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pt_, other->pt_);
    std::swap(src_, other->src_);
    std::swap(blockduration_, other->blockduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPartitionClientPrepareRequestResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPartitionClientPrepareRequestResult_descriptor_;
  metadata.reflection = PbRpcPartitionClientPrepareRequestResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
