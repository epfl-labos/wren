// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tx_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbRpcTxPublicGetServerConfigResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTxPublicGetServerConfigResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tx_5fmessages_2eproto() {
  protobuf_AddDesc_tx_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tx_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PbRpcTxPublicGetServerConfigResult_descriptor_ = file->message_type(0);
  static const int PbRpcTxPublicGetServerConfigResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, numpartitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, numreplicasperpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, replicaid_),
  };
  PbRpcTxPublicGetServerConfigResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTxPublicGetServerConfigResult_descriptor_,
      PbRpcTxPublicGetServerConfigResult::default_instance_,
      PbRpcTxPublicGetServerConfigResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTxPublicGetServerConfigResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tx_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTxPublicGetServerConfigResult_descriptor_, &PbRpcTxPublicGetServerConfigResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tx_5fmessages_2eproto() {
  delete PbRpcTxPublicGetServerConfigResult::default_instance_;
  delete PbRpcTxPublicGetServerConfigResult_reflection_;
}

void protobuf_AddDesc_tx_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  ::protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  ::protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021tx_messages.proto\032\027tcc_wren_messages.p"
    "roto\032\032tcc_nb_wren_messages.proto\032\027tcc_cu"
    "re_messages.proto\"\202\001\n\"PbRpcTxPublicGetSe"
    "rverConfigResult\022\021\n\tSucceeded\030\001 \002(\010\022\025\n\rN"
    "umPartitions\030\002 \002(\005\022\037\n\027NumReplicasPerPart"
    "ition\030\003 \002(\005\022\021\n\treplicaId\030\005 \002(\005", 230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tx_messages.proto", &protobuf_RegisterTypes);
  PbRpcTxPublicGetServerConfigResult::default_instance_ = new PbRpcTxPublicGetServerConfigResult();
  PbRpcTxPublicGetServerConfigResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tx_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tx_5fmessages_2eproto {
  StaticDescriptorInitializer_tx_5fmessages_2eproto() {
    protobuf_AddDesc_tx_5fmessages_2eproto();
  }
} static_descriptor_initializer_tx_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRpcTxPublicGetServerConfigResult::kSucceededFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kNumPartitionsFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kNumReplicasPerPartitionFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

PbRpcTxPublicGetServerConfigResult::PbRpcTxPublicGetServerConfigResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTxPublicGetServerConfigResult)
}

void PbRpcTxPublicGetServerConfigResult::InitAsDefaultInstance() {
}

PbRpcTxPublicGetServerConfigResult::PbRpcTxPublicGetServerConfigResult(const PbRpcTxPublicGetServerConfigResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTxPublicGetServerConfigResult)
}

void PbRpcTxPublicGetServerConfigResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  numpartitions_ = 0;
  numreplicasperpartition_ = 0;
  replicaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTxPublicGetServerConfigResult::~PbRpcTxPublicGetServerConfigResult() {
  // @@protoc_insertion_point(destructor:PbRpcTxPublicGetServerConfigResult)
  SharedDtor();
}

void PbRpcTxPublicGetServerConfigResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTxPublicGetServerConfigResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTxPublicGetServerConfigResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTxPublicGetServerConfigResult_descriptor_;
}

const PbRpcTxPublicGetServerConfigResult& PbRpcTxPublicGetServerConfigResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTxPublicGetServerConfigResult* PbRpcTxPublicGetServerConfigResult::default_instance_ = NULL;

PbRpcTxPublicGetServerConfigResult* PbRpcTxPublicGetServerConfigResult::New() const {
  return new PbRpcTxPublicGetServerConfigResult;
}

void PbRpcTxPublicGetServerConfigResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTxPublicGetServerConfigResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(succeeded_, replicaid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTxPublicGetServerConfigResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTxPublicGetServerConfigResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumPartitions;
        break;
      }

      // required int32 NumPartitions = 2;
      case 2: {
        if (tag == 16) {
         parse_NumPartitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpartitions_)));
          set_has_numpartitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumReplicasPerPartition;
        break;
      }

      // required int32 NumReplicasPerPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_NumReplicasPerPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numreplicasperpartition_)));
          set_has_numreplicasperpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_replicaId;
        break;
      }

      // required int32 replicaId = 5;
      case 5: {
        if (tag == 40) {
         parse_replicaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicaid_)));
          set_has_replicaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTxPublicGetServerConfigResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTxPublicGetServerConfigResult)
  return false;
#undef DO_
}

void PbRpcTxPublicGetServerConfigResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTxPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numpartitions(), output);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numreplicasperpartition(), output);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replicaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTxPublicGetServerConfigResult)
}

::google::protobuf::uint8* PbRpcTxPublicGetServerConfigResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTxPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numpartitions(), target);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numreplicasperpartition(), target);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replicaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTxPublicGetServerConfigResult)
  return target;
}

int PbRpcTxPublicGetServerConfigResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int32 NumPartitions = 2;
    if (has_numpartitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpartitions());
    }

    // required int32 NumReplicasPerPartition = 3;
    if (has_numreplicasperpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numreplicasperpartition());
    }

    // required int32 replicaId = 5;
    if (has_replicaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTxPublicGetServerConfigResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTxPublicGetServerConfigResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTxPublicGetServerConfigResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTxPublicGetServerConfigResult::MergeFrom(const PbRpcTxPublicGetServerConfigResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_numpartitions()) {
      set_numpartitions(from.numpartitions());
    }
    if (from.has_numreplicasperpartition()) {
      set_numreplicasperpartition(from.numreplicasperpartition());
    }
    if (from.has_replicaid()) {
      set_replicaid(from.replicaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTxPublicGetServerConfigResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTxPublicGetServerConfigResult::CopyFrom(const PbRpcTxPublicGetServerConfigResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTxPublicGetServerConfigResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PbRpcTxPublicGetServerConfigResult::Swap(PbRpcTxPublicGetServerConfigResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(numpartitions_, other->numpartitions_);
    std::swap(numreplicasperpartition_, other->numreplicasperpartition_);
    std::swap(replicaid_, other->replicaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTxPublicGetServerConfigResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTxPublicGetServerConfigResult_descriptor_;
  metadata.reflection = PbRpcTxPublicGetServerConfigResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
