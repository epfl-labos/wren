// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcc_wren_messages.proto

#ifndef PROTOBUF_tcc_5fwren_5fmessages_2eproto__INCLUDED
#define PROTOBUF_tcc_5fwren_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

class PbRpcTccWrenPublicStartArg;
class PbRpcTccWrenPublicStartResult;
class PbRpcTccWrenKVPublicReadArg;
class PbRpcTccWrenKVPublicReadResult;
class PbRpcTccWrenKVPublicCommitArg;
class PbRpcTccWrenKVPublicCommitResult;
class PbRpcTccWrenKVInternalTxSliceGetArg;
class PbRpcTccWrenKVInternalTxSliceGetResult;
class PbRpcTccWrenKVInternalTxSliceReadKeysArg;
class PbRpcTccWrenKVInternalTxSliceReadKeysResult;
class PbRpcRST;
class PbRpcTccWrenPartitionClientPrepareRequestArg;

// ===================================================================

class PbRpcTccWrenPublicStartArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenPublicStartArg();
  virtual ~PbRpcTccWrenPublicStartArg();

  PbRpcTccWrenPublicStartArg(const PbRpcTccWrenPublicStartArg& from);

  inline PbRpcTccWrenPublicStartArg& operator=(const PbRpcTccWrenPublicStartArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenPublicStartArg& default_instance();

  void Swap(PbRpcTccWrenPublicStartArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenPublicStartArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenPublicStartArg& from);
  void MergeFrom(const PbRpcTccWrenPublicStartArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec LDT = 1;
  inline bool has_ldt() const;
  inline void clear_ldt();
  static const int kLDTFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& ldt() const;
  inline ::PbPhysicalTimeSpec* mutable_ldt();
  inline ::PbPhysicalTimeSpec* release_ldt();
  inline void set_allocated_ldt(::PbPhysicalTimeSpec* ldt);

  // required .PbPhysicalTimeSpec RST = 2;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenPublicStartArg)
 private:
  inline void set_has_ldt();
  inline void clear_has_ldt();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* ldt_;
  ::PbPhysicalTimeSpec* rst_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenPublicStartArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenPublicStartResult : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenPublicStartResult();
  virtual ~PbRpcTccWrenPublicStartResult();

  PbRpcTccWrenPublicStartResult(const PbRpcTccWrenPublicStartResult& from);

  inline PbRpcTccWrenPublicStartResult& operator=(const PbRpcTccWrenPublicStartResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenPublicStartResult& default_instance();

  void Swap(PbRpcTccWrenPublicStartResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenPublicStartResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenPublicStartResult& from);
  void MergeFrom(const PbRpcTccWrenPublicStartResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required int64 ID = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .PbPhysicalTimeSpec RST = 3;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenPublicStartResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::PbPhysicalTimeSpec* rst_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenPublicStartResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVPublicReadArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVPublicReadArg();
  virtual ~PbRpcTccWrenKVPublicReadArg();

  PbRpcTccWrenKVPublicReadArg(const PbRpcTccWrenKVPublicReadArg& from);

  inline PbRpcTccWrenKVPublicReadArg& operator=(const PbRpcTccWrenKVPublicReadArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVPublicReadArg& default_instance();

  void Swap(PbRpcTccWrenKVPublicReadArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVPublicReadArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVPublicReadArg& from);
  void MergeFrom(const PbRpcTccWrenKVPublicReadArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated bytes Key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVPublicReadArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVPublicReadArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVPublicReadResult : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVPublicReadResult();
  virtual ~PbRpcTccWrenKVPublicReadResult();

  PbRpcTccWrenKVPublicReadResult(const PbRpcTccWrenKVPublicReadResult& from);

  inline PbRpcTccWrenKVPublicReadResult& operator=(const PbRpcTccWrenKVPublicReadResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVPublicReadResult& default_instance();

  void Swap(PbRpcTccWrenKVPublicReadResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVPublicReadResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVPublicReadResult& from);
  void MergeFrom(const PbRpcTccWrenKVPublicReadResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated bytes Value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVPublicReadResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVPublicReadResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVPublicCommitArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVPublicCommitArg();
  virtual ~PbRpcTccWrenKVPublicCommitArg();

  PbRpcTccWrenKVPublicCommitArg(const PbRpcTccWrenKVPublicCommitArg& from);

  inline PbRpcTccWrenKVPublicCommitArg& operator=(const PbRpcTccWrenKVPublicCommitArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVPublicCommitArg& default_instance();

  void Swap(PbRpcTccWrenKVPublicCommitArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVPublicCommitArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVPublicCommitArg& from);
  void MergeFrom(const PbRpcTccWrenKVPublicCommitArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated bytes Key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated bytes Value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVPublicCommitArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVPublicCommitArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVPublicCommitResult : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVPublicCommitResult();
  virtual ~PbRpcTccWrenKVPublicCommitResult();

  PbRpcTccWrenKVPublicCommitResult(const PbRpcTccWrenKVPublicCommitResult& from);

  inline PbRpcTccWrenKVPublicCommitResult& operator=(const PbRpcTccWrenKVPublicCommitResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVPublicCommitResult& default_instance();

  void Swap(PbRpcTccWrenKVPublicCommitResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVPublicCommitResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVPublicCommitResult& from);
  void MergeFrom(const PbRpcTccWrenKVPublicCommitResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required .PbPhysicalTimeSpec CT = 2;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ct() const;
  inline ::PbPhysicalTimeSpec* mutable_ct();
  inline ::PbPhysicalTimeSpec* release_ct();
  inline void set_allocated_ct(::PbPhysicalTimeSpec* ct);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVPublicCommitResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_ct();
  inline void clear_has_ct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* ct_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVPublicCommitResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVInternalTxSliceGetArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVInternalTxSliceGetArg();
  virtual ~PbRpcTccWrenKVInternalTxSliceGetArg();

  PbRpcTccWrenKVInternalTxSliceGetArg(const PbRpcTccWrenKVInternalTxSliceGetArg& from);

  inline PbRpcTccWrenKVInternalTxSliceGetArg& operator=(const PbRpcTccWrenKVInternalTxSliceGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVInternalTxSliceGetArg& default_instance();

  void Swap(PbRpcTccWrenKVInternalTxSliceGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVInternalTxSliceGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVInternalTxSliceGetArg& from);
  void MergeFrom(const PbRpcTccWrenKVInternalTxSliceGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required .PbPhysicalTimeSpec LDT = 2;
  inline bool has_ldt() const;
  inline void clear_ldt();
  static const int kLDTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ldt() const;
  inline ::PbPhysicalTimeSpec* mutable_ldt();
  inline ::PbPhysicalTimeSpec* release_ldt();
  inline void set_allocated_ldt(::PbPhysicalTimeSpec* ldt);

  // required .PbPhysicalTimeSpec RST = 3;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // optional int64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVInternalTxSliceGetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ldt();
  inline void clear_has_ldt();
  inline void set_has_rst();
  inline void clear_has_rst();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::PbPhysicalTimeSpec* ldt_;
  ::PbPhysicalTimeSpec* rst_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVInternalTxSliceGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVInternalTxSliceGetResult : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVInternalTxSliceGetResult();
  virtual ~PbRpcTccWrenKVInternalTxSliceGetResult();

  PbRpcTccWrenKVInternalTxSliceGetResult(const PbRpcTccWrenKVInternalTxSliceGetResult& from);

  inline PbRpcTccWrenKVInternalTxSliceGetResult& operator=(const PbRpcTccWrenKVInternalTxSliceGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVInternalTxSliceGetResult& default_instance();

  void Swap(PbRpcTccWrenKVInternalTxSliceGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVInternalTxSliceGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVInternalTxSliceGetResult& from);
  void MergeFrom(const PbRpcTccWrenKVInternalTxSliceGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes GetValue = 2;
  inline bool has_getvalue() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue() const;
  inline void set_getvalue(const ::std::string& value);
  inline void set_getvalue(const char* value);
  inline void set_getvalue(const void* value, size_t size);
  inline ::std::string* mutable_getvalue();
  inline ::std::string* release_getvalue();
  inline void set_allocated_getvalue(::std::string* getvalue);

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // optional double waitedXact = 4;
  inline bool has_waitedxact() const;
  inline void clear_waitedxact();
  static const int kWaitedXactFieldNumber = 4;
  inline double waitedxact() const;
  inline void set_waitedxact(double value);

  // optional int64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVInternalTxSliceGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_getvalue();
  inline void clear_has_getvalue();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_waitedxact();
  inline void clear_has_waitedxact();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* getvalue_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  double waitedxact_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVInternalTxSliceGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVInternalTxSliceReadKeysArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVInternalTxSliceReadKeysArg();
  virtual ~PbRpcTccWrenKVInternalTxSliceReadKeysArg();

  PbRpcTccWrenKVInternalTxSliceReadKeysArg(const PbRpcTccWrenKVInternalTxSliceReadKeysArg& from);

  inline PbRpcTccWrenKVInternalTxSliceReadKeysArg& operator=(const PbRpcTccWrenKVInternalTxSliceReadKeysArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVInternalTxSliceReadKeysArg& default_instance();

  void Swap(PbRpcTccWrenKVInternalTxSliceReadKeysArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVInternalTxSliceReadKeysArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVInternalTxSliceReadKeysArg& from);
  void MergeFrom(const PbRpcTccWrenKVInternalTxSliceReadKeysArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // required .PbPhysicalTimeSpec LDT = 2;
  inline bool has_ldt() const;
  inline void clear_ldt();
  static const int kLDTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ldt() const;
  inline ::PbPhysicalTimeSpec* mutable_ldt();
  inline ::PbPhysicalTimeSpec* release_ldt();
  inline void set_allocated_ldt(::PbPhysicalTimeSpec* ldt);

  // required .PbPhysicalTimeSpec RST = 3;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // optional int64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVInternalTxSliceReadKeysArg)
 private:
  inline void set_has_ldt();
  inline void clear_has_ldt();
  inline void set_has_rst();
  inline void clear_has_rst();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::PbPhysicalTimeSpec* ldt_;
  ::PbPhysicalTimeSpec* rst_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVInternalTxSliceReadKeysArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenKVInternalTxSliceReadKeysResult : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenKVInternalTxSliceReadKeysResult();
  virtual ~PbRpcTccWrenKVInternalTxSliceReadKeysResult();

  PbRpcTccWrenKVInternalTxSliceReadKeysResult(const PbRpcTccWrenKVInternalTxSliceReadKeysResult& from);

  inline PbRpcTccWrenKVInternalTxSliceReadKeysResult& operator=(const PbRpcTccWrenKVInternalTxSliceReadKeysResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenKVInternalTxSliceReadKeysResult& default_instance();

  void Swap(PbRpcTccWrenKVInternalTxSliceReadKeysResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenKVInternalTxSliceReadKeysResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenKVInternalTxSliceReadKeysResult& from);
  void MergeFrom(const PbRpcTccWrenKVInternalTxSliceReadKeysResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated bytes Value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // optional double waitedXact = 4;
  inline bool has_waitedxact() const;
  inline void clear_waitedxact();
  static const int kWaitedXactFieldNumber = 4;
  inline double waitedxact() const;
  inline void set_waitedxact(double value);

  // optional int64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenKVInternalTxSliceReadKeysResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_waitedxact();
  inline void clear_has_waitedxact();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  double waitedxact_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenKVInternalTxSliceReadKeysResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcRST : public ::google::protobuf::Message {
 public:
  PbRpcRST();
  virtual ~PbRpcRST();

  PbRpcRST(const PbRpcRST& from);

  inline PbRpcRST& operator=(const PbRpcRST& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcRST& default_instance();

  void Swap(PbRpcRST* other);

  // implements Message ----------------------------------------------

  PbRpcRST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcRST& from);
  void MergeFrom(const PbRpcRST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& time() const;
  inline ::PbPhysicalTimeSpec* mutable_time();
  inline ::PbPhysicalTimeSpec* release_time();
  inline void set_allocated_time(::PbPhysicalTimeSpec* time);

  // optional int32 SrcPartition = 2;
  inline bool has_srcpartition() const;
  inline void clear_srcpartition();
  static const int kSrcPartitionFieldNumber = 2;
  inline ::google::protobuf::int32 srcpartition() const;
  inline void set_srcpartition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbRpcRST)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_srcpartition();
  inline void clear_has_srcpartition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* time_;
  ::google::protobuf::int32 srcpartition_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcRST* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccWrenPartitionClientPrepareRequestArg : public ::google::protobuf::Message {
 public:
  PbRpcTccWrenPartitionClientPrepareRequestArg();
  virtual ~PbRpcTccWrenPartitionClientPrepareRequestArg();

  PbRpcTccWrenPartitionClientPrepareRequestArg(const PbRpcTccWrenPartitionClientPrepareRequestArg& from);

  inline PbRpcTccWrenPartitionClientPrepareRequestArg& operator=(const PbRpcTccWrenPartitionClientPrepareRequestArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccWrenPartitionClientPrepareRequestArg& default_instance();

  void Swap(PbRpcTccWrenPartitionClientPrepareRequestArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccWrenPartitionClientPrepareRequestArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccWrenPartitionClientPrepareRequestArg& from);
  void MergeFrom(const PbRpcTccWrenPartitionClientPrepareRequestArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .PbPhysicalTimeSpec LDT = 2;
  inline bool has_ldt() const;
  inline void clear_ldt();
  static const int kLDTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ldt() const;
  inline ::PbPhysicalTimeSpec* mutable_ldt();
  inline ::PbPhysicalTimeSpec* release_ldt();
  inline void set_allocated_ldt(::PbPhysicalTimeSpec* ldt);

  // required .PbPhysicalTimeSpec RST = 3;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& rst() const;
  inline ::PbPhysicalTimeSpec* mutable_rst();
  inline ::PbPhysicalTimeSpec* release_rst();
  inline void set_allocated_rst(::PbPhysicalTimeSpec* rst);

  // repeated bytes Key = 4;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated bytes Value = 5;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // required int64 src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccWrenPartitionClientPrepareRequestArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ldt();
  inline void clear_has_ldt();
  inline void set_has_rst();
  inline void clear_has_rst();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::PbPhysicalTimeSpec* ldt_;
  ::PbPhysicalTimeSpec* rst_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fwren_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fwren_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccWrenPartitionClientPrepareRequestArg* default_instance_;
};
// ===================================================================


// ===================================================================

// PbRpcTccWrenPublicStartArg

// required .PbPhysicalTimeSpec LDT = 1;
inline bool PbRpcTccWrenPublicStartArg::has_ldt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenPublicStartArg::set_has_ldt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenPublicStartArg::clear_has_ldt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenPublicStartArg::clear_ldt() {
  if (ldt_ != NULL) ldt_->::PbPhysicalTimeSpec::Clear();
  clear_has_ldt();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenPublicStartArg::ldt() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPublicStartArg.LDT)
  return ldt_ != NULL ? *ldt_ : *default_instance_->ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartArg::mutable_ldt() {
  set_has_ldt();
  if (ldt_ == NULL) ldt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPublicStartArg.LDT)
  return ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartArg::release_ldt() {
  clear_has_ldt();
  ::PbPhysicalTimeSpec* temp = ldt_;
  ldt_ = NULL;
  return temp;
}
inline void PbRpcTccWrenPublicStartArg::set_allocated_ldt(::PbPhysicalTimeSpec* ldt) {
  delete ldt_;
  ldt_ = ldt;
  if (ldt) {
    set_has_ldt();
  } else {
    clear_has_ldt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenPublicStartArg.LDT)
}

// required .PbPhysicalTimeSpec RST = 2;
inline bool PbRpcTccWrenPublicStartArg::has_rst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenPublicStartArg::set_has_rst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenPublicStartArg::clear_has_rst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenPublicStartArg::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenPublicStartArg::rst() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPublicStartArg.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartArg::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPublicStartArg.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartArg::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbRpcTccWrenPublicStartArg::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenPublicStartArg.RST)
}

// -------------------------------------------------------------------

// PbRpcTccWrenPublicStartResult

// required bool Succeeded = 1;
inline bool PbRpcTccWrenPublicStartResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenPublicStartResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenPublicStartResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenPublicStartResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccWrenPublicStartResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPublicStartResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccWrenPublicStartResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPublicStartResult.Succeeded)
}

// required int64 ID = 2;
inline bool PbRpcTccWrenPublicStartResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenPublicStartResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenPublicStartResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenPublicStartResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenPublicStartResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPublicStartResult.ID)
  return id_;
}
inline void PbRpcTccWrenPublicStartResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPublicStartResult.ID)
}

// required .PbPhysicalTimeSpec RST = 3;
inline bool PbRpcTccWrenPublicStartResult::has_rst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenPublicStartResult::set_has_rst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenPublicStartResult::clear_has_rst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenPublicStartResult::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenPublicStartResult::rst() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPublicStartResult.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartResult::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPublicStartResult.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPublicStartResult::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbRpcTccWrenPublicStartResult::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenPublicStartResult.RST)
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVPublicReadArg

// required int64 ID = 1;
inline bool PbRpcTccWrenKVPublicReadArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVPublicReadArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVPublicReadArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVPublicReadArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVPublicReadArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicReadArg.ID)
  return id_;
}
inline void PbRpcTccWrenKVPublicReadArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicReadArg.ID)
}

// repeated bytes Key = 2;
inline int PbRpcTccWrenKVPublicReadArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccWrenKVPublicReadArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVPublicReadArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicReadArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVPublicReadArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVPublicReadArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccWrenKVPublicReadArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicReadArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVPublicReadArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVPublicReadArg.Key)
}
inline void PbRpcTccWrenKVPublicReadArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVPublicReadArg.Key)
}
inline ::std::string* PbRpcTccWrenKVPublicReadArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccWrenKVPublicReadArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVPublicReadArg.Key)
}
inline void PbRpcTccWrenKVPublicReadArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVPublicReadArg.Key)
}
inline void PbRpcTccWrenKVPublicReadArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVPublicReadArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVPublicReadArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVPublicReadArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVPublicReadArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVPublicReadArg.Key)
  return &key_;
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVPublicReadResult

// required bool Succeeded = 1;
inline bool PbRpcTccWrenKVPublicReadResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVPublicReadResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVPublicReadResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVPublicReadResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccWrenKVPublicReadResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicReadResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccWrenKVPublicReadResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicReadResult.Succeeded)
}

// repeated bytes Value = 2;
inline int PbRpcTccWrenKVPublicReadResult::value_size() const {
  return value_.size();
}
inline void PbRpcTccWrenKVPublicReadResult::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVPublicReadResult::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicReadResult.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVPublicReadResult::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVPublicReadResult.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccWrenKVPublicReadResult::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicReadResult.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVPublicReadResult::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVPublicReadResult.Value)
}
inline void PbRpcTccWrenKVPublicReadResult::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVPublicReadResult.Value)
}
inline ::std::string* PbRpcTccWrenKVPublicReadResult::add_value() {
  return value_.Add();
}
inline void PbRpcTccWrenKVPublicReadResult::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVPublicReadResult.Value)
}
inline void PbRpcTccWrenKVPublicReadResult::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVPublicReadResult.Value)
}
inline void PbRpcTccWrenKVPublicReadResult::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVPublicReadResult.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVPublicReadResult::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVPublicReadResult.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVPublicReadResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVPublicReadResult.Value)
  return &value_;
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVPublicCommitArg

// required int64 ID = 1;
inline bool PbRpcTccWrenKVPublicCommitArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVPublicCommitArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVPublicCommitArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVPublicCommitArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVPublicCommitArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicCommitArg.ID)
  return id_;
}
inline void PbRpcTccWrenKVPublicCommitArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicCommitArg.ID)
}

// repeated bytes Key = 2;
inline int PbRpcTccWrenKVPublicCommitArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccWrenKVPublicCommitArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVPublicCommitArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicCommitArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVPublicCommitArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVPublicCommitArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccWrenKVPublicCommitArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicCommitArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVPublicCommitArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVPublicCommitArg.Key)
}
inline void PbRpcTccWrenKVPublicCommitArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVPublicCommitArg.Key)
}
inline ::std::string* PbRpcTccWrenKVPublicCommitArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccWrenKVPublicCommitArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVPublicCommitArg.Key)
}
inline void PbRpcTccWrenKVPublicCommitArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVPublicCommitArg.Key)
}
inline void PbRpcTccWrenKVPublicCommitArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVPublicCommitArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVPublicCommitArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVPublicCommitArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVPublicCommitArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVPublicCommitArg.Key)
  return &key_;
}

// repeated bytes Value = 3;
inline int PbRpcTccWrenKVPublicCommitArg::value_size() const {
  return value_.size();
}
inline void PbRpcTccWrenKVPublicCommitArg::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVPublicCommitArg::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicCommitArg.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVPublicCommitArg::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVPublicCommitArg.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccWrenKVPublicCommitArg::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicCommitArg.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVPublicCommitArg::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVPublicCommitArg.Value)
}
inline void PbRpcTccWrenKVPublicCommitArg::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVPublicCommitArg.Value)
}
inline ::std::string* PbRpcTccWrenKVPublicCommitArg::add_value() {
  return value_.Add();
}
inline void PbRpcTccWrenKVPublicCommitArg::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVPublicCommitArg.Value)
}
inline void PbRpcTccWrenKVPublicCommitArg::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVPublicCommitArg.Value)
}
inline void PbRpcTccWrenKVPublicCommitArg::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVPublicCommitArg.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVPublicCommitArg::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVPublicCommitArg.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVPublicCommitArg::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVPublicCommitArg.Value)
  return &value_;
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVPublicCommitResult

// required bool Succeeded = 1;
inline bool PbRpcTccWrenKVPublicCommitResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVPublicCommitResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVPublicCommitResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVPublicCommitResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccWrenKVPublicCommitResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicCommitResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccWrenKVPublicCommitResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVPublicCommitResult.Succeeded)
}

// required .PbPhysicalTimeSpec CT = 2;
inline bool PbRpcTccWrenKVPublicCommitResult::has_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenKVPublicCommitResult::set_has_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenKVPublicCommitResult::clear_has_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenKVPublicCommitResult::clear_ct() {
  if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
  clear_has_ct();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenKVPublicCommitResult::ct() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVPublicCommitResult.CT)
  return ct_ != NULL ? *ct_ : *default_instance_->ct_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVPublicCommitResult::mutable_ct() {
  set_has_ct();
  if (ct_ == NULL) ct_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVPublicCommitResult.CT)
  return ct_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVPublicCommitResult::release_ct() {
  clear_has_ct();
  ::PbPhysicalTimeSpec* temp = ct_;
  ct_ = NULL;
  return temp;
}
inline void PbRpcTccWrenKVPublicCommitResult::set_allocated_ct(::PbPhysicalTimeSpec* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    set_has_ct();
  } else {
    clear_has_ct();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVPublicCommitResult.CT)
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVInternalTxSliceGetArg

// required bytes Key = 1;
inline bool PbRpcTccWrenKVInternalTxSliceGetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcTccWrenKVInternalTxSliceGetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
  return *key_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceGetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
  return key_;
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceGetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceGetArg.Key)
}

// required .PbPhysicalTimeSpec LDT = 2;
inline bool PbRpcTccWrenKVInternalTxSliceGetArg::has_ldt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_has_ldt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_has_ldt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_ldt() {
  if (ldt_ != NULL) ldt_->::PbPhysicalTimeSpec::Clear();
  clear_has_ldt();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenKVInternalTxSliceGetArg::ldt() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetArg.LDT)
  return ldt_ != NULL ? *ldt_ : *default_instance_->ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceGetArg::mutable_ldt() {
  set_has_ldt();
  if (ldt_ == NULL) ldt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceGetArg.LDT)
  return ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceGetArg::release_ldt() {
  clear_has_ldt();
  ::PbPhysicalTimeSpec* temp = ldt_;
  ldt_ = NULL;
  return temp;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_allocated_ldt(::PbPhysicalTimeSpec* ldt) {
  delete ldt_;
  ldt_ = ldt;
  if (ldt) {
    set_has_ldt();
  } else {
    clear_has_ldt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceGetArg.LDT)
}

// required .PbPhysicalTimeSpec RST = 3;
inline bool PbRpcTccWrenKVInternalTxSliceGetArg::has_rst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_has_rst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_has_rst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenKVInternalTxSliceGetArg::rst() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetArg.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceGetArg::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceGetArg.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceGetArg::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceGetArg.RST)
}

// optional int64 id = 4;
inline bool PbRpcTccWrenKVInternalTxSliceGetArg::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceGetArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetArg.id)
  return id_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetArg.id)
}

// optional int64 src = 5;
inline bool PbRpcTccWrenKVInternalTxSliceGetArg::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceGetArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetArg.src)
  return src_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetArg.src)
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVInternalTxSliceGetResult

// required bool Succeeded = 1;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.Succeeded)
}

// required bytes GetValue = 2;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_getvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_getvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_getvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_getvalue() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_->clear();
  }
  clear_has_getvalue();
}
inline const ::std::string& PbRpcTccWrenKVInternalTxSliceGetResult::getvalue() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
  return *getvalue_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_getvalue(const ::std::string& value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_getvalue(const char* value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_getvalue(const void* value, size_t size) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceGetResult::mutable_getvalue() {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
  return getvalue_;
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceGetResult::release_getvalue() {
  clear_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getvalue_;
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_allocated_getvalue(::std::string* getvalue) {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (getvalue) {
    set_has_getvalue();
    getvalue_ = getvalue;
  } else {
    clear_has_getvalue();
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceGetResult.GetValue)
}

// optional int32 SrcReplica = 3;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcTccWrenKVInternalTxSliceGetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.SrcReplica)
}

// optional double waitedXact = 4;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_waitedxact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_waitedxact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_waitedxact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_waitedxact() {
  waitedxact_ = 0;
  clear_has_waitedxact();
}
inline double PbRpcTccWrenKVInternalTxSliceGetResult::waitedxact() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.waitedXact)
  return waitedxact_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_waitedxact(double value) {
  set_has_waitedxact();
  waitedxact_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.waitedXact)
}

// optional int64 id = 5;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceGetResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.id)
  return id_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.id)
}

// optional int64 src = 6;
inline bool PbRpcTccWrenKVInternalTxSliceGetResult::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceGetResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceGetResult.src)
  return src_;
}
inline void PbRpcTccWrenKVInternalTxSliceGetResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceGetResult.src)
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVInternalTxSliceReadKeysArg

// repeated bytes Key = 1;
inline int PbRpcTccWrenKVInternalTxSliceReadKeysArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVInternalTxSliceReadKeysArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceReadKeysArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceReadKeysArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVInternalTxSliceReadKeysArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVInternalTxSliceReadKeysArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVInternalTxSliceReadKeysArg.Key)
  return &key_;
}

// required .PbPhysicalTimeSpec LDT = 2;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysArg::has_ldt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_has_ldt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_has_ldt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_ldt() {
  if (ldt_ != NULL) ldt_->::PbPhysicalTimeSpec::Clear();
  clear_has_ldt();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenKVInternalTxSliceReadKeysArg::ldt() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysArg.LDT)
  return ldt_ != NULL ? *ldt_ : *default_instance_->ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceReadKeysArg::mutable_ldt() {
  set_has_ldt();
  if (ldt_ == NULL) ldt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceReadKeysArg.LDT)
  return ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceReadKeysArg::release_ldt() {
  clear_has_ldt();
  ::PbPhysicalTimeSpec* temp = ldt_;
  ldt_ = NULL;
  return temp;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_allocated_ldt(::PbPhysicalTimeSpec* ldt) {
  delete ldt_;
  ldt_ = ldt;
  if (ldt) {
    set_has_ldt();
  } else {
    clear_has_ldt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceReadKeysArg.LDT)
}

// required .PbPhysicalTimeSpec RST = 3;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysArg::has_rst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_has_rst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_has_rst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenKVInternalTxSliceReadKeysArg::rst() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysArg.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceReadKeysArg::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceReadKeysArg.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenKVInternalTxSliceReadKeysArg::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenKVInternalTxSliceReadKeysArg.RST)
}

// optional int64 id = 4;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysArg::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceReadKeysArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysArg.id)
  return id_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysArg.id)
}

// optional int64 src = 5;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysArg::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceReadKeysArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysArg.src)
  return src_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysArg.src)
}

// -------------------------------------------------------------------

// PbRpcTccWrenKVInternalTxSliceReadKeysResult

// required bool Succeeded = 1;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Succeeded)
}

// repeated bytes Value = 2;
inline int PbRpcTccWrenKVInternalTxSliceReadKeysResult::value_size() const {
  return value_.size();
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccWrenKVInternalTxSliceReadKeysResult::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceReadKeysResult::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
}
inline ::std::string* PbRpcTccWrenKVInternalTxSliceReadKeysResult::add_value() {
  return value_.Add();
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenKVInternalTxSliceReadKeysResult::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenKVInternalTxSliceReadKeysResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenKVInternalTxSliceReadKeysResult.Value)
  return &value_;
}

// optional int32 SrcReplica = 3;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcTccWrenKVInternalTxSliceReadKeysResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.SrcReplica)
}

// optional double waitedXact = 4;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::has_waitedxact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_has_waitedxact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_has_waitedxact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_waitedxact() {
  waitedxact_ = 0;
  clear_has_waitedxact();
}
inline double PbRpcTccWrenKVInternalTxSliceReadKeysResult::waitedxact() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.waitedXact)
  return waitedxact_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_waitedxact(double value) {
  set_has_waitedxact();
  waitedxact_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.waitedXact)
}

// optional int64 id = 5;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceReadKeysResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.id)
  return id_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.id)
}

// optional int64 src = 6;
inline bool PbRpcTccWrenKVInternalTxSliceReadKeysResult::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccWrenKVInternalTxSliceReadKeysResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenKVInternalTxSliceReadKeysResult.src)
  return src_;
}
inline void PbRpcTccWrenKVInternalTxSliceReadKeysResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenKVInternalTxSliceReadKeysResult.src)
}

// -------------------------------------------------------------------

// PbRpcRST

// required .PbPhysicalTimeSpec Time = 1;
inline bool PbRpcRST::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcRST::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcRST::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcRST::clear_time() {
  if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
  clear_has_time();
}
inline const ::PbPhysicalTimeSpec& PbRpcRST::time() const {
  // @@protoc_insertion_point(field_get:PbRpcRST.Time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::PbPhysicalTimeSpec* PbRpcRST::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcRST.Time)
  return time_;
}
inline ::PbPhysicalTimeSpec* PbRpcRST::release_time() {
  clear_has_time();
  ::PbPhysicalTimeSpec* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PbRpcRST::set_allocated_time(::PbPhysicalTimeSpec* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcRST.Time)
}

// optional int32 SrcPartition = 2;
inline bool PbRpcRST::has_srcpartition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcRST::set_has_srcpartition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcRST::clear_has_srcpartition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcRST::clear_srcpartition() {
  srcpartition_ = 0;
  clear_has_srcpartition();
}
inline ::google::protobuf::int32 PbRpcRST::srcpartition() const {
  // @@protoc_insertion_point(field_get:PbRpcRST.SrcPartition)
  return srcpartition_;
}
inline void PbRpcRST::set_srcpartition(::google::protobuf::int32 value) {
  set_has_srcpartition();
  srcpartition_ = value;
  // @@protoc_insertion_point(field_set:PbRpcRST.SrcPartition)
}

// -------------------------------------------------------------------

// PbRpcTccWrenPartitionClientPrepareRequestArg

// required int64 id = 1;
inline bool PbRpcTccWrenPartitionClientPrepareRequestArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccWrenPartitionClientPrepareRequestArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.id)
  return id_;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPartitionClientPrepareRequestArg.id)
}

// required .PbPhysicalTimeSpec LDT = 2;
inline bool PbRpcTccWrenPartitionClientPrepareRequestArg::has_ldt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_has_ldt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_has_ldt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_ldt() {
  if (ldt_ != NULL) ldt_->::PbPhysicalTimeSpec::Clear();
  clear_has_ldt();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenPartitionClientPrepareRequestArg::ldt() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.LDT)
  return ldt_ != NULL ? *ldt_ : *default_instance_->ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_ldt() {
  set_has_ldt();
  if (ldt_ == NULL) ldt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPartitionClientPrepareRequestArg.LDT)
  return ldt_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPartitionClientPrepareRequestArg::release_ldt() {
  clear_has_ldt();
  ::PbPhysicalTimeSpec* temp = ldt_;
  ldt_ = NULL;
  return temp;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_allocated_ldt(::PbPhysicalTimeSpec* ldt) {
  delete ldt_;
  ldt_ = ldt;
  if (ldt) {
    set_has_ldt();
  } else {
    clear_has_ldt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenPartitionClientPrepareRequestArg.LDT)
}

// required .PbPhysicalTimeSpec RST = 3;
inline bool PbRpcTccWrenPartitionClientPrepareRequestArg::has_rst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_has_rst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_has_rst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_rst() {
  if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
  clear_has_rst();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccWrenPartitionClientPrepareRequestArg::rst() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.RST)
  return rst_ != NULL ? *rst_ : *default_instance_->rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_rst() {
  set_has_rst();
  if (rst_ == NULL) rst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPartitionClientPrepareRequestArg.RST)
  return rst_;
}
inline ::PbPhysicalTimeSpec* PbRpcTccWrenPartitionClientPrepareRequestArg::release_rst() {
  clear_has_rst();
  ::PbPhysicalTimeSpec* temp = rst_;
  rst_ = NULL;
  return temp;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_allocated_rst(::PbPhysicalTimeSpec* rst) {
  delete rst_;
  rst_ = rst;
  if (rst) {
    set_has_rst();
  } else {
    clear_has_rst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccWrenPartitionClientPrepareRequestArg.RST)
}

// repeated bytes Key = 4;
inline int PbRpcTccWrenPartitionClientPrepareRequestArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccWrenPartitionClientPrepareRequestArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
}
inline ::std::string* PbRpcTccWrenPartitionClientPrepareRequestArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenPartitionClientPrepareRequestArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenPartitionClientPrepareRequestArg.Key)
  return &key_;
}

// repeated bytes Value = 5;
inline int PbRpcTccWrenPartitionClientPrepareRequestArg::value_size() const {
  return value_.size();
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccWrenPartitionClientPrepareRequestArg::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
}
inline ::std::string* PbRpcTccWrenPartitionClientPrepareRequestArg::add_value() {
  return value_.Add();
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccWrenPartitionClientPrepareRequestArg::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccWrenPartitionClientPrepareRequestArg::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccWrenPartitionClientPrepareRequestArg.Value)
  return &value_;
}

// required int64 src = 6;
inline bool PbRpcTccWrenPartitionClientPrepareRequestArg::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccWrenPartitionClientPrepareRequestArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccWrenPartitionClientPrepareRequestArg.src)
  return src_;
}
inline void PbRpcTccWrenPartitionClientPrepareRequestArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccWrenPartitionClientPrepareRequestArg.src)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcc_5fwren_5fmessages_2eproto__INCLUDED
