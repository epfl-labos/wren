// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_messages.proto

#ifndef PROTOBUF_rpc_5fmessages_2eproto__INCLUDED
#define PROTOBUF_rpc_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_5fmessages_2eproto();
void protobuf_AssignDesc_rpc_5fmessages_2eproto();
void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

class PbRpcRequest;
class PbRpcReply;
class PbRpcEchoTest;
class PbVersionVector;
class PbPhysicalTimeSpec;
class PbRpcKVPublicGetServerConfigResult;
class PbRpcKVPublicGetArg;
class PbRpcKVPublicGetResult;
class PbRpcKVPublicSetArg;
class PbRpcKVPublicSetResult;
class PbRpcKVPublicTxGetArg;
class PbRpcKVPublicTxGetResult;
class PbRpcKVPublicShowArg;
class PbRpcKVPublicShowResult;
class PbRpcKVInternalGetArg;
class PbRpcKVInternalGetResult;
class PbRpcKVInternalSetArg;
class PbRpcKVInternalSetResult;
class PbRpcKVInternalTxSliceGetArg;
class PbRpcKVInternalTxSliceGetResult;
class PbRpcKVInternalShowItemArg;
class PbRpcKVInternalShowItemResult;
class PbUpdatedItemVersion;
class PbRpcReplicationArg;
class PbRpcHeartbeat;
class PbRpcLST;
class PbRpcGST;
class PbRpcGSTReq;
class PbRpcPVV;
class PbRpcGSV;
class PbRpcGroupServiceResult;
class PbPartition;
class PbRegisteredPartitions;
class PbRpcKVInternalPrepareReplyResult;
class PbRpCommitRequestArg;
class PbRpcKVPublicCommitArg;
class PbRpcKVPublicCommitResult;
class PbRpcPartitionClientPrepareRequestResult;

// ===================================================================

class PbRpcRequest : public ::google::protobuf::Message {
 public:
  PbRpcRequest();
  virtual ~PbRpcRequest();

  PbRpcRequest(const PbRpcRequest& from);

  inline PbRpcRequest& operator=(const PbRpcRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcRequest& default_instance();

  void Swap(PbRpcRequest* other);

  // implements Message ----------------------------------------------

  PbRpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcRequest& from);
  void MergeFrom(const PbRpcRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 MsgId = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // required int32 MethodId = 2;
  inline bool has_methodid() const;
  inline void clear_methodid();
  static const int kMethodIdFieldNumber = 2;
  inline ::google::protobuf::int32 methodid() const;
  inline void set_methodid(::google::protobuf::int32 value);

  // optional bytes Arguments = 3;
  inline bool has_arguments() const;
  inline void clear_arguments();
  static const int kArgumentsFieldNumber = 3;
  inline const ::std::string& arguments() const;
  inline void set_arguments(const ::std::string& value);
  inline void set_arguments(const char* value);
  inline void set_arguments(const void* value, size_t size);
  inline ::std::string* mutable_arguments();
  inline ::std::string* release_arguments();
  inline void set_allocated_arguments(::std::string* arguments);

  // @@protoc_insertion_point(class_scope:PbRpcRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_methodid();
  inline void clear_has_methodid();
  inline void set_has_arguments();
  inline void clear_has_arguments();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 methodid_;
  ::std::string* arguments_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcReply : public ::google::protobuf::Message {
 public:
  PbRpcReply();
  virtual ~PbRpcReply();

  PbRpcReply(const PbRpcReply& from);

  inline PbRpcReply& operator=(const PbRpcReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcReply& default_instance();

  void Swap(PbRpcReply* other);

  // implements Message ----------------------------------------------

  PbRpcReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcReply& from);
  void MergeFrom(const PbRpcReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 MsgId = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional bytes Results = 2;
  inline bool has_results() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 2;
  inline const ::std::string& results() const;
  inline void set_results(const ::std::string& value);
  inline void set_results(const char* value);
  inline void set_results(const void* value, size_t size);
  inline ::std::string* mutable_results();
  inline ::std::string* release_results();
  inline void set_allocated_results(::std::string* results);

  // @@protoc_insertion_point(class_scope:PbRpcReply)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_results();
  inline void clear_has_results();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* results_;
  ::google::protobuf::int32 msgid_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcReply* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcEchoTest : public ::google::protobuf::Message {
 public:
  PbRpcEchoTest();
  virtual ~PbRpcEchoTest();

  PbRpcEchoTest(const PbRpcEchoTest& from);

  inline PbRpcEchoTest& operator=(const PbRpcEchoTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcEchoTest& default_instance();

  void Swap(PbRpcEchoTest* other);

  // implements Message ----------------------------------------------

  PbRpcEchoTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcEchoTest& from);
  void MergeFrom(const PbRpcEchoTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:PbRpcEchoTest)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcEchoTest* default_instance_;
};
// -------------------------------------------------------------------

class PbVersionVector : public ::google::protobuf::Message {
 public:
  PbVersionVector();
  virtual ~PbVersionVector();

  PbVersionVector(const PbVersionVector& from);

  inline PbVersionVector& operator=(const PbVersionVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbVersionVector& default_instance();

  void Swap(PbVersionVector* other);

  // implements Message ----------------------------------------------

  PbVersionVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbVersionVector& from);
  void MergeFrom(const PbVersionVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed64 Version = 1;
  inline int version_size() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int64 version(int index) const;
  inline void set_version(int index, ::google::protobuf::int64 value);
  inline void add_version(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      version() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_version();

  // @@protoc_insertion_point(class_scope:PbVersionVector)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > version_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbVersionVector* default_instance_;
};
// -------------------------------------------------------------------

class PbPhysicalTimeSpec : public ::google::protobuf::Message {
 public:
  PbPhysicalTimeSpec();
  virtual ~PbPhysicalTimeSpec();

  PbPhysicalTimeSpec(const PbPhysicalTimeSpec& from);

  inline PbPhysicalTimeSpec& operator=(const PbPhysicalTimeSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbPhysicalTimeSpec& default_instance();

  void Swap(PbPhysicalTimeSpec* other);

  // implements Message ----------------------------------------------

  PbPhysicalTimeSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbPhysicalTimeSpec& from);
  void MergeFrom(const PbPhysicalTimeSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 Seconds = 1;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  inline ::google::protobuf::int64 seconds() const;
  inline void set_seconds(::google::protobuf::int64 value);

  // required int64 NanoSeconds = 2;
  inline bool has_nanoseconds() const;
  inline void clear_nanoseconds();
  static const int kNanoSecondsFieldNumber = 2;
  inline ::google::protobuf::int64 nanoseconds() const;
  inline void set_nanoseconds(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbPhysicalTimeSpec)
 private:
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_nanoseconds();
  inline void clear_has_nanoseconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::int64 nanoseconds_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbPhysicalTimeSpec* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicGetServerConfigResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicGetServerConfigResult();
  virtual ~PbRpcKVPublicGetServerConfigResult();

  PbRpcKVPublicGetServerConfigResult(const PbRpcKVPublicGetServerConfigResult& from);

  inline PbRpcKVPublicGetServerConfigResult& operator=(const PbRpcKVPublicGetServerConfigResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicGetServerConfigResult& default_instance();

  void Swap(PbRpcKVPublicGetServerConfigResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicGetServerConfigResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicGetServerConfigResult& from);
  void MergeFrom(const PbRpcKVPublicGetServerConfigResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required int32 NumPartitions = 2;
  inline bool has_numpartitions() const;
  inline void clear_numpartitions();
  static const int kNumPartitionsFieldNumber = 2;
  inline ::google::protobuf::int32 numpartitions() const;
  inline void set_numpartitions(::google::protobuf::int32 value);

  // required int32 NumReplicasPerPartition = 3;
  inline bool has_numreplicasperpartition() const;
  inline void clear_numreplicasperpartition();
  static const int kNumReplicasPerPartitionFieldNumber = 3;
  inline ::google::protobuf::int32 numreplicasperpartition() const;
  inline void set_numreplicasperpartition(::google::protobuf::int32 value);

  // required bool OptimisticMode = 4;
  inline bool has_optimisticmode() const;
  inline void clear_optimisticmode();
  static const int kOptimisticModeFieldNumber = 4;
  inline bool optimisticmode() const;
  inline void set_optimisticmode(bool value);

  // required int32 replicaId = 5;
  inline bool has_replicaid() const;
  inline void clear_replicaid();
  static const int kReplicaIdFieldNumber = 5;
  inline ::google::protobuf::int32 replicaid() const;
  inline void set_replicaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicGetServerConfigResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_numpartitions();
  inline void clear_has_numpartitions();
  inline void set_has_numreplicasperpartition();
  inline void clear_has_numreplicasperpartition();
  inline void set_has_optimisticmode();
  inline void clear_has_optimisticmode();
  inline void set_has_replicaid();
  inline void clear_has_replicaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numpartitions_;
  bool succeeded_;
  bool optimisticmode_;
  ::google::protobuf::int32 numreplicasperpartition_;
  ::google::protobuf::int32 replicaid_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicGetServerConfigResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicGetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicGetArg();
  virtual ~PbRpcKVPublicGetArg();

  PbRpcKVPublicGetArg(const PbRpcKVPublicGetArg& from);

  inline PbRpcKVPublicGetArg& operator=(const PbRpcKVPublicGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicGetArg& default_instance();

  void Swap(PbRpcKVPublicGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicGetArg& from);
  void MergeFrom(const PbRpcKVPublicGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .PbPhysicalTimeSpec GST = 2;
  inline bool has_gst() const;
  inline void clear_gst();
  static const int kGSTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& gst() const;
  inline ::PbPhysicalTimeSpec* mutable_gst();
  inline ::PbPhysicalTimeSpec* release_gst();
  inline void set_allocated_gst(::PbPhysicalTimeSpec* gst);

  // optional .PbPhysicalTimeSpec minLST = 3;
  inline bool has_minlst() const;
  inline void clear_minlst();
  static const int kMinLSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& minlst() const;
  inline ::PbPhysicalTimeSpec* mutable_minlst();
  inline ::PbPhysicalTimeSpec* release_minlst();
  inline void set_allocated_minlst(::PbPhysicalTimeSpec* minlst);

  // repeated .PbPhysicalTimeSpec NDV = 4;
  inline int ndv_size() const;
  inline void clear_ndv();
  static const int kNDVFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& ndv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_ndv(int index);
  inline ::PbPhysicalTimeSpec* add_ndv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      ndv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_ndv();

  // repeated .PbPhysicalTimeSpec GSV = 5;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicGetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_gst();
  inline void clear_has_gst();
  inline void set_has_minlst();
  inline void clear_has_minlst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::PbPhysicalTimeSpec* gst_;
  ::PbPhysicalTimeSpec* minlst_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > ndv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicGetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicGetResult();
  virtual ~PbRpcKVPublicGetResult();

  PbRpcKVPublicGetResult(const PbRpcKVPublicGetResult& from);

  inline PbRpcKVPublicGetResult& operator=(const PbRpcKVPublicGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicGetResult& default_instance();

  void Swap(PbRpcKVPublicGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicGetResult& from);
  void MergeFrom(const PbRpcKVPublicGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes GetValue = 2;
  inline bool has_getvalue() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue() const;
  inline void set_getvalue(const ::std::string& value);
  inline void set_getvalue(const char* value);
  inline void set_getvalue(const void* value, size_t size);
  inline ::std::string* mutable_getvalue();
  inline ::std::string* release_getvalue();
  inline void set_allocated_getvalue(::std::string* getvalue);

  // optional .PbPhysicalTimeSpec DT = 3;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional .PbPhysicalTimeSpec GST = 4;
  inline bool has_gst() const;
  inline void clear_gst();
  static const int kGSTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& gst() const;
  inline ::PbPhysicalTimeSpec* mutable_gst();
  inline ::PbPhysicalTimeSpec* release_gst();
  inline void set_allocated_gst(::PbPhysicalTimeSpec* gst);

  // optional .PbPhysicalTimeSpec DUT = 5;
  inline bool has_dut() const;
  inline void clear_dut();
  static const int kDUTFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dut() const;
  inline ::PbPhysicalTimeSpec* mutable_dut();
  inline ::PbPhysicalTimeSpec* release_dut();
  inline void set_allocated_dut(::PbPhysicalTimeSpec* dut);

  // optional bool Blocked = 6;
  inline bool has_blocked() const;
  inline void clear_blocked();
  static const int kBlockedFieldNumber = 6;
  inline bool blocked() const;
  inline void set_blocked(bool value);

  // optional bytes MinLSTKey = 7;
  inline bool has_minlstkey() const;
  inline void clear_minlstkey();
  static const int kMinLSTKeyFieldNumber = 7;
  inline const ::std::string& minlstkey() const;
  inline void set_minlstkey(const ::std::string& value);
  inline void set_minlstkey(const char* value);
  inline void set_minlstkey(const void* value, size_t size);
  inline ::std::string* mutable_minlstkey();
  inline ::std::string* release_minlstkey();
  inline void set_allocated_minlstkey(::std::string* minlstkey);

  // repeated .PbPhysicalTimeSpec DV = 8;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 8;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // optional int32 SrcReplica = 9;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 9;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // repeated .PbPhysicalTimeSpec GSV = 10;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 10;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_getvalue();
  inline void clear_has_getvalue();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_gst();
  inline void clear_has_gst();
  inline void set_has_dut();
  inline void clear_has_dut();
  inline void set_has_blocked();
  inline void clear_has_blocked();
  inline void set_has_minlstkey();
  inline void clear_has_minlstkey();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* getvalue_;
  ::PbPhysicalTimeSpec* dt_;
  ::PbPhysicalTimeSpec* gst_;
  ::PbPhysicalTimeSpec* dut_;
  bool succeeded_;
  bool blocked_;
  ::google::protobuf::int32 srcreplica_;
  ::std::string* minlstkey_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicSetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicSetArg();
  virtual ~PbRpcKVPublicSetArg();

  PbRpcKVPublicSetArg(const PbRpcKVPublicSetArg& from);

  inline PbRpcKVPublicSetArg& operator=(const PbRpcKVPublicSetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicSetArg& default_instance();

  void Swap(PbRpcKVPublicSetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicSetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicSetArg& from);
  void MergeFrom(const PbRpcKVPublicSetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional .PbPhysicalTimeSpec DT = 3;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional bytes MinLSTKey = 4;
  inline bool has_minlstkey() const;
  inline void clear_minlstkey();
  static const int kMinLSTKeyFieldNumber = 4;
  inline const ::std::string& minlstkey() const;
  inline void set_minlstkey(const ::std::string& value);
  inline void set_minlstkey(const char* value);
  inline void set_minlstkey(const void* value, size_t size);
  inline ::std::string* mutable_minlstkey();
  inline ::std::string* release_minlstkey();
  inline void set_allocated_minlstkey(::std::string* minlstkey);

  // repeated .PbPhysicalTimeSpec DV = 5;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicSetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_minlstkey();
  inline void clear_has_minlstkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* dt_;
  ::std::string* minlstkey_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicSetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicSetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicSetResult();
  virtual ~PbRpcKVPublicSetResult();

  PbRpcKVPublicSetResult(const PbRpcKVPublicSetResult& from);

  inline PbRpcKVPublicSetResult& operator=(const PbRpcKVPublicSetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicSetResult& default_instance();

  void Swap(PbRpcKVPublicSetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicSetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicSetResult& from);
  void MergeFrom(const PbRpcKVPublicSetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // optional .PbPhysicalTimeSpec DT = 2;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicSetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* dt_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicSetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicTxGetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicTxGetArg();
  virtual ~PbRpcKVPublicTxGetArg();

  PbRpcKVPublicTxGetArg(const PbRpcKVPublicTxGetArg& from);

  inline PbRpcKVPublicTxGetArg& operator=(const PbRpcKVPublicTxGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicTxGetArg& default_instance();

  void Swap(PbRpcKVPublicTxGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicTxGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicTxGetArg& from);
  void MergeFrom(const PbRpcKVPublicTxGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // optional .PbPhysicalTimeSpec ST = 2;
  inline bool has_st() const;
  inline void clear_st();
  static const int kSTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& st() const;
  inline ::PbPhysicalTimeSpec* mutable_st();
  inline ::PbPhysicalTimeSpec* release_st();
  inline void set_allocated_st(::PbPhysicalTimeSpec* st);

  // optional .PbPhysicalTimeSpec UT = 3;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // repeated .PbPhysicalTimeSpec SV = 4;
  inline int sv_size() const;
  inline void clear_sv();
  static const int kSVFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& sv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_sv(int index);
  inline ::PbPhysicalTimeSpec* add_sv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      sv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_sv();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicTxGetArg)
 private:
  inline void set_has_st();
  inline void clear_has_st();
  inline void set_has_ut();
  inline void clear_has_ut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::PbPhysicalTimeSpec* st_;
  ::PbPhysicalTimeSpec* ut_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > sv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicTxGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicTxGetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicTxGetResult();
  virtual ~PbRpcKVPublicTxGetResult();

  PbRpcKVPublicTxGetResult(const PbRpcKVPublicTxGetResult& from);

  inline PbRpcKVPublicTxGetResult& operator=(const PbRpcKVPublicTxGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicTxGetResult& default_instance();

  void Swap(PbRpcKVPublicTxGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicTxGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicTxGetResult& from);
  void MergeFrom(const PbRpcKVPublicTxGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated bytes GetValue = 2;
  inline int getvalue_size() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue(int index) const;
  inline ::std::string* mutable_getvalue(int index);
  inline void set_getvalue(int index, const ::std::string& value);
  inline void set_getvalue(int index, const char* value);
  inline void set_getvalue(int index, const void* value, size_t size);
  inline ::std::string* add_getvalue();
  inline void add_getvalue(const ::std::string& value);
  inline void add_getvalue(const char* value);
  inline void add_getvalue(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& getvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_getvalue();

  // optional .PbPhysicalTimeSpec ST = 3;
  inline bool has_st() const;
  inline void clear_st();
  static const int kSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& st() const;
  inline ::PbPhysicalTimeSpec* mutable_st();
  inline ::PbPhysicalTimeSpec* release_st();
  inline void set_allocated_st(::PbPhysicalTimeSpec* st);

  // repeated .PbPhysicalTimeSpec SV = 4;
  inline int sv_size() const;
  inline void clear_sv();
  static const int kSVFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& sv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_sv(int index);
  inline ::PbPhysicalTimeSpec* add_sv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      sv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_sv();

  // optional .PbPhysicalTimeSpec UT = 5;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // repeated .PbPhysicalTimeSpec UV = 6;
  inline int uv_size() const;
  inline void clear_uv();
  static const int kUVFieldNumber = 6;
  inline const ::PbPhysicalTimeSpec& uv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_uv(int index);
  inline ::PbPhysicalTimeSpec* add_uv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      uv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_uv();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicTxGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_st();
  inline void clear_has_st();
  inline void set_has_ut();
  inline void clear_has_ut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> getvalue_;
  ::PbPhysicalTimeSpec* st_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > sv_;
  ::PbPhysicalTimeSpec* ut_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > uv_;
  bool succeeded_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicTxGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicShowArg : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicShowArg();
  virtual ~PbRpcKVPublicShowArg();

  PbRpcKVPublicShowArg(const PbRpcKVPublicShowArg& from);

  inline PbRpcKVPublicShowArg& operator=(const PbRpcKVPublicShowArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicShowArg& default_instance();

  void Swap(PbRpcKVPublicShowArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicShowArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicShowArg& from);
  void MergeFrom(const PbRpcKVPublicShowArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicShowArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicShowArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicShowResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicShowResult();
  virtual ~PbRpcKVPublicShowResult();

  PbRpcKVPublicShowResult(const PbRpcKVPublicShowResult& from);

  inline PbRpcKVPublicShowResult& operator=(const PbRpcKVPublicShowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicShowResult& default_instance();

  void Swap(PbRpcKVPublicShowResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicShowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicShowResult& from);
  void MergeFrom(const PbRpcKVPublicShowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes ReturnString = 2;
  inline bool has_returnstring() const;
  inline void clear_returnstring();
  static const int kReturnStringFieldNumber = 2;
  inline const ::std::string& returnstring() const;
  inline void set_returnstring(const ::std::string& value);
  inline void set_returnstring(const char* value);
  inline void set_returnstring(const void* value, size_t size);
  inline ::std::string* mutable_returnstring();
  inline ::std::string* release_returnstring();
  inline void set_allocated_returnstring(::std::string* returnstring);

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicShowResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_returnstring();
  inline void clear_has_returnstring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* returnstring_;
  bool succeeded_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicShowResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalGetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalGetArg();
  virtual ~PbRpcKVInternalGetArg();

  PbRpcKVInternalGetArg(const PbRpcKVInternalGetArg& from);

  inline PbRpcKVInternalGetArg& operator=(const PbRpcKVInternalGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalGetArg& default_instance();

  void Swap(PbRpcKVInternalGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalGetArg& from);
  void MergeFrom(const PbRpcKVInternalGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .PbPhysicalTimeSpec GST = 2;
  inline bool has_gst() const;
  inline void clear_gst();
  static const int kGSTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& gst() const;
  inline ::PbPhysicalTimeSpec* mutable_gst();
  inline ::PbPhysicalTimeSpec* release_gst();
  inline void set_allocated_gst(::PbPhysicalTimeSpec* gst);

  // optional .PbPhysicalTimeSpec minLST = 3;
  inline bool has_minlst() const;
  inline void clear_minlst();
  static const int kMinLSTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& minlst() const;
  inline ::PbPhysicalTimeSpec* mutable_minlst();
  inline ::PbPhysicalTimeSpec* release_minlst();
  inline void set_allocated_minlst(::PbPhysicalTimeSpec* minlst);

  // repeated .PbPhysicalTimeSpec NDV = 4;
  inline int ndv_size() const;
  inline void clear_ndv();
  static const int kNDVFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& ndv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_ndv(int index);
  inline ::PbPhysicalTimeSpec* add_ndv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      ndv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_ndv();

  // repeated .PbPhysicalTimeSpec GSV = 5;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalGetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_gst();
  inline void clear_has_gst();
  inline void set_has_minlst();
  inline void clear_has_minlst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::PbPhysicalTimeSpec* gst_;
  ::PbPhysicalTimeSpec* minlst_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > ndv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalGetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalGetResult();
  virtual ~PbRpcKVInternalGetResult();

  PbRpcKVInternalGetResult(const PbRpcKVInternalGetResult& from);

  inline PbRpcKVInternalGetResult& operator=(const PbRpcKVInternalGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalGetResult& default_instance();

  void Swap(PbRpcKVInternalGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalGetResult& from);
  void MergeFrom(const PbRpcKVInternalGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes GetValue = 2;
  inline bool has_getvalue() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue() const;
  inline void set_getvalue(const ::std::string& value);
  inline void set_getvalue(const char* value);
  inline void set_getvalue(const void* value, size_t size);
  inline ::std::string* mutable_getvalue();
  inline ::std::string* release_getvalue();
  inline void set_allocated_getvalue(::std::string* getvalue);

  // optional .PbPhysicalTimeSpec DT = 3;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional .PbPhysicalTimeSpec GST = 4;
  inline bool has_gst() const;
  inline void clear_gst();
  static const int kGSTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& gst() const;
  inline ::PbPhysicalTimeSpec* mutable_gst();
  inline ::PbPhysicalTimeSpec* release_gst();
  inline void set_allocated_gst(::PbPhysicalTimeSpec* gst);

  // optional .PbPhysicalTimeSpec DUT = 5;
  inline bool has_dut() const;
  inline void clear_dut();
  static const int kDUTFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dut() const;
  inline ::PbPhysicalTimeSpec* mutable_dut();
  inline ::PbPhysicalTimeSpec* release_dut();
  inline void set_allocated_dut(::PbPhysicalTimeSpec* dut);

  // optional bytes MinLSTKey = 6;
  inline bool has_minlstkey() const;
  inline void clear_minlstkey();
  static const int kMinLSTKeyFieldNumber = 6;
  inline const ::std::string& minlstkey() const;
  inline void set_minlstkey(const ::std::string& value);
  inline void set_minlstkey(const char* value);
  inline void set_minlstkey(const void* value, size_t size);
  inline ::std::string* mutable_minlstkey();
  inline ::std::string* release_minlstkey();
  inline void set_allocated_minlstkey(::std::string* minlstkey);

  // optional bool Blocked = 7;
  inline bool has_blocked() const;
  inline void clear_blocked();
  static const int kBlockedFieldNumber = 7;
  inline bool blocked() const;
  inline void set_blocked(bool value);

  // repeated .PbPhysicalTimeSpec DV = 8;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 8;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // optional int32 SrcReplica = 9;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 9;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // repeated .PbPhysicalTimeSpec GSV = 10;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 10;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_getvalue();
  inline void clear_has_getvalue();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_gst();
  inline void clear_has_gst();
  inline void set_has_dut();
  inline void clear_has_dut();
  inline void set_has_minlstkey();
  inline void clear_has_minlstkey();
  inline void set_has_blocked();
  inline void clear_has_blocked();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* getvalue_;
  ::PbPhysicalTimeSpec* dt_;
  ::PbPhysicalTimeSpec* gst_;
  ::PbPhysicalTimeSpec* dut_;
  bool succeeded_;
  bool blocked_;
  ::google::protobuf::int32 srcreplica_;
  ::std::string* minlstkey_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalSetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalSetArg();
  virtual ~PbRpcKVInternalSetArg();

  PbRpcKVInternalSetArg(const PbRpcKVInternalSetArg& from);

  inline PbRpcKVInternalSetArg& operator=(const PbRpcKVInternalSetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalSetArg& default_instance();

  void Swap(PbRpcKVInternalSetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalSetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalSetArg& from);
  void MergeFrom(const PbRpcKVInternalSetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional .PbPhysicalTimeSpec DT = 3;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional bytes MinLSTKey = 4;
  inline bool has_minlstkey() const;
  inline void clear_minlstkey();
  static const int kMinLSTKeyFieldNumber = 4;
  inline const ::std::string& minlstkey() const;
  inline void set_minlstkey(const ::std::string& value);
  inline void set_minlstkey(const char* value);
  inline void set_minlstkey(const void* value, size_t size);
  inline ::std::string* mutable_minlstkey();
  inline ::std::string* release_minlstkey();
  inline void set_allocated_minlstkey(::std::string* minlstkey);

  // repeated .PbPhysicalTimeSpec DV = 5;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalSetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_minlstkey();
  inline void clear_has_minlstkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* dt_;
  ::std::string* minlstkey_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalSetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalSetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalSetResult();
  virtual ~PbRpcKVInternalSetResult();

  PbRpcKVInternalSetResult(const PbRpcKVInternalSetResult& from);

  inline PbRpcKVInternalSetResult& operator=(const PbRpcKVInternalSetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalSetResult& default_instance();

  void Swap(PbRpcKVInternalSetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalSetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalSetResult& from);
  void MergeFrom(const PbRpcKVInternalSetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // optional .PbPhysicalTimeSpec DT = 2;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalSetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* dt_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalSetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalTxSliceGetArg : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalTxSliceGetArg();
  virtual ~PbRpcKVInternalTxSliceGetArg();

  PbRpcKVInternalTxSliceGetArg(const PbRpcKVInternalTxSliceGetArg& from);

  inline PbRpcKVInternalTxSliceGetArg& operator=(const PbRpcKVInternalTxSliceGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalTxSliceGetArg& default_instance();

  void Swap(PbRpcKVInternalTxSliceGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalTxSliceGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalTxSliceGetArg& from);
  void MergeFrom(const PbRpcKVInternalTxSliceGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .PbPhysicalTimeSpec ST = 2;
  inline bool has_st() const;
  inline void clear_st();
  static const int kSTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& st() const;
  inline ::PbPhysicalTimeSpec* mutable_st();
  inline ::PbPhysicalTimeSpec* release_st();
  inline void set_allocated_st(::PbPhysicalTimeSpec* st);

  // repeated .PbPhysicalTimeSpec SV = 3;
  inline int sv_size() const;
  inline void clear_sv();
  static const int kSVFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& sv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_sv(int index);
  inline ::PbPhysicalTimeSpec* add_sv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      sv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_sv();

  // optional int64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalTxSliceGetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_st();
  inline void clear_has_st();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::PbPhysicalTimeSpec* st_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > sv_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalTxSliceGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalTxSliceGetResult : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalTxSliceGetResult();
  virtual ~PbRpcKVInternalTxSliceGetResult();

  PbRpcKVInternalTxSliceGetResult(const PbRpcKVInternalTxSliceGetResult& from);

  inline PbRpcKVInternalTxSliceGetResult& operator=(const PbRpcKVInternalTxSliceGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalTxSliceGetResult& default_instance();

  void Swap(PbRpcKVInternalTxSliceGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalTxSliceGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalTxSliceGetResult& from);
  void MergeFrom(const PbRpcKVInternalTxSliceGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes GetValue = 2;
  inline bool has_getvalue() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue() const;
  inline void set_getvalue(const ::std::string& value);
  inline void set_getvalue(const char* value);
  inline void set_getvalue(const void* value, size_t size);
  inline ::std::string* mutable_getvalue();
  inline ::std::string* release_getvalue();
  inline void set_allocated_getvalue(::std::string* getvalue);

  // optional .PbPhysicalTimeSpec DT = 3;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dt() const;
  inline ::PbPhysicalTimeSpec* mutable_dt();
  inline ::PbPhysicalTimeSpec* release_dt();
  inline void set_allocated_dt(::PbPhysicalTimeSpec* dt);

  // optional .PbPhysicalTimeSpec GST = 4;
  inline bool has_gst() const;
  inline void clear_gst();
  static const int kGSTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& gst() const;
  inline ::PbPhysicalTimeSpec* mutable_gst();
  inline ::PbPhysicalTimeSpec* release_gst();
  inline void set_allocated_gst(::PbPhysicalTimeSpec* gst);

  // optional .PbPhysicalTimeSpec DUT = 5;
  inline bool has_dut() const;
  inline void clear_dut();
  static const int kDUTFieldNumber = 5;
  inline const ::PbPhysicalTimeSpec& dut() const;
  inline ::PbPhysicalTimeSpec* mutable_dut();
  inline ::PbPhysicalTimeSpec* release_dut();
  inline void set_allocated_dut(::PbPhysicalTimeSpec* dut);

  // repeated .PbPhysicalTimeSpec DV = 6;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 6;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // repeated .PbPhysicalTimeSpec NDV = 7;
  inline int ndv_size() const;
  inline void clear_ndv();
  static const int kNDVFieldNumber = 7;
  inline const ::PbPhysicalTimeSpec& ndv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_ndv(int index);
  inline ::PbPhysicalTimeSpec* add_ndv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      ndv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_ndv();

  // repeated .PbPhysicalTimeSpec GSV = 8;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 8;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // optional int32 SrcReplica = 9;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 9;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // optional double waitedXact = 10;
  inline bool has_waitedxact() const;
  inline void clear_waitedxact();
  static const int kWaitedXactFieldNumber = 10;
  inline double waitedxact() const;
  inline void set_waitedxact(double value);

  // optional int64 id = 11;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 11;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 12;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 12;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalTxSliceGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_getvalue();
  inline void clear_has_getvalue();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_gst();
  inline void clear_has_gst();
  inline void set_has_dut();
  inline void clear_has_dut();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_waitedxact();
  inline void clear_has_waitedxact();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* getvalue_;
  ::PbPhysicalTimeSpec* dt_;
  ::PbPhysicalTimeSpec* gst_;
  ::PbPhysicalTimeSpec* dut_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > ndv_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  double waitedxact_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalTxSliceGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalShowItemArg : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalShowItemArg();
  virtual ~PbRpcKVInternalShowItemArg();

  PbRpcKVInternalShowItemArg(const PbRpcKVInternalShowItemArg& from);

  inline PbRpcKVInternalShowItemArg& operator=(const PbRpcKVInternalShowItemArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalShowItemArg& default_instance();

  void Swap(PbRpcKVInternalShowItemArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalShowItemArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalShowItemArg& from);
  void MergeFrom(const PbRpcKVInternalShowItemArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalShowItemArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalShowItemArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalShowItemResult : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalShowItemResult();
  virtual ~PbRpcKVInternalShowItemResult();

  PbRpcKVInternalShowItemResult(const PbRpcKVInternalShowItemResult& from);

  inline PbRpcKVInternalShowItemResult& operator=(const PbRpcKVInternalShowItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalShowItemResult& default_instance();

  void Swap(PbRpcKVInternalShowItemResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalShowItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalShowItemResult& from);
  void MergeFrom(const PbRpcKVInternalShowItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes ItemVersions = 2;
  inline bool has_itemversions() const;
  inline void clear_itemversions();
  static const int kItemVersionsFieldNumber = 2;
  inline const ::std::string& itemversions() const;
  inline void set_itemversions(const ::std::string& value);
  inline void set_itemversions(const char* value);
  inline void set_itemversions(const void* value, size_t size);
  inline ::std::string* mutable_itemversions();
  inline ::std::string* release_itemversions();
  inline void set_allocated_itemversions(::std::string* itemversions);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalShowItemResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_itemversions();
  inline void clear_has_itemversions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemversions_;
  bool succeeded_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalShowItemResult* default_instance_;
};
// -------------------------------------------------------------------

class PbUpdatedItemVersion : public ::google::protobuf::Message {
 public:
  PbUpdatedItemVersion();
  virtual ~PbUpdatedItemVersion();

  PbUpdatedItemVersion(const PbUpdatedItemVersion& from);

  inline PbUpdatedItemVersion& operator=(const PbUpdatedItemVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbUpdatedItemVersion& default_instance();

  void Swap(PbUpdatedItemVersion* other);

  // implements Message ----------------------------------------------

  PbUpdatedItemVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbUpdatedItemVersion& from);
  void MergeFrom(const PbUpdatedItemVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 LUT = 1;
  inline bool has_lut() const;
  inline void clear_lut();
  static const int kLUTFieldNumber = 1;
  inline ::google::protobuf::int64 lut() const;
  inline void set_lut(::google::protobuf::int64 value);

  // required int32 SrcReplica = 2;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 2;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbUpdatedItemVersion)
 private:
  inline void set_has_lut();
  inline void clear_has_lut();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 lut_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbUpdatedItemVersion* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcReplicationArg : public ::google::protobuf::Message {
 public:
  PbRpcReplicationArg();
  virtual ~PbRpcReplicationArg();

  PbRpcReplicationArg(const PbRpcReplicationArg& from);

  inline PbRpcReplicationArg& operator=(const PbRpcReplicationArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcReplicationArg& default_instance();

  void Swap(PbRpcReplicationArg* other);

  // implements Message ----------------------------------------------

  PbRpcReplicationArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcReplicationArg& from);
  void MergeFrom(const PbRpcReplicationArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbPhysicalTimeSpec remoteDV = 1;
  inline int remotedv_size() const;
  inline void clear_remotedv();
  static const int kRemoteDVFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& remotedv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_remotedv(int index);
  inline ::PbPhysicalTimeSpec* add_remotedv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      remotedv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_remotedv();

  // repeated bytes UpdateRecord = 2;
  inline int updaterecord_size() const;
  inline void clear_updaterecord();
  static const int kUpdateRecordFieldNumber = 2;
  inline const ::std::string& updaterecord(int index) const;
  inline ::std::string* mutable_updaterecord(int index);
  inline void set_updaterecord(int index, const ::std::string& value);
  inline void set_updaterecord(int index, const char* value);
  inline void set_updaterecord(int index, const void* value, size_t size);
  inline ::std::string* add_updaterecord();
  inline void add_updaterecord(const ::std::string& value);
  inline void add_updaterecord(const char* value);
  inline void add_updaterecord(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& updaterecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_updaterecord();

  // @@protoc_insertion_point(class_scope:PbRpcReplicationArg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > remotedv_;
  ::google::protobuf::RepeatedPtrField< ::std::string> updaterecord_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcReplicationArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcHeartbeat : public ::google::protobuf::Message {
 public:
  PbRpcHeartbeat();
  virtual ~PbRpcHeartbeat();

  PbRpcHeartbeat(const PbRpcHeartbeat& from);

  inline PbRpcHeartbeat& operator=(const PbRpcHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcHeartbeat& default_instance();

  void Swap(PbRpcHeartbeat* other);

  // implements Message ----------------------------------------------

  PbRpcHeartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcHeartbeat& from);
  void MergeFrom(const PbRpcHeartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec PhysicalTime = 1;
  inline bool has_physicaltime() const;
  inline void clear_physicaltime();
  static const int kPhysicalTimeFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& physicaltime() const;
  inline ::PbPhysicalTimeSpec* mutable_physicaltime();
  inline ::PbPhysicalTimeSpec* release_physicaltime();
  inline void set_allocated_physicaltime(::PbPhysicalTimeSpec* physicaltime);

  // required int64 LogicalTime = 2;
  inline bool has_logicaltime() const;
  inline void clear_logicaltime();
  static const int kLogicalTimeFieldNumber = 2;
  inline ::google::protobuf::int64 logicaltime() const;
  inline void set_logicaltime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcHeartbeat)
 private:
  inline void set_has_physicaltime();
  inline void clear_has_physicaltime();
  inline void set_has_logicaltime();
  inline void clear_has_logicaltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* physicaltime_;
  ::google::protobuf::int64 logicaltime_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcHeartbeat* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcLST : public ::google::protobuf::Message {
 public:
  PbRpcLST();
  virtual ~PbRpcLST();

  PbRpcLST(const PbRpcLST& from);

  inline PbRpcLST& operator=(const PbRpcLST& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcLST& default_instance();

  void Swap(PbRpcLST* other);

  // implements Message ----------------------------------------------

  PbRpcLST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcLST& from);
  void MergeFrom(const PbRpcLST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& time() const;
  inline ::PbPhysicalTimeSpec* mutable_time();
  inline ::PbPhysicalTimeSpec* release_time();
  inline void set_allocated_time(::PbPhysicalTimeSpec* time);

  // required int32 Round = 2;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 2;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // repeated .PbPhysicalTimeSpec PVV = 3;
  inline int pvv_size() const;
  inline void clear_pvv();
  static const int kPVVFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& pvv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_pvv(int index);
  inline ::PbPhysicalTimeSpec* add_pvv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      pvv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_pvv();

  // @@protoc_insertion_point(class_scope:PbRpcLST)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* time_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > pvv_;
  ::google::protobuf::int32 round_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcLST* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcGST : public ::google::protobuf::Message {
 public:
  PbRpcGST();
  virtual ~PbRpcGST();

  PbRpcGST(const PbRpcGST& from);

  inline PbRpcGST& operator=(const PbRpcGST& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcGST& default_instance();

  void Swap(PbRpcGST* other);

  // implements Message ----------------------------------------------

  PbRpcGST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcGST& from);
  void MergeFrom(const PbRpcGST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& time() const;
  inline ::PbPhysicalTimeSpec* mutable_time();
  inline ::PbPhysicalTimeSpec* release_time();
  inline void set_allocated_time(::PbPhysicalTimeSpec* time);

  // @@protoc_insertion_point(class_scope:PbRpcGST)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* time_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcGST* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcGSTReq : public ::google::protobuf::Message {
 public:
  PbRpcGSTReq();
  virtual ~PbRpcGSTReq();

  PbRpcGSTReq(const PbRpcGSTReq& from);

  inline PbRpcGSTReq& operator=(const PbRpcGSTReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcGSTReq& default_instance();

  void Swap(PbRpcGSTReq* other);

  // implements Message ----------------------------------------------

  PbRpcGSTReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcGSTReq& from);
  void MergeFrom(const PbRpcGSTReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PbPhysicalTimeSpec Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& time() const;
  inline ::PbPhysicalTimeSpec* mutable_time();
  inline ::PbPhysicalTimeSpec* release_time();
  inline void set_allocated_time(::PbPhysicalTimeSpec* time);

  // required int32 PeerId = 2;
  inline bool has_peerid() const;
  inline void clear_peerid();
  static const int kPeerIdFieldNumber = 2;
  inline ::google::protobuf::int32 peerid() const;
  inline void set_peerid(::google::protobuf::int32 value);

  // repeated .PbPhysicalTimeSpec GSV = 3;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcGSTReq)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_peerid();
  inline void clear_has_peerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* time_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  ::google::protobuf::int32 peerid_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcGSTReq* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcPVV : public ::google::protobuf::Message {
 public:
  PbRpcPVV();
  virtual ~PbRpcPVV();

  PbRpcPVV(const PbRpcPVV& from);

  inline PbRpcPVV& operator=(const PbRpcPVV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcPVV& default_instance();

  void Swap(PbRpcPVV* other);

  // implements Message ----------------------------------------------

  PbRpcPVV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcPVV& from);
  void MergeFrom(const PbRpcPVV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // repeated .PbPhysicalTimeSpec PVV = 2;
  inline int pvv_size() const;
  inline void clear_pvv();
  static const int kPVVFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& pvv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_pvv(int index);
  inline ::PbPhysicalTimeSpec* add_pvv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      pvv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_pvv();

  // @@protoc_insertion_point(class_scope:PbRpcPVV)
 private:
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > pvv_;
  ::google::protobuf::int32 round_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcPVV* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcGSV : public ::google::protobuf::Message {
 public:
  PbRpcGSV();
  virtual ~PbRpcGSV();

  PbRpcGSV(const PbRpcGSV& from);

  inline PbRpcGSV& operator=(const PbRpcGSV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcGSV& default_instance();

  void Swap(PbRpcGSV* other);

  // implements Message ----------------------------------------------

  PbRpcGSV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcGSV& from);
  void MergeFrom(const PbRpcGSV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbPhysicalTimeSpec GSV = 1;
  inline int gsv_size() const;
  inline void clear_gsv();
  static const int kGSVFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& gsv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_gsv(int index);
  inline ::PbPhysicalTimeSpec* add_gsv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      gsv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_gsv();

  // @@protoc_insertion_point(class_scope:PbRpcGSV)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > gsv_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcGSV* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcGroupServiceResult : public ::google::protobuf::Message {
 public:
  PbRpcGroupServiceResult();
  virtual ~PbRpcGroupServiceResult();

  PbRpcGroupServiceResult(const PbRpcGroupServiceResult& from);

  inline PbRpcGroupServiceResult& operator=(const PbRpcGroupServiceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcGroupServiceResult& default_instance();

  void Swap(PbRpcGroupServiceResult* other);

  // implements Message ----------------------------------------------

  PbRpcGroupServiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcGroupServiceResult& from);
  void MergeFrom(const PbRpcGroupServiceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // @@protoc_insertion_point(class_scope:PbRpcGroupServiceResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool succeeded_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcGroupServiceResult* default_instance_;
};
// -------------------------------------------------------------------

class PbPartition : public ::google::protobuf::Message {
 public:
  PbPartition();
  virtual ~PbPartition();

  PbPartition(const PbPartition& from);

  inline PbPartition& operator=(const PbPartition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbPartition& default_instance();

  void Swap(PbPartition* other);

  // implements Message ----------------------------------------------

  PbPartition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbPartition& from);
  void MergeFrom(const PbPartition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 PublicPort = 2;
  inline bool has_publicport() const;
  inline void clear_publicport();
  static const int kPublicPortFieldNumber = 2;
  inline ::google::protobuf::int32 publicport() const;
  inline void set_publicport(::google::protobuf::int32 value);

  // required int32 PartitionPort = 3;
  inline bool has_partitionport() const;
  inline void clear_partitionport();
  static const int kPartitionPortFieldNumber = 3;
  inline ::google::protobuf::int32 partitionport() const;
  inline void set_partitionport(::google::protobuf::int32 value);

  // required int32 ReplicationPort = 4;
  inline bool has_replicationport() const;
  inline void clear_replicationport();
  static const int kReplicationPortFieldNumber = 4;
  inline ::google::protobuf::int32 replicationport() const;
  inline void set_replicationport(::google::protobuf::int32 value);

  // required int32 PartitionId = 5;
  inline bool has_partitionid() const;
  inline void clear_partitionid();
  static const int kPartitionIdFieldNumber = 5;
  inline ::google::protobuf::int32 partitionid() const;
  inline void set_partitionid(::google::protobuf::int32 value);

  // required int32 ReplicaId = 6;
  inline bool has_replicaid() const;
  inline void clear_replicaid();
  static const int kReplicaIdFieldNumber = 6;
  inline ::google::protobuf::int32 replicaid() const;
  inline void set_replicaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbPartition)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_publicport();
  inline void clear_has_publicport();
  inline void set_has_partitionport();
  inline void clear_has_partitionport();
  inline void set_has_replicationport();
  inline void clear_has_replicationport();
  inline void set_has_partitionid();
  inline void clear_has_partitionid();
  inline void set_has_replicaid();
  inline void clear_has_replicaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 publicport_;
  ::google::protobuf::int32 partitionport_;
  ::google::protobuf::int32 replicationport_;
  ::google::protobuf::int32 partitionid_;
  ::google::protobuf::int32 replicaid_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbPartition* default_instance_;
};
// -------------------------------------------------------------------

class PbRegisteredPartitions : public ::google::protobuf::Message {
 public:
  PbRegisteredPartitions();
  virtual ~PbRegisteredPartitions();

  PbRegisteredPartitions(const PbRegisteredPartitions& from);

  inline PbRegisteredPartitions& operator=(const PbRegisteredPartitions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRegisteredPartitions& default_instance();

  void Swap(PbRegisteredPartitions* other);

  // implements Message ----------------------------------------------

  PbRegisteredPartitions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRegisteredPartitions& from);
  void MergeFrom(const PbRegisteredPartitions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 NumPartitions = 1;
  inline bool has_numpartitions() const;
  inline void clear_numpartitions();
  static const int kNumPartitionsFieldNumber = 1;
  inline ::google::protobuf::int32 numpartitions() const;
  inline void set_numpartitions(::google::protobuf::int32 value);

  // required int32 NumReplicasPerPartition = 2;
  inline bool has_numreplicasperpartition() const;
  inline void clear_numreplicasperpartition();
  static const int kNumReplicasPerPartitionFieldNumber = 2;
  inline ::google::protobuf::int32 numreplicasperpartition() const;
  inline void set_numreplicasperpartition(::google::protobuf::int32 value);

  // repeated .PbPartition Partition = 3;
  inline int partition_size() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 3;
  inline const ::PbPartition& partition(int index) const;
  inline ::PbPartition* mutable_partition(int index);
  inline ::PbPartition* add_partition();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPartition >&
      partition() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPartition >*
      mutable_partition();

  // @@protoc_insertion_point(class_scope:PbRegisteredPartitions)
 private:
  inline void set_has_numpartitions();
  inline void clear_has_numpartitions();
  inline void set_has_numreplicasperpartition();
  inline void clear_has_numreplicasperpartition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numpartitions_;
  ::google::protobuf::int32 numreplicasperpartition_;
  ::google::protobuf::RepeatedPtrField< ::PbPartition > partition_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRegisteredPartitions* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVInternalPrepareReplyResult : public ::google::protobuf::Message {
 public:
  PbRpcKVInternalPrepareReplyResult();
  virtual ~PbRpcKVInternalPrepareReplyResult();

  PbRpcKVInternalPrepareReplyResult(const PbRpcKVInternalPrepareReplyResult& from);

  inline PbRpcKVInternalPrepareReplyResult& operator=(const PbRpcKVInternalPrepareReplyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVInternalPrepareReplyResult& default_instance();

  void Swap(PbRpcKVInternalPrepareReplyResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVInternalPrepareReplyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVInternalPrepareReplyResult& from);
  void MergeFrom(const PbRpcKVInternalPrepareReplyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .PbPhysicalTimeSpec PT = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& pt() const;
  inline ::PbPhysicalTimeSpec* mutable_pt();
  inline ::PbPhysicalTimeSpec* release_pt();
  inline void set_allocated_pt(::PbPhysicalTimeSpec* pt);

  // required int64 src = 3;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 3;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // optional double blockDuration = 4;
  inline bool has_blockduration() const;
  inline void clear_blockduration();
  static const int kBlockDurationFieldNumber = 4;
  inline double blockduration() const;
  inline void set_blockduration(double value);

  // @@protoc_insertion_point(class_scope:PbRpcKVInternalPrepareReplyResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_blockduration();
  inline void clear_has_blockduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::PbPhysicalTimeSpec* pt_;
  ::google::protobuf::int64 src_;
  double blockduration_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVInternalPrepareReplyResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpCommitRequestArg : public ::google::protobuf::Message {
 public:
  PbRpCommitRequestArg();
  virtual ~PbRpCommitRequestArg();

  PbRpCommitRequestArg(const PbRpCommitRequestArg& from);

  inline PbRpCommitRequestArg& operator=(const PbRpCommitRequestArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpCommitRequestArg& default_instance();

  void Swap(PbRpCommitRequestArg* other);

  // implements Message ----------------------------------------------

  PbRpCommitRequestArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpCommitRequestArg& from);
  void MergeFrom(const PbRpCommitRequestArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .PbPhysicalTimeSpec CT = 2;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ct() const;
  inline ::PbPhysicalTimeSpec* mutable_ct();
  inline ::PbPhysicalTimeSpec* release_ct();
  inline void set_allocated_ct(::PbPhysicalTimeSpec* ct);

  // @@protoc_insertion_point(class_scope:PbRpCommitRequestArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ct();
  inline void clear_has_ct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::PbPhysicalTimeSpec* ct_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpCommitRequestArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicCommitArg : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicCommitArg();
  virtual ~PbRpcKVPublicCommitArg();

  PbRpcKVPublicCommitArg(const PbRpcKVPublicCommitArg& from);

  inline PbRpcKVPublicCommitArg& operator=(const PbRpcKVPublicCommitArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicCommitArg& default_instance();

  void Swap(PbRpcKVPublicCommitArg* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicCommitArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicCommitArg& from);
  void MergeFrom(const PbRpcKVPublicCommitArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated bytes Key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated bytes Value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicCommitArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicCommitArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcKVPublicCommitResult : public ::google::protobuf::Message {
 public:
  PbRpcKVPublicCommitResult();
  virtual ~PbRpcKVPublicCommitResult();

  PbRpcKVPublicCommitResult(const PbRpcKVPublicCommitResult& from);

  inline PbRpcKVPublicCommitResult& operator=(const PbRpcKVPublicCommitResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcKVPublicCommitResult& default_instance();

  void Swap(PbRpcKVPublicCommitResult* other);

  // implements Message ----------------------------------------------

  PbRpcKVPublicCommitResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcKVPublicCommitResult& from);
  void MergeFrom(const PbRpcKVPublicCommitResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required .PbPhysicalTimeSpec CT = 2;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ct() const;
  inline ::PbPhysicalTimeSpec* mutable_ct();
  inline ::PbPhysicalTimeSpec* release_ct();
  inline void set_allocated_ct(::PbPhysicalTimeSpec* ct);

  // @@protoc_insertion_point(class_scope:PbRpcKVPublicCommitResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_ct();
  inline void clear_has_ct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbPhysicalTimeSpec* ct_;
  bool succeeded_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcKVPublicCommitResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcPartitionClientPrepareRequestResult : public ::google::protobuf::Message {
 public:
  PbRpcPartitionClientPrepareRequestResult();
  virtual ~PbRpcPartitionClientPrepareRequestResult();

  PbRpcPartitionClientPrepareRequestResult(const PbRpcPartitionClientPrepareRequestResult& from);

  inline PbRpcPartitionClientPrepareRequestResult& operator=(const PbRpcPartitionClientPrepareRequestResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcPartitionClientPrepareRequestResult& default_instance();

  void Swap(PbRpcPartitionClientPrepareRequestResult* other);

  // implements Message ----------------------------------------------

  PbRpcPartitionClientPrepareRequestResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcPartitionClientPrepareRequestResult& from);
  void MergeFrom(const PbRpcPartitionClientPrepareRequestResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .PbPhysicalTimeSpec PT = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& pt() const;
  inline ::PbPhysicalTimeSpec* mutable_pt();
  inline ::PbPhysicalTimeSpec* release_pt();
  inline void set_allocated_pt(::PbPhysicalTimeSpec* pt);

  // required int64 src = 3;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 3;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // optional double blockDuration = 4;
  inline bool has_blockduration() const;
  inline void clear_blockduration();
  static const int kBlockDurationFieldNumber = 4;
  inline double blockduration() const;
  inline void set_blockduration(double value);

  // @@protoc_insertion_point(class_scope:PbRpcPartitionClientPrepareRequestResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_blockduration();
  inline void clear_has_blockduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::PbPhysicalTimeSpec* pt_;
  ::google::protobuf::int64 src_;
  double blockduration_;
  friend void  protobuf_AddDesc_rpc_5fmessages_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcPartitionClientPrepareRequestResult* default_instance_;
};
// ===================================================================


// ===================================================================

// PbRpcRequest

// required int32 MsgId = 1;
inline bool PbRpcRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcRequest::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 PbRpcRequest::msgid() const {
  // @@protoc_insertion_point(field_get:PbRpcRequest.MsgId)
  return msgid_;
}
inline void PbRpcRequest::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcRequest.MsgId)
}

// required int32 MethodId = 2;
inline bool PbRpcRequest::has_methodid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcRequest::set_has_methodid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcRequest::clear_has_methodid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcRequest::clear_methodid() {
  methodid_ = 0;
  clear_has_methodid();
}
inline ::google::protobuf::int32 PbRpcRequest::methodid() const {
  // @@protoc_insertion_point(field_get:PbRpcRequest.MethodId)
  return methodid_;
}
inline void PbRpcRequest::set_methodid(::google::protobuf::int32 value) {
  set_has_methodid();
  methodid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcRequest.MethodId)
}

// optional bytes Arguments = 3;
inline bool PbRpcRequest::has_arguments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcRequest::set_has_arguments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcRequest::clear_has_arguments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcRequest::clear_arguments() {
  if (arguments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arguments_->clear();
  }
  clear_has_arguments();
}
inline const ::std::string& PbRpcRequest::arguments() const {
  // @@protoc_insertion_point(field_get:PbRpcRequest.Arguments)
  return *arguments_;
}
inline void PbRpcRequest::set_arguments(const ::std::string& value) {
  set_has_arguments();
  if (arguments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arguments_ = new ::std::string;
  }
  arguments_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcRequest.Arguments)
}
inline void PbRpcRequest::set_arguments(const char* value) {
  set_has_arguments();
  if (arguments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arguments_ = new ::std::string;
  }
  arguments_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcRequest.Arguments)
}
inline void PbRpcRequest::set_arguments(const void* value, size_t size) {
  set_has_arguments();
  if (arguments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arguments_ = new ::std::string;
  }
  arguments_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcRequest.Arguments)
}
inline ::std::string* PbRpcRequest::mutable_arguments() {
  set_has_arguments();
  if (arguments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arguments_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcRequest.Arguments)
  return arguments_;
}
inline ::std::string* PbRpcRequest::release_arguments() {
  clear_has_arguments();
  if (arguments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = arguments_;
    arguments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcRequest::set_allocated_arguments(::std::string* arguments) {
  if (arguments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arguments_;
  }
  if (arguments) {
    set_has_arguments();
    arguments_ = arguments;
  } else {
    clear_has_arguments();
    arguments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcRequest.Arguments)
}

// -------------------------------------------------------------------

// PbRpcReply

// required int32 MsgId = 1;
inline bool PbRpcReply::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcReply::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcReply::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcReply::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 PbRpcReply::msgid() const {
  // @@protoc_insertion_point(field_get:PbRpcReply.MsgId)
  return msgid_;
}
inline void PbRpcReply::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcReply.MsgId)
}

// optional bytes Results = 2;
inline bool PbRpcReply::has_results() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcReply::set_has_results() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcReply::clear_has_results() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcReply::clear_results() {
  if (results_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    results_->clear();
  }
  clear_has_results();
}
inline const ::std::string& PbRpcReply::results() const {
  // @@protoc_insertion_point(field_get:PbRpcReply.Results)
  return *results_;
}
inline void PbRpcReply::set_results(const ::std::string& value) {
  set_has_results();
  if (results_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    results_ = new ::std::string;
  }
  results_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcReply.Results)
}
inline void PbRpcReply::set_results(const char* value) {
  set_has_results();
  if (results_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    results_ = new ::std::string;
  }
  results_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcReply.Results)
}
inline void PbRpcReply::set_results(const void* value, size_t size) {
  set_has_results();
  if (results_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    results_ = new ::std::string;
  }
  results_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcReply.Results)
}
inline ::std::string* PbRpcReply::mutable_results() {
  set_has_results();
  if (results_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    results_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcReply.Results)
  return results_;
}
inline ::std::string* PbRpcReply::release_results() {
  clear_has_results();
  if (results_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = results_;
    results_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcReply::set_allocated_results(::std::string* results) {
  if (results_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete results_;
  }
  if (results) {
    set_has_results();
    results_ = results;
  } else {
    clear_has_results();
    results_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcReply.Results)
}

// -------------------------------------------------------------------

// PbRpcEchoTest

// optional bytes text = 1;
inline bool PbRpcEchoTest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcEchoTest::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcEchoTest::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcEchoTest::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& PbRpcEchoTest::text() const {
  // @@protoc_insertion_point(field_get:PbRpcEchoTest.text)
  return *text_;
}
inline void PbRpcEchoTest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcEchoTest.text)
}
inline void PbRpcEchoTest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcEchoTest.text)
}
inline void PbRpcEchoTest::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcEchoTest.text)
}
inline ::std::string* PbRpcEchoTest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcEchoTest.text)
  return text_;
}
inline ::std::string* PbRpcEchoTest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcEchoTest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcEchoTest.text)
}

// -------------------------------------------------------------------

// PbVersionVector

// repeated sfixed64 Version = 1;
inline int PbVersionVector::version_size() const {
  return version_.size();
}
inline void PbVersionVector::clear_version() {
  version_.Clear();
}
inline ::google::protobuf::int64 PbVersionVector::version(int index) const {
  // @@protoc_insertion_point(field_get:PbVersionVector.Version)
  return version_.Get(index);
}
inline void PbVersionVector::set_version(int index, ::google::protobuf::int64 value) {
  version_.Set(index, value);
  // @@protoc_insertion_point(field_set:PbVersionVector.Version)
}
inline void PbVersionVector::add_version(::google::protobuf::int64 value) {
  version_.Add(value);
  // @@protoc_insertion_point(field_add:PbVersionVector.Version)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PbVersionVector::version() const {
  // @@protoc_insertion_point(field_list:PbVersionVector.Version)
  return version_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PbVersionVector::mutable_version() {
  // @@protoc_insertion_point(field_mutable_list:PbVersionVector.Version)
  return &version_;
}

// -------------------------------------------------------------------

// PbPhysicalTimeSpec

// required int64 Seconds = 1;
inline bool PbPhysicalTimeSpec::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbPhysicalTimeSpec::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbPhysicalTimeSpec::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbPhysicalTimeSpec::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::int64 PbPhysicalTimeSpec::seconds() const {
  // @@protoc_insertion_point(field_get:PbPhysicalTimeSpec.Seconds)
  return seconds_;
}
inline void PbPhysicalTimeSpec::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:PbPhysicalTimeSpec.Seconds)
}

// required int64 NanoSeconds = 2;
inline bool PbPhysicalTimeSpec::has_nanoseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbPhysicalTimeSpec::set_has_nanoseconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbPhysicalTimeSpec::clear_has_nanoseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbPhysicalTimeSpec::clear_nanoseconds() {
  nanoseconds_ = GOOGLE_LONGLONG(0);
  clear_has_nanoseconds();
}
inline ::google::protobuf::int64 PbPhysicalTimeSpec::nanoseconds() const {
  // @@protoc_insertion_point(field_get:PbPhysicalTimeSpec.NanoSeconds)
  return nanoseconds_;
}
inline void PbPhysicalTimeSpec::set_nanoseconds(::google::protobuf::int64 value) {
  set_has_nanoseconds();
  nanoseconds_ = value;
  // @@protoc_insertion_point(field_set:PbPhysicalTimeSpec.NanoSeconds)
}

// -------------------------------------------------------------------

// PbRpcKVPublicGetServerConfigResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicGetServerConfigResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicGetServerConfigResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicGetServerConfigResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetServerConfigResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicGetServerConfigResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetServerConfigResult.Succeeded)
}

// required int32 NumPartitions = 2;
inline bool PbRpcKVPublicGetServerConfigResult::has_numpartitions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicGetServerConfigResult::set_has_numpartitions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_has_numpartitions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_numpartitions() {
  numpartitions_ = 0;
  clear_has_numpartitions();
}
inline ::google::protobuf::int32 PbRpcKVPublicGetServerConfigResult::numpartitions() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetServerConfigResult.NumPartitions)
  return numpartitions_;
}
inline void PbRpcKVPublicGetServerConfigResult::set_numpartitions(::google::protobuf::int32 value) {
  set_has_numpartitions();
  numpartitions_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetServerConfigResult.NumPartitions)
}

// required int32 NumReplicasPerPartition = 3;
inline bool PbRpcKVPublicGetServerConfigResult::has_numreplicasperpartition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicGetServerConfigResult::set_has_numreplicasperpartition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_has_numreplicasperpartition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_numreplicasperpartition() {
  numreplicasperpartition_ = 0;
  clear_has_numreplicasperpartition();
}
inline ::google::protobuf::int32 PbRpcKVPublicGetServerConfigResult::numreplicasperpartition() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetServerConfigResult.NumReplicasPerPartition)
  return numreplicasperpartition_;
}
inline void PbRpcKVPublicGetServerConfigResult::set_numreplicasperpartition(::google::protobuf::int32 value) {
  set_has_numreplicasperpartition();
  numreplicasperpartition_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetServerConfigResult.NumReplicasPerPartition)
}

// required bool OptimisticMode = 4;
inline bool PbRpcKVPublicGetServerConfigResult::has_optimisticmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVPublicGetServerConfigResult::set_has_optimisticmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_has_optimisticmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_optimisticmode() {
  optimisticmode_ = false;
  clear_has_optimisticmode();
}
inline bool PbRpcKVPublicGetServerConfigResult::optimisticmode() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetServerConfigResult.OptimisticMode)
  return optimisticmode_;
}
inline void PbRpcKVPublicGetServerConfigResult::set_optimisticmode(bool value) {
  set_has_optimisticmode();
  optimisticmode_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetServerConfigResult.OptimisticMode)
}

// required int32 replicaId = 5;
inline bool PbRpcKVPublicGetServerConfigResult::has_replicaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVPublicGetServerConfigResult::set_has_replicaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_has_replicaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVPublicGetServerConfigResult::clear_replicaid() {
  replicaid_ = 0;
  clear_has_replicaid();
}
inline ::google::protobuf::int32 PbRpcKVPublicGetServerConfigResult::replicaid() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetServerConfigResult.replicaId)
  return replicaid_;
}
inline void PbRpcKVPublicGetServerConfigResult::set_replicaid(::google::protobuf::int32 value) {
  set_has_replicaid();
  replicaid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetServerConfigResult.replicaId)
}

// -------------------------------------------------------------------

// PbRpcKVPublicGetArg

// required bytes Key = 1;
inline bool PbRpcKVPublicGetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicGetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicGetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicGetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVPublicGetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetArg.Key)
  return *key_;
}
inline void PbRpcKVPublicGetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetArg.Key)
}
inline void PbRpcKVPublicGetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicGetArg.Key)
}
inline void PbRpcKVPublicGetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicGetArg.Key)
}
inline ::std::string* PbRpcKVPublicGetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVPublicGetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicGetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetArg.Key)
}

// optional .PbPhysicalTimeSpec GST = 2;
inline bool PbRpcKVPublicGetArg::has_gst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicGetArg::set_has_gst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicGetArg::clear_has_gst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicGetArg::clear_gst() {
  if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  clear_has_gst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetArg::gst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetArg.GST)
  return gst_ != NULL ? *gst_ : *default_instance_->gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::mutable_gst() {
  set_has_gst();
  if (gst_ == NULL) gst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetArg.GST)
  return gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::release_gst() {
  clear_has_gst();
  ::PbPhysicalTimeSpec* temp = gst_;
  gst_ = NULL;
  return temp;
}
inline void PbRpcKVPublicGetArg::set_allocated_gst(::PbPhysicalTimeSpec* gst) {
  delete gst_;
  gst_ = gst;
  if (gst) {
    set_has_gst();
  } else {
    clear_has_gst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetArg.GST)
}

// optional .PbPhysicalTimeSpec minLST = 3;
inline bool PbRpcKVPublicGetArg::has_minlst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicGetArg::set_has_minlst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicGetArg::clear_has_minlst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicGetArg::clear_minlst() {
  if (minlst_ != NULL) minlst_->::PbPhysicalTimeSpec::Clear();
  clear_has_minlst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetArg::minlst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetArg.minLST)
  return minlst_ != NULL ? *minlst_ : *default_instance_->minlst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::mutable_minlst() {
  set_has_minlst();
  if (minlst_ == NULL) minlst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetArg.minLST)
  return minlst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::release_minlst() {
  clear_has_minlst();
  ::PbPhysicalTimeSpec* temp = minlst_;
  minlst_ = NULL;
  return temp;
}
inline void PbRpcKVPublicGetArg::set_allocated_minlst(::PbPhysicalTimeSpec* minlst) {
  delete minlst_;
  minlst_ = minlst;
  if (minlst) {
    set_has_minlst();
  } else {
    clear_has_minlst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetArg.minLST)
}

// repeated .PbPhysicalTimeSpec NDV = 4;
inline int PbRpcKVPublicGetArg::ndv_size() const {
  return ndv_.size();
}
inline void PbRpcKVPublicGetArg::clear_ndv() {
  ndv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetArg::ndv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetArg.NDV)
  return ndv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::mutable_ndv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetArg.NDV)
  return ndv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::add_ndv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicGetArg.NDV)
  return ndv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicGetArg::ndv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicGetArg.NDV)
  return ndv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicGetArg::mutable_ndv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicGetArg.NDV)
  return &ndv_;
}

// repeated .PbPhysicalTimeSpec GSV = 5;
inline int PbRpcKVPublicGetArg::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcKVPublicGetArg::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetArg::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetArg.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetArg.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetArg::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicGetArg.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicGetArg::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicGetArg.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicGetArg::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicGetArg.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicGetResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetResult.Succeeded)
}

// required bytes GetValue = 2;
inline bool PbRpcKVPublicGetResult::has_getvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_getvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicGetResult::clear_has_getvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicGetResult::clear_getvalue() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_->clear();
  }
  clear_has_getvalue();
}
inline const ::std::string& PbRpcKVPublicGetResult::getvalue() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.GetValue)
  return *getvalue_;
}
inline void PbRpcKVPublicGetResult::set_getvalue(const ::std::string& value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetResult.GetValue)
}
inline void PbRpcKVPublicGetResult::set_getvalue(const char* value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicGetResult.GetValue)
}
inline void PbRpcKVPublicGetResult::set_getvalue(const void* value, size_t size) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicGetResult.GetValue)
}
inline ::std::string* PbRpcKVPublicGetResult::mutable_getvalue() {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.GetValue)
  return getvalue_;
}
inline ::std::string* PbRpcKVPublicGetResult::release_getvalue() {
  clear_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getvalue_;
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicGetResult::set_allocated_getvalue(::std::string* getvalue) {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (getvalue) {
    set_has_getvalue();
    getvalue_ = getvalue;
  } else {
    clear_has_getvalue();
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetResult.GetValue)
}

// optional .PbPhysicalTimeSpec DT = 3;
inline bool PbRpcKVPublicGetResult::has_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicGetResult::clear_has_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicGetResult::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetResult::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVPublicGetResult::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetResult.DT)
}

// optional .PbPhysicalTimeSpec GST = 4;
inline bool PbRpcKVPublicGetResult::has_gst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_gst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVPublicGetResult::clear_has_gst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVPublicGetResult::clear_gst() {
  if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  clear_has_gst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetResult::gst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.GST)
  return gst_ != NULL ? *gst_ : *default_instance_->gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::mutable_gst() {
  set_has_gst();
  if (gst_ == NULL) gst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.GST)
  return gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::release_gst() {
  clear_has_gst();
  ::PbPhysicalTimeSpec* temp = gst_;
  gst_ = NULL;
  return temp;
}
inline void PbRpcKVPublicGetResult::set_allocated_gst(::PbPhysicalTimeSpec* gst) {
  delete gst_;
  gst_ = gst;
  if (gst) {
    set_has_gst();
  } else {
    clear_has_gst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetResult.GST)
}

// optional .PbPhysicalTimeSpec DUT = 5;
inline bool PbRpcKVPublicGetResult::has_dut() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_dut() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVPublicGetResult::clear_has_dut() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVPublicGetResult::clear_dut() {
  if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
  clear_has_dut();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetResult::dut() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.DUT)
  return dut_ != NULL ? *dut_ : *default_instance_->dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::mutable_dut() {
  set_has_dut();
  if (dut_ == NULL) dut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.DUT)
  return dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::release_dut() {
  clear_has_dut();
  ::PbPhysicalTimeSpec* temp = dut_;
  dut_ = NULL;
  return temp;
}
inline void PbRpcKVPublicGetResult::set_allocated_dut(::PbPhysicalTimeSpec* dut) {
  delete dut_;
  dut_ = dut;
  if (dut) {
    set_has_dut();
  } else {
    clear_has_dut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetResult.DUT)
}

// optional bool Blocked = 6;
inline bool PbRpcKVPublicGetResult::has_blocked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_blocked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcKVPublicGetResult::clear_has_blocked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcKVPublicGetResult::clear_blocked() {
  blocked_ = false;
  clear_has_blocked();
}
inline bool PbRpcKVPublicGetResult::blocked() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.Blocked)
  return blocked_;
}
inline void PbRpcKVPublicGetResult::set_blocked(bool value) {
  set_has_blocked();
  blocked_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetResult.Blocked)
}

// optional bytes MinLSTKey = 7;
inline bool PbRpcKVPublicGetResult::has_minlstkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_minlstkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbRpcKVPublicGetResult::clear_has_minlstkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbRpcKVPublicGetResult::clear_minlstkey() {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_->clear();
  }
  clear_has_minlstkey();
}
inline const ::std::string& PbRpcKVPublicGetResult::minlstkey() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.MinLSTKey)
  return *minlstkey_;
}
inline void PbRpcKVPublicGetResult::set_minlstkey(const ::std::string& value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetResult.MinLSTKey)
}
inline void PbRpcKVPublicGetResult::set_minlstkey(const char* value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicGetResult.MinLSTKey)
}
inline void PbRpcKVPublicGetResult::set_minlstkey(const void* value, size_t size) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicGetResult.MinLSTKey)
}
inline ::std::string* PbRpcKVPublicGetResult::mutable_minlstkey() {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.MinLSTKey)
  return minlstkey_;
}
inline ::std::string* PbRpcKVPublicGetResult::release_minlstkey() {
  clear_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = minlstkey_;
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicGetResult::set_allocated_minlstkey(::std::string* minlstkey) {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (minlstkey) {
    set_has_minlstkey();
    minlstkey_ = minlstkey;
  } else {
    clear_has_minlstkey();
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicGetResult.MinLSTKey)
}

// repeated .PbPhysicalTimeSpec DV = 8;
inline int PbRpcKVPublicGetResult::dv_size() const {
  return dv_.size();
}
inline void PbRpcKVPublicGetResult::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetResult::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicGetResult.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicGetResult::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicGetResult.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicGetResult::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicGetResult.DV)
  return &dv_;
}

// optional int32 SrcReplica = 9;
inline bool PbRpcKVPublicGetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbRpcKVPublicGetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbRpcKVPublicGetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbRpcKVPublicGetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcKVPublicGetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcKVPublicGetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicGetResult.SrcReplica)
}

// repeated .PbPhysicalTimeSpec GSV = 10;
inline int PbRpcKVPublicGetResult::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcKVPublicGetResult::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicGetResult::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicGetResult.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicGetResult.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicGetResult::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicGetResult.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicGetResult::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicGetResult.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicGetResult::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicGetResult.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicSetArg

// required bytes Key = 1;
inline bool PbRpcKVPublicSetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicSetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicSetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicSetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVPublicSetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetArg.Key)
  return *key_;
}
inline void PbRpcKVPublicSetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicSetArg.Key)
}
inline void PbRpcKVPublicSetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicSetArg.Key)
}
inline void PbRpcKVPublicSetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicSetArg.Key)
}
inline ::std::string* PbRpcKVPublicSetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVPublicSetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicSetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicSetArg.Key)
}

// required bytes Value = 2;
inline bool PbRpcKVPublicSetArg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicSetArg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicSetArg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicSetArg::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbRpcKVPublicSetArg::value() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetArg.Value)
  return *value_;
}
inline void PbRpcKVPublicSetArg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicSetArg.Value)
}
inline void PbRpcKVPublicSetArg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicSetArg.Value)
}
inline void PbRpcKVPublicSetArg::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicSetArg.Value)
}
inline ::std::string* PbRpcKVPublicSetArg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetArg.Value)
  return value_;
}
inline ::std::string* PbRpcKVPublicSetArg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicSetArg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicSetArg.Value)
}

// optional .PbPhysicalTimeSpec DT = 3;
inline bool PbRpcKVPublicSetArg::has_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicSetArg::set_has_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicSetArg::clear_has_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicSetArg::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicSetArg::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetArg.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetArg::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetArg.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetArg::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVPublicSetArg::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicSetArg.DT)
}

// optional bytes MinLSTKey = 4;
inline bool PbRpcKVPublicSetArg::has_minlstkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVPublicSetArg::set_has_minlstkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVPublicSetArg::clear_has_minlstkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVPublicSetArg::clear_minlstkey() {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_->clear();
  }
  clear_has_minlstkey();
}
inline const ::std::string& PbRpcKVPublicSetArg::minlstkey() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetArg.MinLSTKey)
  return *minlstkey_;
}
inline void PbRpcKVPublicSetArg::set_minlstkey(const ::std::string& value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicSetArg.MinLSTKey)
}
inline void PbRpcKVPublicSetArg::set_minlstkey(const char* value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicSetArg.MinLSTKey)
}
inline void PbRpcKVPublicSetArg::set_minlstkey(const void* value, size_t size) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicSetArg.MinLSTKey)
}
inline ::std::string* PbRpcKVPublicSetArg::mutable_minlstkey() {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetArg.MinLSTKey)
  return minlstkey_;
}
inline ::std::string* PbRpcKVPublicSetArg::release_minlstkey() {
  clear_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = minlstkey_;
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicSetArg::set_allocated_minlstkey(::std::string* minlstkey) {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (minlstkey) {
    set_has_minlstkey();
    minlstkey_ = minlstkey;
  } else {
    clear_has_minlstkey();
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicSetArg.MinLSTKey)
}

// repeated .PbPhysicalTimeSpec DV = 5;
inline int PbRpcKVPublicSetArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcKVPublicSetArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicSetArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicSetArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicSetArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicSetArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicSetArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicSetArg.DV)
  return &dv_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicSetResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicSetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicSetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicSetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicSetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicSetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicSetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicSetResult.Succeeded)
}

// optional .PbPhysicalTimeSpec DT = 2;
inline bool PbRpcKVPublicSetResult::has_dt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicSetResult::set_has_dt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicSetResult::clear_has_dt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicSetResult::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicSetResult::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetResult.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetResult::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicSetResult.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicSetResult::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVPublicSetResult::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicSetResult.DT)
}

// optional int32 SrcReplica = 3;
inline bool PbRpcKVPublicSetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicSetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicSetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicSetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcKVPublicSetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicSetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcKVPublicSetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicSetResult.SrcReplica)
}

// -------------------------------------------------------------------

// PbRpcKVPublicTxGetArg

// repeated bytes Key = 1;
inline int PbRpcKVPublicTxGetArg::key_size() const {
  return key_.size();
}
inline void PbRpcKVPublicTxGetArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcKVPublicTxGetArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcKVPublicTxGetArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcKVPublicTxGetArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcKVPublicTxGetArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcKVPublicTxGetArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicTxGetArg.Key)
}
inline void PbRpcKVPublicTxGetArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicTxGetArg.Key)
}
inline ::std::string* PbRpcKVPublicTxGetArg::add_key() {
  return key_.Add();
}
inline void PbRpcKVPublicTxGetArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcKVPublicTxGetArg.Key)
}
inline void PbRpcKVPublicTxGetArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcKVPublicTxGetArg.Key)
}
inline void PbRpcKVPublicTxGetArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcKVPublicTxGetArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcKVPublicTxGetArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicTxGetArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcKVPublicTxGetArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicTxGetArg.Key)
  return &key_;
}

// optional .PbPhysicalTimeSpec ST = 2;
inline bool PbRpcKVPublicTxGetArg::has_st() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicTxGetArg::set_has_st() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicTxGetArg::clear_has_st() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicTxGetArg::clear_st() {
  if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
  clear_has_st();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetArg::st() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetArg.ST)
  return st_ != NULL ? *st_ : *default_instance_->st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::mutable_st() {
  set_has_st();
  if (st_ == NULL) st_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetArg.ST)
  return st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::release_st() {
  clear_has_st();
  ::PbPhysicalTimeSpec* temp = st_;
  st_ = NULL;
  return temp;
}
inline void PbRpcKVPublicTxGetArg::set_allocated_st(::PbPhysicalTimeSpec* st) {
  delete st_;
  st_ = st;
  if (st) {
    set_has_st();
  } else {
    clear_has_st();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicTxGetArg.ST)
}

// optional .PbPhysicalTimeSpec UT = 3;
inline bool PbRpcKVPublicTxGetArg::has_ut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicTxGetArg::set_has_ut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicTxGetArg::clear_has_ut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicTxGetArg::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetArg::ut() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetArg.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetArg.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbRpcKVPublicTxGetArg::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicTxGetArg.UT)
}

// repeated .PbPhysicalTimeSpec SV = 4;
inline int PbRpcKVPublicTxGetArg::sv_size() const {
  return sv_.size();
}
inline void PbRpcKVPublicTxGetArg::clear_sv() {
  sv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetArg::sv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetArg.SV)
  return sv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::mutable_sv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetArg.SV)
  return sv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetArg::add_sv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicTxGetArg.SV)
  return sv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicTxGetArg::sv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicTxGetArg.SV)
  return sv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicTxGetArg::mutable_sv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicTxGetArg.SV)
  return &sv_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicTxGetResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicTxGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicTxGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicTxGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicTxGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicTxGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicTxGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicTxGetResult.Succeeded)
}

// repeated bytes GetValue = 2;
inline int PbRpcKVPublicTxGetResult::getvalue_size() const {
  return getvalue_.size();
}
inline void PbRpcKVPublicTxGetResult::clear_getvalue() {
  getvalue_.Clear();
}
inline const ::std::string& PbRpcKVPublicTxGetResult::getvalue(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.GetValue)
  return getvalue_.Get(index);
}
inline ::std::string* PbRpcKVPublicTxGetResult::mutable_getvalue(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetResult.GetValue)
  return getvalue_.Mutable(index);
}
inline void PbRpcKVPublicTxGetResult::set_getvalue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcKVPublicTxGetResult.GetValue)
  getvalue_.Mutable(index)->assign(value);
}
inline void PbRpcKVPublicTxGetResult::set_getvalue(int index, const char* value) {
  getvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicTxGetResult.GetValue)
}
inline void PbRpcKVPublicTxGetResult::set_getvalue(int index, const void* value, size_t size) {
  getvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicTxGetResult.GetValue)
}
inline ::std::string* PbRpcKVPublicTxGetResult::add_getvalue() {
  return getvalue_.Add();
}
inline void PbRpcKVPublicTxGetResult::add_getvalue(const ::std::string& value) {
  getvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcKVPublicTxGetResult.GetValue)
}
inline void PbRpcKVPublicTxGetResult::add_getvalue(const char* value) {
  getvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcKVPublicTxGetResult.GetValue)
}
inline void PbRpcKVPublicTxGetResult::add_getvalue(const void* value, size_t size) {
  getvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcKVPublicTxGetResult.GetValue)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcKVPublicTxGetResult::getvalue() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicTxGetResult.GetValue)
  return getvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcKVPublicTxGetResult::mutable_getvalue() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicTxGetResult.GetValue)
  return &getvalue_;
}

// optional .PbPhysicalTimeSpec ST = 3;
inline bool PbRpcKVPublicTxGetResult::has_st() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVPublicTxGetResult::set_has_st() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVPublicTxGetResult::clear_has_st() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVPublicTxGetResult::clear_st() {
  if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
  clear_has_st();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetResult::st() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.ST)
  return st_ != NULL ? *st_ : *default_instance_->st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::mutable_st() {
  set_has_st();
  if (st_ == NULL) st_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetResult.ST)
  return st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::release_st() {
  clear_has_st();
  ::PbPhysicalTimeSpec* temp = st_;
  st_ = NULL;
  return temp;
}
inline void PbRpcKVPublicTxGetResult::set_allocated_st(::PbPhysicalTimeSpec* st) {
  delete st_;
  st_ = st;
  if (st) {
    set_has_st();
  } else {
    clear_has_st();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicTxGetResult.ST)
}

// repeated .PbPhysicalTimeSpec SV = 4;
inline int PbRpcKVPublicTxGetResult::sv_size() const {
  return sv_.size();
}
inline void PbRpcKVPublicTxGetResult::clear_sv() {
  sv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetResult::sv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.SV)
  return sv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::mutable_sv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetResult.SV)
  return sv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::add_sv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicTxGetResult.SV)
  return sv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicTxGetResult::sv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicTxGetResult.SV)
  return sv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicTxGetResult::mutable_sv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicTxGetResult.SV)
  return &sv_;
}

// optional .PbPhysicalTimeSpec UT = 5;
inline bool PbRpcKVPublicTxGetResult::has_ut() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVPublicTxGetResult::set_has_ut() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVPublicTxGetResult::clear_has_ut() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVPublicTxGetResult::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetResult::ut() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetResult.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbRpcKVPublicTxGetResult::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicTxGetResult.UT)
}

// repeated .PbPhysicalTimeSpec UV = 6;
inline int PbRpcKVPublicTxGetResult::uv_size() const {
  return uv_.size();
}
inline void PbRpcKVPublicTxGetResult::clear_uv() {
  uv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicTxGetResult::uv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicTxGetResult.UV)
  return uv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::mutable_uv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicTxGetResult.UV)
  return uv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicTxGetResult::add_uv() {
  // @@protoc_insertion_point(field_add:PbRpcKVPublicTxGetResult.UV)
  return uv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVPublicTxGetResult::uv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicTxGetResult.UV)
  return uv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVPublicTxGetResult::mutable_uv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicTxGetResult.UV)
  return &uv_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicShowArg

// optional bytes Key = 1;
inline bool PbRpcKVPublicShowArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicShowArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicShowArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicShowArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVPublicShowArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicShowArg.Key)
  return *key_;
}
inline void PbRpcKVPublicShowArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicShowArg.Key)
}
inline void PbRpcKVPublicShowArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicShowArg.Key)
}
inline void PbRpcKVPublicShowArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicShowArg.Key)
}
inline ::std::string* PbRpcKVPublicShowArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicShowArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVPublicShowArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicShowArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicShowArg.Key)
}

// -------------------------------------------------------------------

// PbRpcKVPublicShowResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicShowResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicShowResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicShowResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicShowResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicShowResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicShowResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicShowResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicShowResult.Succeeded)
}

// required bytes ReturnString = 2;
inline bool PbRpcKVPublicShowResult::has_returnstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicShowResult::set_has_returnstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicShowResult::clear_has_returnstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicShowResult::clear_returnstring() {
  if (returnstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    returnstring_->clear();
  }
  clear_has_returnstring();
}
inline const ::std::string& PbRpcKVPublicShowResult::returnstring() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicShowResult.ReturnString)
  return *returnstring_;
}
inline void PbRpcKVPublicShowResult::set_returnstring(const ::std::string& value) {
  set_has_returnstring();
  if (returnstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    returnstring_ = new ::std::string;
  }
  returnstring_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVPublicShowResult.ReturnString)
}
inline void PbRpcKVPublicShowResult::set_returnstring(const char* value) {
  set_has_returnstring();
  if (returnstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    returnstring_ = new ::std::string;
  }
  returnstring_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicShowResult.ReturnString)
}
inline void PbRpcKVPublicShowResult::set_returnstring(const void* value, size_t size) {
  set_has_returnstring();
  if (returnstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    returnstring_ = new ::std::string;
  }
  returnstring_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicShowResult.ReturnString)
}
inline ::std::string* PbRpcKVPublicShowResult::mutable_returnstring() {
  set_has_returnstring();
  if (returnstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    returnstring_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicShowResult.ReturnString)
  return returnstring_;
}
inline ::std::string* PbRpcKVPublicShowResult::release_returnstring() {
  clear_has_returnstring();
  if (returnstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = returnstring_;
    returnstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVPublicShowResult::set_allocated_returnstring(::std::string* returnstring) {
  if (returnstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete returnstring_;
  }
  if (returnstring) {
    set_has_returnstring();
    returnstring_ = returnstring;
  } else {
    clear_has_returnstring();
    returnstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicShowResult.ReturnString)
}

// -------------------------------------------------------------------

// PbRpcKVInternalGetArg

// required bytes Key = 1;
inline bool PbRpcKVInternalGetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalGetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalGetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalGetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVInternalGetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetArg.Key)
  return *key_;
}
inline void PbRpcKVInternalGetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetArg.Key)
}
inline void PbRpcKVInternalGetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalGetArg.Key)
}
inline void PbRpcKVInternalGetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalGetArg.Key)
}
inline ::std::string* PbRpcKVInternalGetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVInternalGetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalGetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetArg.Key)
}

// optional .PbPhysicalTimeSpec GST = 2;
inline bool PbRpcKVInternalGetArg::has_gst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalGetArg::set_has_gst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalGetArg::clear_has_gst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalGetArg::clear_gst() {
  if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  clear_has_gst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetArg::gst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetArg.GST)
  return gst_ != NULL ? *gst_ : *default_instance_->gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::mutable_gst() {
  set_has_gst();
  if (gst_ == NULL) gst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetArg.GST)
  return gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::release_gst() {
  clear_has_gst();
  ::PbPhysicalTimeSpec* temp = gst_;
  gst_ = NULL;
  return temp;
}
inline void PbRpcKVInternalGetArg::set_allocated_gst(::PbPhysicalTimeSpec* gst) {
  delete gst_;
  gst_ = gst;
  if (gst) {
    set_has_gst();
  } else {
    clear_has_gst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetArg.GST)
}

// optional .PbPhysicalTimeSpec minLST = 3;
inline bool PbRpcKVInternalGetArg::has_minlst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalGetArg::set_has_minlst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalGetArg::clear_has_minlst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalGetArg::clear_minlst() {
  if (minlst_ != NULL) minlst_->::PbPhysicalTimeSpec::Clear();
  clear_has_minlst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetArg::minlst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetArg.minLST)
  return minlst_ != NULL ? *minlst_ : *default_instance_->minlst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::mutable_minlst() {
  set_has_minlst();
  if (minlst_ == NULL) minlst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetArg.minLST)
  return minlst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::release_minlst() {
  clear_has_minlst();
  ::PbPhysicalTimeSpec* temp = minlst_;
  minlst_ = NULL;
  return temp;
}
inline void PbRpcKVInternalGetArg::set_allocated_minlst(::PbPhysicalTimeSpec* minlst) {
  delete minlst_;
  minlst_ = minlst;
  if (minlst) {
    set_has_minlst();
  } else {
    clear_has_minlst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetArg.minLST)
}

// repeated .PbPhysicalTimeSpec NDV = 4;
inline int PbRpcKVInternalGetArg::ndv_size() const {
  return ndv_.size();
}
inline void PbRpcKVInternalGetArg::clear_ndv() {
  ndv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetArg::ndv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetArg.NDV)
  return ndv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::mutable_ndv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetArg.NDV)
  return ndv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::add_ndv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalGetArg.NDV)
  return ndv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalGetArg::ndv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalGetArg.NDV)
  return ndv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalGetArg::mutable_ndv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalGetArg.NDV)
  return &ndv_;
}

// repeated .PbPhysicalTimeSpec GSV = 5;
inline int PbRpcKVInternalGetArg::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcKVInternalGetArg::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetArg::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetArg.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetArg.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetArg::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalGetArg.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalGetArg::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalGetArg.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalGetArg::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalGetArg.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcKVInternalGetResult

// required bool Succeeded = 1;
inline bool PbRpcKVInternalGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVInternalGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVInternalGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetResult.Succeeded)
}

// required bytes GetValue = 2;
inline bool PbRpcKVInternalGetResult::has_getvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_getvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalGetResult::clear_has_getvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalGetResult::clear_getvalue() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_->clear();
  }
  clear_has_getvalue();
}
inline const ::std::string& PbRpcKVInternalGetResult::getvalue() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.GetValue)
  return *getvalue_;
}
inline void PbRpcKVInternalGetResult::set_getvalue(const ::std::string& value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetResult.GetValue)
}
inline void PbRpcKVInternalGetResult::set_getvalue(const char* value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalGetResult.GetValue)
}
inline void PbRpcKVInternalGetResult::set_getvalue(const void* value, size_t size) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalGetResult.GetValue)
}
inline ::std::string* PbRpcKVInternalGetResult::mutable_getvalue() {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.GetValue)
  return getvalue_;
}
inline ::std::string* PbRpcKVInternalGetResult::release_getvalue() {
  clear_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getvalue_;
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalGetResult::set_allocated_getvalue(::std::string* getvalue) {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (getvalue) {
    set_has_getvalue();
    getvalue_ = getvalue;
  } else {
    clear_has_getvalue();
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetResult.GetValue)
}

// optional .PbPhysicalTimeSpec DT = 3;
inline bool PbRpcKVInternalGetResult::has_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalGetResult::clear_has_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalGetResult::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetResult::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVInternalGetResult::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetResult.DT)
}

// optional .PbPhysicalTimeSpec GST = 4;
inline bool PbRpcKVInternalGetResult::has_gst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_gst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVInternalGetResult::clear_has_gst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVInternalGetResult::clear_gst() {
  if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  clear_has_gst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetResult::gst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.GST)
  return gst_ != NULL ? *gst_ : *default_instance_->gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::mutable_gst() {
  set_has_gst();
  if (gst_ == NULL) gst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.GST)
  return gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::release_gst() {
  clear_has_gst();
  ::PbPhysicalTimeSpec* temp = gst_;
  gst_ = NULL;
  return temp;
}
inline void PbRpcKVInternalGetResult::set_allocated_gst(::PbPhysicalTimeSpec* gst) {
  delete gst_;
  gst_ = gst;
  if (gst) {
    set_has_gst();
  } else {
    clear_has_gst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetResult.GST)
}

// optional .PbPhysicalTimeSpec DUT = 5;
inline bool PbRpcKVInternalGetResult::has_dut() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_dut() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVInternalGetResult::clear_has_dut() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVInternalGetResult::clear_dut() {
  if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
  clear_has_dut();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetResult::dut() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.DUT)
  return dut_ != NULL ? *dut_ : *default_instance_->dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::mutable_dut() {
  set_has_dut();
  if (dut_ == NULL) dut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.DUT)
  return dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::release_dut() {
  clear_has_dut();
  ::PbPhysicalTimeSpec* temp = dut_;
  dut_ = NULL;
  return temp;
}
inline void PbRpcKVInternalGetResult::set_allocated_dut(::PbPhysicalTimeSpec* dut) {
  delete dut_;
  dut_ = dut;
  if (dut) {
    set_has_dut();
  } else {
    clear_has_dut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetResult.DUT)
}

// optional bytes MinLSTKey = 6;
inline bool PbRpcKVInternalGetResult::has_minlstkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_minlstkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcKVInternalGetResult::clear_has_minlstkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcKVInternalGetResult::clear_minlstkey() {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_->clear();
  }
  clear_has_minlstkey();
}
inline const ::std::string& PbRpcKVInternalGetResult::minlstkey() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.MinLSTKey)
  return *minlstkey_;
}
inline void PbRpcKVInternalGetResult::set_minlstkey(const ::std::string& value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetResult.MinLSTKey)
}
inline void PbRpcKVInternalGetResult::set_minlstkey(const char* value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalGetResult.MinLSTKey)
}
inline void PbRpcKVInternalGetResult::set_minlstkey(const void* value, size_t size) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalGetResult.MinLSTKey)
}
inline ::std::string* PbRpcKVInternalGetResult::mutable_minlstkey() {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.MinLSTKey)
  return minlstkey_;
}
inline ::std::string* PbRpcKVInternalGetResult::release_minlstkey() {
  clear_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = minlstkey_;
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalGetResult::set_allocated_minlstkey(::std::string* minlstkey) {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (minlstkey) {
    set_has_minlstkey();
    minlstkey_ = minlstkey;
  } else {
    clear_has_minlstkey();
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalGetResult.MinLSTKey)
}

// optional bool Blocked = 7;
inline bool PbRpcKVInternalGetResult::has_blocked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_blocked() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbRpcKVInternalGetResult::clear_has_blocked() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbRpcKVInternalGetResult::clear_blocked() {
  blocked_ = false;
  clear_has_blocked();
}
inline bool PbRpcKVInternalGetResult::blocked() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.Blocked)
  return blocked_;
}
inline void PbRpcKVInternalGetResult::set_blocked(bool value) {
  set_has_blocked();
  blocked_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetResult.Blocked)
}

// repeated .PbPhysicalTimeSpec DV = 8;
inline int PbRpcKVInternalGetResult::dv_size() const {
  return dv_.size();
}
inline void PbRpcKVInternalGetResult::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetResult::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalGetResult.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalGetResult::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalGetResult.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalGetResult::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalGetResult.DV)
  return &dv_;
}

// optional int32 SrcReplica = 9;
inline bool PbRpcKVInternalGetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbRpcKVInternalGetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbRpcKVInternalGetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbRpcKVInternalGetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcKVInternalGetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcKVInternalGetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalGetResult.SrcReplica)
}

// repeated .PbPhysicalTimeSpec GSV = 10;
inline int PbRpcKVInternalGetResult::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcKVInternalGetResult::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalGetResult::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalGetResult.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalGetResult.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalGetResult::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalGetResult.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalGetResult::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalGetResult.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalGetResult::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalGetResult.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcKVInternalSetArg

// required bytes Key = 1;
inline bool PbRpcKVInternalSetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalSetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalSetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalSetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVInternalSetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetArg.Key)
  return *key_;
}
inline void PbRpcKVInternalSetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalSetArg.Key)
}
inline void PbRpcKVInternalSetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalSetArg.Key)
}
inline void PbRpcKVInternalSetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalSetArg.Key)
}
inline ::std::string* PbRpcKVInternalSetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVInternalSetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalSetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalSetArg.Key)
}

// required bytes Value = 2;
inline bool PbRpcKVInternalSetArg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalSetArg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalSetArg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalSetArg::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbRpcKVInternalSetArg::value() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetArg.Value)
  return *value_;
}
inline void PbRpcKVInternalSetArg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalSetArg.Value)
}
inline void PbRpcKVInternalSetArg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalSetArg.Value)
}
inline void PbRpcKVInternalSetArg::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalSetArg.Value)
}
inline ::std::string* PbRpcKVInternalSetArg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetArg.Value)
  return value_;
}
inline ::std::string* PbRpcKVInternalSetArg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalSetArg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalSetArg.Value)
}

// optional .PbPhysicalTimeSpec DT = 3;
inline bool PbRpcKVInternalSetArg::has_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalSetArg::set_has_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalSetArg::clear_has_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalSetArg::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalSetArg::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetArg.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetArg::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetArg.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetArg::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVInternalSetArg::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalSetArg.DT)
}

// optional bytes MinLSTKey = 4;
inline bool PbRpcKVInternalSetArg::has_minlstkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVInternalSetArg::set_has_minlstkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVInternalSetArg::clear_has_minlstkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVInternalSetArg::clear_minlstkey() {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_->clear();
  }
  clear_has_minlstkey();
}
inline const ::std::string& PbRpcKVInternalSetArg::minlstkey() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetArg.MinLSTKey)
  return *minlstkey_;
}
inline void PbRpcKVInternalSetArg::set_minlstkey(const ::std::string& value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalSetArg.MinLSTKey)
}
inline void PbRpcKVInternalSetArg::set_minlstkey(const char* value) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalSetArg.MinLSTKey)
}
inline void PbRpcKVInternalSetArg::set_minlstkey(const void* value, size_t size) {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  minlstkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalSetArg.MinLSTKey)
}
inline ::std::string* PbRpcKVInternalSetArg::mutable_minlstkey() {
  set_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minlstkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetArg.MinLSTKey)
  return minlstkey_;
}
inline ::std::string* PbRpcKVInternalSetArg::release_minlstkey() {
  clear_has_minlstkey();
  if (minlstkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = minlstkey_;
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalSetArg::set_allocated_minlstkey(::std::string* minlstkey) {
  if (minlstkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minlstkey_;
  }
  if (minlstkey) {
    set_has_minlstkey();
    minlstkey_ = minlstkey;
  } else {
    clear_has_minlstkey();
    minlstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalSetArg.MinLSTKey)
}

// repeated .PbPhysicalTimeSpec DV = 5;
inline int PbRpcKVInternalSetArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcKVInternalSetArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalSetArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalSetArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalSetArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalSetArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalSetArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalSetArg.DV)
  return &dv_;
}

// -------------------------------------------------------------------

// PbRpcKVInternalSetResult

// required bool Succeeded = 1;
inline bool PbRpcKVInternalSetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalSetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalSetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalSetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVInternalSetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVInternalSetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalSetResult.Succeeded)
}

// optional .PbPhysicalTimeSpec DT = 2;
inline bool PbRpcKVInternalSetResult::has_dt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalSetResult::set_has_dt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalSetResult::clear_has_dt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalSetResult::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalSetResult::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetResult.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetResult::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalSetResult.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalSetResult::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVInternalSetResult::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalSetResult.DT)
}

// optional int32 SrcReplica = 3;
inline bool PbRpcKVInternalSetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalSetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalSetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalSetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcKVInternalSetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalSetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcKVInternalSetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalSetResult.SrcReplica)
}

// -------------------------------------------------------------------

// PbRpcKVInternalTxSliceGetArg

// required bytes Key = 1;
inline bool PbRpcKVInternalTxSliceGetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalTxSliceGetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVInternalTxSliceGetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetArg.Key)
  return *key_;
}
inline void PbRpcKVInternalTxSliceGetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetArg.Key)
}
inline void PbRpcKVInternalTxSliceGetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalTxSliceGetArg.Key)
}
inline void PbRpcKVInternalTxSliceGetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalTxSliceGetArg.Key)
}
inline ::std::string* PbRpcKVInternalTxSliceGetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVInternalTxSliceGetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalTxSliceGetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetArg.Key)
}

// optional .PbPhysicalTimeSpec ST = 2;
inline bool PbRpcKVInternalTxSliceGetArg::has_st() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalTxSliceGetArg::set_has_st() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_has_st() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_st() {
  if (st_ != NULL) st_->::PbPhysicalTimeSpec::Clear();
  clear_has_st();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetArg::st() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetArg.ST)
  return st_ != NULL ? *st_ : *default_instance_->st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetArg::mutable_st() {
  set_has_st();
  if (st_ == NULL) st_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetArg.ST)
  return st_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetArg::release_st() {
  clear_has_st();
  ::PbPhysicalTimeSpec* temp = st_;
  st_ = NULL;
  return temp;
}
inline void PbRpcKVInternalTxSliceGetArg::set_allocated_st(::PbPhysicalTimeSpec* st) {
  delete st_;
  st_ = st;
  if (st) {
    set_has_st();
  } else {
    clear_has_st();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetArg.ST)
}

// repeated .PbPhysicalTimeSpec SV = 3;
inline int PbRpcKVInternalTxSliceGetArg::sv_size() const {
  return sv_.size();
}
inline void PbRpcKVInternalTxSliceGetArg::clear_sv() {
  sv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetArg::sv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetArg.SV)
  return sv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetArg::mutable_sv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetArg.SV)
  return sv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetArg::add_sv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalTxSliceGetArg.SV)
  return sv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalTxSliceGetArg::sv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalTxSliceGetArg.SV)
  return sv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalTxSliceGetArg::mutable_sv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalTxSliceGetArg.SV)
  return &sv_;
}

// optional int64 id = 4;
inline bool PbRpcKVInternalTxSliceGetArg::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVInternalTxSliceGetArg::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcKVInternalTxSliceGetArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetArg.id)
  return id_;
}
inline void PbRpcKVInternalTxSliceGetArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetArg.id)
}

// optional int64 src = 5;
inline bool PbRpcKVInternalTxSliceGetArg::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVInternalTxSliceGetArg::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVInternalTxSliceGetArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcKVInternalTxSliceGetArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetArg.src)
  return src_;
}
inline void PbRpcKVInternalTxSliceGetArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetArg.src)
}

// -------------------------------------------------------------------

// PbRpcKVInternalTxSliceGetResult

// required bool Succeeded = 1;
inline bool PbRpcKVInternalTxSliceGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVInternalTxSliceGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.Succeeded)
}

// required bytes GetValue = 2;
inline bool PbRpcKVInternalTxSliceGetResult::has_getvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_getvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_getvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_getvalue() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_->clear();
  }
  clear_has_getvalue();
}
inline const ::std::string& PbRpcKVInternalTxSliceGetResult::getvalue() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.GetValue)
  return *getvalue_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_getvalue(const ::std::string& value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcKVInternalTxSliceGetResult::set_getvalue(const char* value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcKVInternalTxSliceGetResult::set_getvalue(const void* value, size_t size) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalTxSliceGetResult.GetValue)
}
inline ::std::string* PbRpcKVInternalTxSliceGetResult::mutable_getvalue() {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.GetValue)
  return getvalue_;
}
inline ::std::string* PbRpcKVInternalTxSliceGetResult::release_getvalue() {
  clear_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getvalue_;
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalTxSliceGetResult::set_allocated_getvalue(::std::string* getvalue) {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (getvalue) {
    set_has_getvalue();
    getvalue_ = getvalue;
  } else {
    clear_has_getvalue();
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetResult.GetValue)
}

// optional .PbPhysicalTimeSpec DT = 3;
inline bool PbRpcKVInternalTxSliceGetResult::has_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_dt() {
  if (dt_ != NULL) dt_->::PbPhysicalTimeSpec::Clear();
  clear_has_dt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::dt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.DT)
  return dt_ != NULL ? *dt_ : *default_instance_->dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_dt() {
  set_has_dt();
  if (dt_ == NULL) dt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.DT)
  return dt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::release_dt() {
  clear_has_dt();
  ::PbPhysicalTimeSpec* temp = dt_;
  dt_ = NULL;
  return temp;
}
inline void PbRpcKVInternalTxSliceGetResult::set_allocated_dt(::PbPhysicalTimeSpec* dt) {
  delete dt_;
  dt_ = dt;
  if (dt) {
    set_has_dt();
  } else {
    clear_has_dt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetResult.DT)
}

// optional .PbPhysicalTimeSpec GST = 4;
inline bool PbRpcKVInternalTxSliceGetResult::has_gst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_gst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_gst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_gst() {
  if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  clear_has_gst();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::gst() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.GST)
  return gst_ != NULL ? *gst_ : *default_instance_->gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_gst() {
  set_has_gst();
  if (gst_ == NULL) gst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.GST)
  return gst_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::release_gst() {
  clear_has_gst();
  ::PbPhysicalTimeSpec* temp = gst_;
  gst_ = NULL;
  return temp;
}
inline void PbRpcKVInternalTxSliceGetResult::set_allocated_gst(::PbPhysicalTimeSpec* gst) {
  delete gst_;
  gst_ = gst;
  if (gst) {
    set_has_gst();
  } else {
    clear_has_gst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetResult.GST)
}

// optional .PbPhysicalTimeSpec DUT = 5;
inline bool PbRpcKVInternalTxSliceGetResult::has_dut() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_dut() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_dut() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_dut() {
  if (dut_ != NULL) dut_->::PbPhysicalTimeSpec::Clear();
  clear_has_dut();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::dut() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.DUT)
  return dut_ != NULL ? *dut_ : *default_instance_->dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_dut() {
  set_has_dut();
  if (dut_ == NULL) dut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.DUT)
  return dut_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::release_dut() {
  clear_has_dut();
  ::PbPhysicalTimeSpec* temp = dut_;
  dut_ = NULL;
  return temp;
}
inline void PbRpcKVInternalTxSliceGetResult::set_allocated_dut(::PbPhysicalTimeSpec* dut) {
  delete dut_;
  dut_ = dut;
  if (dut) {
    set_has_dut();
  } else {
    clear_has_dut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalTxSliceGetResult.DUT)
}

// repeated .PbPhysicalTimeSpec DV = 6;
inline int PbRpcKVInternalTxSliceGetResult::dv_size() const {
  return dv_.size();
}
inline void PbRpcKVInternalTxSliceGetResult::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalTxSliceGetResult.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalTxSliceGetResult::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalTxSliceGetResult.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalTxSliceGetResult::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalTxSliceGetResult.DV)
  return &dv_;
}

// repeated .PbPhysicalTimeSpec NDV = 7;
inline int PbRpcKVInternalTxSliceGetResult::ndv_size() const {
  return ndv_.size();
}
inline void PbRpcKVInternalTxSliceGetResult::clear_ndv() {
  ndv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::ndv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.NDV)
  return ndv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_ndv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.NDV)
  return ndv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::add_ndv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalTxSliceGetResult.NDV)
  return ndv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalTxSliceGetResult::ndv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalTxSliceGetResult.NDV)
  return ndv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalTxSliceGetResult::mutable_ndv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalTxSliceGetResult.NDV)
  return &ndv_;
}

// repeated .PbPhysicalTimeSpec GSV = 8;
inline int PbRpcKVInternalTxSliceGetResult::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcKVInternalTxSliceGetResult::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalTxSliceGetResult::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalTxSliceGetResult.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalTxSliceGetResult::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcKVInternalTxSliceGetResult.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcKVInternalTxSliceGetResult::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcKVInternalTxSliceGetResult.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcKVInternalTxSliceGetResult::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVInternalTxSliceGetResult.GSV)
  return &gsv_;
}

// optional int32 SrcReplica = 9;
inline bool PbRpcKVInternalTxSliceGetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcKVInternalTxSliceGetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.SrcReplica)
}

// optional double waitedXact = 10;
inline bool PbRpcKVInternalTxSliceGetResult::has_waitedxact() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_waitedxact() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_waitedxact() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_waitedxact() {
  waitedxact_ = 0;
  clear_has_waitedxact();
}
inline double PbRpcKVInternalTxSliceGetResult::waitedxact() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.waitedXact)
  return waitedxact_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_waitedxact(double value) {
  set_has_waitedxact();
  waitedxact_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.waitedXact)
}

// optional int64 id = 11;
inline bool PbRpcKVInternalTxSliceGetResult::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcKVInternalTxSliceGetResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.id)
  return id_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.id)
}

// optional int64 src = 12;
inline bool PbRpcKVInternalTxSliceGetResult::has_src() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PbRpcKVInternalTxSliceGetResult::set_has_src() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PbRpcKVInternalTxSliceGetResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcKVInternalTxSliceGetResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalTxSliceGetResult.src)
  return src_;
}
inline void PbRpcKVInternalTxSliceGetResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalTxSliceGetResult.src)
}

// -------------------------------------------------------------------

// PbRpcKVInternalShowItemArg

// required bytes Key = 1;
inline bool PbRpcKVInternalShowItemArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalShowItemArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalShowItemArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalShowItemArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcKVInternalShowItemArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalShowItemArg.Key)
  return *key_;
}
inline void PbRpcKVInternalShowItemArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalShowItemArg.Key)
}
inline void PbRpcKVInternalShowItemArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalShowItemArg.Key)
}
inline void PbRpcKVInternalShowItemArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalShowItemArg.Key)
}
inline ::std::string* PbRpcKVInternalShowItemArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalShowItemArg.Key)
  return key_;
}
inline ::std::string* PbRpcKVInternalShowItemArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalShowItemArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalShowItemArg.Key)
}

// -------------------------------------------------------------------

// PbRpcKVInternalShowItemResult

// required bool Succeeded = 1;
inline bool PbRpcKVInternalShowItemResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalShowItemResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalShowItemResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalShowItemResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVInternalShowItemResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalShowItemResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVInternalShowItemResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalShowItemResult.Succeeded)
}

// required bytes ItemVersions = 2;
inline bool PbRpcKVInternalShowItemResult::has_itemversions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalShowItemResult::set_has_itemversions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalShowItemResult::clear_has_itemversions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalShowItemResult::clear_itemversions() {
  if (itemversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemversions_->clear();
  }
  clear_has_itemversions();
}
inline const ::std::string& PbRpcKVInternalShowItemResult::itemversions() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalShowItemResult.ItemVersions)
  return *itemversions_;
}
inline void PbRpcKVInternalShowItemResult::set_itemversions(const ::std::string& value) {
  set_has_itemversions();
  if (itemversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemversions_ = new ::std::string;
  }
  itemversions_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcKVInternalShowItemResult.ItemVersions)
}
inline void PbRpcKVInternalShowItemResult::set_itemversions(const char* value) {
  set_has_itemversions();
  if (itemversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemversions_ = new ::std::string;
  }
  itemversions_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVInternalShowItemResult.ItemVersions)
}
inline void PbRpcKVInternalShowItemResult::set_itemversions(const void* value, size_t size) {
  set_has_itemversions();
  if (itemversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemversions_ = new ::std::string;
  }
  itemversions_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVInternalShowItemResult.ItemVersions)
}
inline ::std::string* PbRpcKVInternalShowItemResult::mutable_itemversions() {
  set_has_itemversions();
  if (itemversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemversions_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalShowItemResult.ItemVersions)
  return itemversions_;
}
inline ::std::string* PbRpcKVInternalShowItemResult::release_itemversions() {
  clear_has_itemversions();
  if (itemversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemversions_;
    itemversions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcKVInternalShowItemResult::set_allocated_itemversions(::std::string* itemversions) {
  if (itemversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemversions_;
  }
  if (itemversions) {
    set_has_itemversions();
    itemversions_ = itemversions;
  } else {
    clear_has_itemversions();
    itemversions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalShowItemResult.ItemVersions)
}

// -------------------------------------------------------------------

// PbUpdatedItemVersion

// required int64 LUT = 1;
inline bool PbUpdatedItemVersion::has_lut() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbUpdatedItemVersion::set_has_lut() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbUpdatedItemVersion::clear_has_lut() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbUpdatedItemVersion::clear_lut() {
  lut_ = GOOGLE_LONGLONG(0);
  clear_has_lut();
}
inline ::google::protobuf::int64 PbUpdatedItemVersion::lut() const {
  // @@protoc_insertion_point(field_get:PbUpdatedItemVersion.LUT)
  return lut_;
}
inline void PbUpdatedItemVersion::set_lut(::google::protobuf::int64 value) {
  set_has_lut();
  lut_ = value;
  // @@protoc_insertion_point(field_set:PbUpdatedItemVersion.LUT)
}

// required int32 SrcReplica = 2;
inline bool PbUpdatedItemVersion::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbUpdatedItemVersion::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbUpdatedItemVersion::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbUpdatedItemVersion::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbUpdatedItemVersion::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbUpdatedItemVersion.SrcReplica)
  return srcreplica_;
}
inline void PbUpdatedItemVersion::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbUpdatedItemVersion.SrcReplica)
}

// -------------------------------------------------------------------

// PbRpcReplicationArg

// repeated .PbPhysicalTimeSpec remoteDV = 1;
inline int PbRpcReplicationArg::remotedv_size() const {
  return remotedv_.size();
}
inline void PbRpcReplicationArg::clear_remotedv() {
  remotedv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcReplicationArg::remotedv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcReplicationArg.remoteDV)
  return remotedv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcReplicationArg::mutable_remotedv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcReplicationArg.remoteDV)
  return remotedv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcReplicationArg::add_remotedv() {
  // @@protoc_insertion_point(field_add:PbRpcReplicationArg.remoteDV)
  return remotedv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcReplicationArg::remotedv() const {
  // @@protoc_insertion_point(field_list:PbRpcReplicationArg.remoteDV)
  return remotedv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcReplicationArg::mutable_remotedv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcReplicationArg.remoteDV)
  return &remotedv_;
}

// repeated bytes UpdateRecord = 2;
inline int PbRpcReplicationArg::updaterecord_size() const {
  return updaterecord_.size();
}
inline void PbRpcReplicationArg::clear_updaterecord() {
  updaterecord_.Clear();
}
inline const ::std::string& PbRpcReplicationArg::updaterecord(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcReplicationArg.UpdateRecord)
  return updaterecord_.Get(index);
}
inline ::std::string* PbRpcReplicationArg::mutable_updaterecord(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcReplicationArg.UpdateRecord)
  return updaterecord_.Mutable(index);
}
inline void PbRpcReplicationArg::set_updaterecord(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcReplicationArg.UpdateRecord)
  updaterecord_.Mutable(index)->assign(value);
}
inline void PbRpcReplicationArg::set_updaterecord(int index, const char* value) {
  updaterecord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcReplicationArg.UpdateRecord)
}
inline void PbRpcReplicationArg::set_updaterecord(int index, const void* value, size_t size) {
  updaterecord_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcReplicationArg.UpdateRecord)
}
inline ::std::string* PbRpcReplicationArg::add_updaterecord() {
  return updaterecord_.Add();
}
inline void PbRpcReplicationArg::add_updaterecord(const ::std::string& value) {
  updaterecord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcReplicationArg.UpdateRecord)
}
inline void PbRpcReplicationArg::add_updaterecord(const char* value) {
  updaterecord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcReplicationArg.UpdateRecord)
}
inline void PbRpcReplicationArg::add_updaterecord(const void* value, size_t size) {
  updaterecord_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcReplicationArg.UpdateRecord)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcReplicationArg::updaterecord() const {
  // @@protoc_insertion_point(field_list:PbRpcReplicationArg.UpdateRecord)
  return updaterecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcReplicationArg::mutable_updaterecord() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcReplicationArg.UpdateRecord)
  return &updaterecord_;
}

// -------------------------------------------------------------------

// PbRpcHeartbeat

// required .PbPhysicalTimeSpec PhysicalTime = 1;
inline bool PbRpcHeartbeat::has_physicaltime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcHeartbeat::set_has_physicaltime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcHeartbeat::clear_has_physicaltime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcHeartbeat::clear_physicaltime() {
  if (physicaltime_ != NULL) physicaltime_->::PbPhysicalTimeSpec::Clear();
  clear_has_physicaltime();
}
inline const ::PbPhysicalTimeSpec& PbRpcHeartbeat::physicaltime() const {
  // @@protoc_insertion_point(field_get:PbRpcHeartbeat.PhysicalTime)
  return physicaltime_ != NULL ? *physicaltime_ : *default_instance_->physicaltime_;
}
inline ::PbPhysicalTimeSpec* PbRpcHeartbeat::mutable_physicaltime() {
  set_has_physicaltime();
  if (physicaltime_ == NULL) physicaltime_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcHeartbeat.PhysicalTime)
  return physicaltime_;
}
inline ::PbPhysicalTimeSpec* PbRpcHeartbeat::release_physicaltime() {
  clear_has_physicaltime();
  ::PbPhysicalTimeSpec* temp = physicaltime_;
  physicaltime_ = NULL;
  return temp;
}
inline void PbRpcHeartbeat::set_allocated_physicaltime(::PbPhysicalTimeSpec* physicaltime) {
  delete physicaltime_;
  physicaltime_ = physicaltime;
  if (physicaltime) {
    set_has_physicaltime();
  } else {
    clear_has_physicaltime();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcHeartbeat.PhysicalTime)
}

// required int64 LogicalTime = 2;
inline bool PbRpcHeartbeat::has_logicaltime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcHeartbeat::set_has_logicaltime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcHeartbeat::clear_has_logicaltime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcHeartbeat::clear_logicaltime() {
  logicaltime_ = GOOGLE_LONGLONG(0);
  clear_has_logicaltime();
}
inline ::google::protobuf::int64 PbRpcHeartbeat::logicaltime() const {
  // @@protoc_insertion_point(field_get:PbRpcHeartbeat.LogicalTime)
  return logicaltime_;
}
inline void PbRpcHeartbeat::set_logicaltime(::google::protobuf::int64 value) {
  set_has_logicaltime();
  logicaltime_ = value;
  // @@protoc_insertion_point(field_set:PbRpcHeartbeat.LogicalTime)
}

// -------------------------------------------------------------------

// PbRpcLST

// required .PbPhysicalTimeSpec Time = 1;
inline bool PbRpcLST::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcLST::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcLST::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcLST::clear_time() {
  if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
  clear_has_time();
}
inline const ::PbPhysicalTimeSpec& PbRpcLST::time() const {
  // @@protoc_insertion_point(field_get:PbRpcLST.Time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::PbPhysicalTimeSpec* PbRpcLST::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcLST.Time)
  return time_;
}
inline ::PbPhysicalTimeSpec* PbRpcLST::release_time() {
  clear_has_time();
  ::PbPhysicalTimeSpec* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PbRpcLST::set_allocated_time(::PbPhysicalTimeSpec* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcLST.Time)
}

// required int32 Round = 2;
inline bool PbRpcLST::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcLST::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcLST::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcLST::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 PbRpcLST::round() const {
  // @@protoc_insertion_point(field_get:PbRpcLST.Round)
  return round_;
}
inline void PbRpcLST::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:PbRpcLST.Round)
}

// repeated .PbPhysicalTimeSpec PVV = 3;
inline int PbRpcLST::pvv_size() const {
  return pvv_.size();
}
inline void PbRpcLST::clear_pvv() {
  pvv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcLST::pvv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcLST.PVV)
  return pvv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcLST::mutable_pvv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcLST.PVV)
  return pvv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcLST::add_pvv() {
  // @@protoc_insertion_point(field_add:PbRpcLST.PVV)
  return pvv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcLST::pvv() const {
  // @@protoc_insertion_point(field_list:PbRpcLST.PVV)
  return pvv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcLST::mutable_pvv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcLST.PVV)
  return &pvv_;
}

// -------------------------------------------------------------------

// PbRpcGST

// required .PbPhysicalTimeSpec Time = 1;
inline bool PbRpcGST::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcGST::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcGST::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcGST::clear_time() {
  if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
  clear_has_time();
}
inline const ::PbPhysicalTimeSpec& PbRpcGST::time() const {
  // @@protoc_insertion_point(field_get:PbRpcGST.Time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::PbPhysicalTimeSpec* PbRpcGST::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcGST.Time)
  return time_;
}
inline ::PbPhysicalTimeSpec* PbRpcGST::release_time() {
  clear_has_time();
  ::PbPhysicalTimeSpec* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PbRpcGST::set_allocated_time(::PbPhysicalTimeSpec* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcGST.Time)
}

// -------------------------------------------------------------------

// PbRpcGSTReq

// required .PbPhysicalTimeSpec Time = 1;
inline bool PbRpcGSTReq::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcGSTReq::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcGSTReq::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcGSTReq::clear_time() {
  if (time_ != NULL) time_->::PbPhysicalTimeSpec::Clear();
  clear_has_time();
}
inline const ::PbPhysicalTimeSpec& PbRpcGSTReq::time() const {
  // @@protoc_insertion_point(field_get:PbRpcGSTReq.Time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::PbPhysicalTimeSpec* PbRpcGSTReq::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcGSTReq.Time)
  return time_;
}
inline ::PbPhysicalTimeSpec* PbRpcGSTReq::release_time() {
  clear_has_time();
  ::PbPhysicalTimeSpec* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PbRpcGSTReq::set_allocated_time(::PbPhysicalTimeSpec* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcGSTReq.Time)
}

// required int32 PeerId = 2;
inline bool PbRpcGSTReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcGSTReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcGSTReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcGSTReq::clear_peerid() {
  peerid_ = 0;
  clear_has_peerid();
}
inline ::google::protobuf::int32 PbRpcGSTReq::peerid() const {
  // @@protoc_insertion_point(field_get:PbRpcGSTReq.PeerId)
  return peerid_;
}
inline void PbRpcGSTReq::set_peerid(::google::protobuf::int32 value) {
  set_has_peerid();
  peerid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcGSTReq.PeerId)
}

// repeated .PbPhysicalTimeSpec GSV = 3;
inline int PbRpcGSTReq::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcGSTReq::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcGSTReq::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcGSTReq.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcGSTReq::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcGSTReq.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcGSTReq::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcGSTReq.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcGSTReq::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcGSTReq.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcGSTReq::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcGSTReq.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcPVV

// required int32 Round = 1;
inline bool PbRpcPVV::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcPVV::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcPVV::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcPVV::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 PbRpcPVV::round() const {
  // @@protoc_insertion_point(field_get:PbRpcPVV.Round)
  return round_;
}
inline void PbRpcPVV::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:PbRpcPVV.Round)
}

// repeated .PbPhysicalTimeSpec PVV = 2;
inline int PbRpcPVV::pvv_size() const {
  return pvv_.size();
}
inline void PbRpcPVV::clear_pvv() {
  pvv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcPVV::pvv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcPVV.PVV)
  return pvv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcPVV::mutable_pvv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcPVV.PVV)
  return pvv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcPVV::add_pvv() {
  // @@protoc_insertion_point(field_add:PbRpcPVV.PVV)
  return pvv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcPVV::pvv() const {
  // @@protoc_insertion_point(field_list:PbRpcPVV.PVV)
  return pvv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcPVV::mutable_pvv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcPVV.PVV)
  return &pvv_;
}

// -------------------------------------------------------------------

// PbRpcGSV

// repeated .PbPhysicalTimeSpec GSV = 1;
inline int PbRpcGSV::gsv_size() const {
  return gsv_.size();
}
inline void PbRpcGSV::clear_gsv() {
  gsv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcGSV::gsv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcGSV.GSV)
  return gsv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcGSV::mutable_gsv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcGSV.GSV)
  return gsv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcGSV::add_gsv() {
  // @@protoc_insertion_point(field_add:PbRpcGSV.GSV)
  return gsv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcGSV::gsv() const {
  // @@protoc_insertion_point(field_list:PbRpcGSV.GSV)
  return gsv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcGSV::mutable_gsv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcGSV.GSV)
  return &gsv_;
}

// -------------------------------------------------------------------

// PbRpcGroupServiceResult

// required bool Succeeded = 1;
inline bool PbRpcGroupServiceResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcGroupServiceResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcGroupServiceResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcGroupServiceResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcGroupServiceResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcGroupServiceResult.Succeeded)
  return succeeded_;
}
inline void PbRpcGroupServiceResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcGroupServiceResult.Succeeded)
}

// -------------------------------------------------------------------

// PbPartition

// required string Name = 1;
inline bool PbPartition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbPartition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbPartition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbPartition::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PbPartition::name() const {
  // @@protoc_insertion_point(field_get:PbPartition.Name)
  return *name_;
}
inline void PbPartition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PbPartition.Name)
}
inline void PbPartition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbPartition.Name)
}
inline void PbPartition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbPartition.Name)
}
inline ::std::string* PbPartition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbPartition.Name)
  return name_;
}
inline ::std::string* PbPartition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbPartition::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbPartition.Name)
}

// required int32 PublicPort = 2;
inline bool PbPartition::has_publicport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbPartition::set_has_publicport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbPartition::clear_has_publicport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbPartition::clear_publicport() {
  publicport_ = 0;
  clear_has_publicport();
}
inline ::google::protobuf::int32 PbPartition::publicport() const {
  // @@protoc_insertion_point(field_get:PbPartition.PublicPort)
  return publicport_;
}
inline void PbPartition::set_publicport(::google::protobuf::int32 value) {
  set_has_publicport();
  publicport_ = value;
  // @@protoc_insertion_point(field_set:PbPartition.PublicPort)
}

// required int32 PartitionPort = 3;
inline bool PbPartition::has_partitionport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbPartition::set_has_partitionport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbPartition::clear_has_partitionport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbPartition::clear_partitionport() {
  partitionport_ = 0;
  clear_has_partitionport();
}
inline ::google::protobuf::int32 PbPartition::partitionport() const {
  // @@protoc_insertion_point(field_get:PbPartition.PartitionPort)
  return partitionport_;
}
inline void PbPartition::set_partitionport(::google::protobuf::int32 value) {
  set_has_partitionport();
  partitionport_ = value;
  // @@protoc_insertion_point(field_set:PbPartition.PartitionPort)
}

// required int32 ReplicationPort = 4;
inline bool PbPartition::has_replicationport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbPartition::set_has_replicationport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbPartition::clear_has_replicationport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbPartition::clear_replicationport() {
  replicationport_ = 0;
  clear_has_replicationport();
}
inline ::google::protobuf::int32 PbPartition::replicationport() const {
  // @@protoc_insertion_point(field_get:PbPartition.ReplicationPort)
  return replicationport_;
}
inline void PbPartition::set_replicationport(::google::protobuf::int32 value) {
  set_has_replicationport();
  replicationport_ = value;
  // @@protoc_insertion_point(field_set:PbPartition.ReplicationPort)
}

// required int32 PartitionId = 5;
inline bool PbPartition::has_partitionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbPartition::set_has_partitionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbPartition::clear_has_partitionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbPartition::clear_partitionid() {
  partitionid_ = 0;
  clear_has_partitionid();
}
inline ::google::protobuf::int32 PbPartition::partitionid() const {
  // @@protoc_insertion_point(field_get:PbPartition.PartitionId)
  return partitionid_;
}
inline void PbPartition::set_partitionid(::google::protobuf::int32 value) {
  set_has_partitionid();
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:PbPartition.PartitionId)
}

// required int32 ReplicaId = 6;
inline bool PbPartition::has_replicaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbPartition::set_has_replicaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbPartition::clear_has_replicaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbPartition::clear_replicaid() {
  replicaid_ = 0;
  clear_has_replicaid();
}
inline ::google::protobuf::int32 PbPartition::replicaid() const {
  // @@protoc_insertion_point(field_get:PbPartition.ReplicaId)
  return replicaid_;
}
inline void PbPartition::set_replicaid(::google::protobuf::int32 value) {
  set_has_replicaid();
  replicaid_ = value;
  // @@protoc_insertion_point(field_set:PbPartition.ReplicaId)
}

// -------------------------------------------------------------------

// PbRegisteredPartitions

// required int32 NumPartitions = 1;
inline bool PbRegisteredPartitions::has_numpartitions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRegisteredPartitions::set_has_numpartitions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRegisteredPartitions::clear_has_numpartitions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRegisteredPartitions::clear_numpartitions() {
  numpartitions_ = 0;
  clear_has_numpartitions();
}
inline ::google::protobuf::int32 PbRegisteredPartitions::numpartitions() const {
  // @@protoc_insertion_point(field_get:PbRegisteredPartitions.NumPartitions)
  return numpartitions_;
}
inline void PbRegisteredPartitions::set_numpartitions(::google::protobuf::int32 value) {
  set_has_numpartitions();
  numpartitions_ = value;
  // @@protoc_insertion_point(field_set:PbRegisteredPartitions.NumPartitions)
}

// required int32 NumReplicasPerPartition = 2;
inline bool PbRegisteredPartitions::has_numreplicasperpartition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRegisteredPartitions::set_has_numreplicasperpartition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRegisteredPartitions::clear_has_numreplicasperpartition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRegisteredPartitions::clear_numreplicasperpartition() {
  numreplicasperpartition_ = 0;
  clear_has_numreplicasperpartition();
}
inline ::google::protobuf::int32 PbRegisteredPartitions::numreplicasperpartition() const {
  // @@protoc_insertion_point(field_get:PbRegisteredPartitions.NumReplicasPerPartition)
  return numreplicasperpartition_;
}
inline void PbRegisteredPartitions::set_numreplicasperpartition(::google::protobuf::int32 value) {
  set_has_numreplicasperpartition();
  numreplicasperpartition_ = value;
  // @@protoc_insertion_point(field_set:PbRegisteredPartitions.NumReplicasPerPartition)
}

// repeated .PbPartition Partition = 3;
inline int PbRegisteredPartitions::partition_size() const {
  return partition_.size();
}
inline void PbRegisteredPartitions::clear_partition() {
  partition_.Clear();
}
inline const ::PbPartition& PbRegisteredPartitions::partition(int index) const {
  // @@protoc_insertion_point(field_get:PbRegisteredPartitions.Partition)
  return partition_.Get(index);
}
inline ::PbPartition* PbRegisteredPartitions::mutable_partition(int index) {
  // @@protoc_insertion_point(field_mutable:PbRegisteredPartitions.Partition)
  return partition_.Mutable(index);
}
inline ::PbPartition* PbRegisteredPartitions::add_partition() {
  // @@protoc_insertion_point(field_add:PbRegisteredPartitions.Partition)
  return partition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPartition >&
PbRegisteredPartitions::partition() const {
  // @@protoc_insertion_point(field_list:PbRegisteredPartitions.Partition)
  return partition_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPartition >*
PbRegisteredPartitions::mutable_partition() {
  // @@protoc_insertion_point(field_mutable_list:PbRegisteredPartitions.Partition)
  return &partition_;
}

// -------------------------------------------------------------------

// PbRpcKVInternalPrepareReplyResult

// required int64 id = 1;
inline bool PbRpcKVInternalPrepareReplyResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVInternalPrepareReplyResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcKVInternalPrepareReplyResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalPrepareReplyResult.id)
  return id_;
}
inline void PbRpcKVInternalPrepareReplyResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalPrepareReplyResult.id)
}

// required .PbPhysicalTimeSpec PT = 2;
inline bool PbRpcKVInternalPrepareReplyResult::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVInternalPrepareReplyResult::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_pt() {
  if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
  clear_has_pt();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVInternalPrepareReplyResult::pt() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalPrepareReplyResult.PT)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalPrepareReplyResult::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVInternalPrepareReplyResult.PT)
  return pt_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVInternalPrepareReplyResult::release_pt() {
  clear_has_pt();
  ::PbPhysicalTimeSpec* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PbRpcKVInternalPrepareReplyResult::set_allocated_pt(::PbPhysicalTimeSpec* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVInternalPrepareReplyResult.PT)
}

// required int64 src = 3;
inline bool PbRpcKVInternalPrepareReplyResult::has_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcKVInternalPrepareReplyResult::set_has_src() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcKVInternalPrepareReplyResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalPrepareReplyResult.src)
  return src_;
}
inline void PbRpcKVInternalPrepareReplyResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalPrepareReplyResult.src)
}

// optional double blockDuration = 4;
inline bool PbRpcKVInternalPrepareReplyResult::has_blockduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcKVInternalPrepareReplyResult::set_has_blockduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_has_blockduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcKVInternalPrepareReplyResult::clear_blockduration() {
  blockduration_ = 0;
  clear_has_blockduration();
}
inline double PbRpcKVInternalPrepareReplyResult::blockduration() const {
  // @@protoc_insertion_point(field_get:PbRpcKVInternalPrepareReplyResult.blockDuration)
  return blockduration_;
}
inline void PbRpcKVInternalPrepareReplyResult::set_blockduration(double value) {
  set_has_blockduration();
  blockduration_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVInternalPrepareReplyResult.blockDuration)
}

// -------------------------------------------------------------------

// PbRpCommitRequestArg

// required int64 id = 1;
inline bool PbRpCommitRequestArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpCommitRequestArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpCommitRequestArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpCommitRequestArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpCommitRequestArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpCommitRequestArg.id)
  return id_;
}
inline void PbRpCommitRequestArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpCommitRequestArg.id)
}

// required .PbPhysicalTimeSpec CT = 2;
inline bool PbRpCommitRequestArg::has_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpCommitRequestArg::set_has_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpCommitRequestArg::clear_has_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpCommitRequestArg::clear_ct() {
  if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
  clear_has_ct();
}
inline const ::PbPhysicalTimeSpec& PbRpCommitRequestArg::ct() const {
  // @@protoc_insertion_point(field_get:PbRpCommitRequestArg.CT)
  return ct_ != NULL ? *ct_ : *default_instance_->ct_;
}
inline ::PbPhysicalTimeSpec* PbRpCommitRequestArg::mutable_ct() {
  set_has_ct();
  if (ct_ == NULL) ct_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpCommitRequestArg.CT)
  return ct_;
}
inline ::PbPhysicalTimeSpec* PbRpCommitRequestArg::release_ct() {
  clear_has_ct();
  ::PbPhysicalTimeSpec* temp = ct_;
  ct_ = NULL;
  return temp;
}
inline void PbRpCommitRequestArg::set_allocated_ct(::PbPhysicalTimeSpec* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    set_has_ct();
  } else {
    clear_has_ct();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpCommitRequestArg.CT)
}

// -------------------------------------------------------------------

// PbRpcKVPublicCommitArg

// required int64 ID = 1;
inline bool PbRpcKVPublicCommitArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicCommitArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicCommitArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicCommitArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcKVPublicCommitArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicCommitArg.ID)
  return id_;
}
inline void PbRpcKVPublicCommitArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicCommitArg.ID)
}

// repeated bytes Key = 2;
inline int PbRpcKVPublicCommitArg::key_size() const {
  return key_.size();
}
inline void PbRpcKVPublicCommitArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcKVPublicCommitArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicCommitArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcKVPublicCommitArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicCommitArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcKVPublicCommitArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcKVPublicCommitArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcKVPublicCommitArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicCommitArg.Key)
}
inline void PbRpcKVPublicCommitArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicCommitArg.Key)
}
inline ::std::string* PbRpcKVPublicCommitArg::add_key() {
  return key_.Add();
}
inline void PbRpcKVPublicCommitArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcKVPublicCommitArg.Key)
}
inline void PbRpcKVPublicCommitArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcKVPublicCommitArg.Key)
}
inline void PbRpcKVPublicCommitArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcKVPublicCommitArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcKVPublicCommitArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicCommitArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcKVPublicCommitArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicCommitArg.Key)
  return &key_;
}

// repeated bytes Value = 3;
inline int PbRpcKVPublicCommitArg::value_size() const {
  return value_.size();
}
inline void PbRpcKVPublicCommitArg::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcKVPublicCommitArg::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicCommitArg.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcKVPublicCommitArg::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicCommitArg.Value)
  return value_.Mutable(index);
}
inline void PbRpcKVPublicCommitArg::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcKVPublicCommitArg.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcKVPublicCommitArg::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcKVPublicCommitArg.Value)
}
inline void PbRpcKVPublicCommitArg::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcKVPublicCommitArg.Value)
}
inline ::std::string* PbRpcKVPublicCommitArg::add_value() {
  return value_.Add();
}
inline void PbRpcKVPublicCommitArg::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcKVPublicCommitArg.Value)
}
inline void PbRpcKVPublicCommitArg::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcKVPublicCommitArg.Value)
}
inline void PbRpcKVPublicCommitArg::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcKVPublicCommitArg.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcKVPublicCommitArg::value() const {
  // @@protoc_insertion_point(field_list:PbRpcKVPublicCommitArg.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcKVPublicCommitArg::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcKVPublicCommitArg.Value)
  return &value_;
}

// -------------------------------------------------------------------

// PbRpcKVPublicCommitResult

// required bool Succeeded = 1;
inline bool PbRpcKVPublicCommitResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcKVPublicCommitResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcKVPublicCommitResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcKVPublicCommitResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcKVPublicCommitResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicCommitResult.Succeeded)
  return succeeded_;
}
inline void PbRpcKVPublicCommitResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcKVPublicCommitResult.Succeeded)
}

// required .PbPhysicalTimeSpec CT = 2;
inline bool PbRpcKVPublicCommitResult::has_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcKVPublicCommitResult::set_has_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcKVPublicCommitResult::clear_has_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcKVPublicCommitResult::clear_ct() {
  if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
  clear_has_ct();
}
inline const ::PbPhysicalTimeSpec& PbRpcKVPublicCommitResult::ct() const {
  // @@protoc_insertion_point(field_get:PbRpcKVPublicCommitResult.CT)
  return ct_ != NULL ? *ct_ : *default_instance_->ct_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicCommitResult::mutable_ct() {
  set_has_ct();
  if (ct_ == NULL) ct_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcKVPublicCommitResult.CT)
  return ct_;
}
inline ::PbPhysicalTimeSpec* PbRpcKVPublicCommitResult::release_ct() {
  clear_has_ct();
  ::PbPhysicalTimeSpec* temp = ct_;
  ct_ = NULL;
  return temp;
}
inline void PbRpcKVPublicCommitResult::set_allocated_ct(::PbPhysicalTimeSpec* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    set_has_ct();
  } else {
    clear_has_ct();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcKVPublicCommitResult.CT)
}

// -------------------------------------------------------------------

// PbRpcPartitionClientPrepareRequestResult

// required int64 id = 1;
inline bool PbRpcPartitionClientPrepareRequestResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcPartitionClientPrepareRequestResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcPartitionClientPrepareRequestResult.id)
  return id_;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcPartitionClientPrepareRequestResult.id)
}

// required .PbPhysicalTimeSpec PT = 2;
inline bool PbRpcPartitionClientPrepareRequestResult::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_pt() {
  if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
  clear_has_pt();
}
inline const ::PbPhysicalTimeSpec& PbRpcPartitionClientPrepareRequestResult::pt() const {
  // @@protoc_insertion_point(field_get:PbRpcPartitionClientPrepareRequestResult.PT)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::PbPhysicalTimeSpec* PbRpcPartitionClientPrepareRequestResult::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbRpcPartitionClientPrepareRequestResult.PT)
  return pt_;
}
inline ::PbPhysicalTimeSpec* PbRpcPartitionClientPrepareRequestResult::release_pt() {
  clear_has_pt();
  ::PbPhysicalTimeSpec* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_allocated_pt(::PbPhysicalTimeSpec* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcPartitionClientPrepareRequestResult.PT)
}

// required int64 src = 3;
inline bool PbRpcPartitionClientPrepareRequestResult::has_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_has_src() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcPartitionClientPrepareRequestResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcPartitionClientPrepareRequestResult.src)
  return src_;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcPartitionClientPrepareRequestResult.src)
}

// optional double blockDuration = 4;
inline bool PbRpcPartitionClientPrepareRequestResult::has_blockduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_has_blockduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_has_blockduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcPartitionClientPrepareRequestResult::clear_blockduration() {
  blockduration_ = 0;
  clear_has_blockduration();
}
inline double PbRpcPartitionClientPrepareRequestResult::blockduration() const {
  // @@protoc_insertion_point(field_get:PbRpcPartitionClientPrepareRequestResult.blockDuration)
  return blockduration_;
}
inline void PbRpcPartitionClientPrepareRequestResult::set_blockduration(double value) {
  set_has_blockduration();
  blockduration_ = value;
  // @@protoc_insertion_point(field_set:PbRpcPartitionClientPrepareRequestResult.blockDuration)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5fmessages_2eproto__INCLUDED
