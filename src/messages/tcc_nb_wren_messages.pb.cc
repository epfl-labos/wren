// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcc_nb_wren_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tcc_nb_wren_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbRpcTccNBWrenPublicStartArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenPublicStartArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenPublicStartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenPublicStartResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicReadArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVPublicReadArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVPublicReadResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicCommitArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVPublicCommitArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicCommitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVPublicCommitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenPartitionClientPrepareRequestArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcStabilizationTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcStabilizationTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPeerStabilizationTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPeerStabilizationTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcST_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tcc_5fnb_5fwren_5fmessages_2eproto() {
  protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tcc_nb_wren_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PbRpcTccNBWrenPublicStartArg_descriptor_ = file->message_type(0);
  static const int PbRpcTccNBWrenPublicStartArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartArg, glst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartArg, grst_),
  };
  PbRpcTccNBWrenPublicStartArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenPublicStartArg_descriptor_,
      PbRpcTccNBWrenPublicStartArg::default_instance_,
      PbRpcTccNBWrenPublicStartArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenPublicStartArg));
  PbRpcTccNBWrenPublicStartResult_descriptor_ = file->message_type(1);
  static const int PbRpcTccNBWrenPublicStartResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, grst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, glst_),
  };
  PbRpcTccNBWrenPublicStartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenPublicStartResult_descriptor_,
      PbRpcTccNBWrenPublicStartResult::default_instance_,
      PbRpcTccNBWrenPublicStartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPublicStartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenPublicStartResult));
  PbRpcTccNBWrenKVPublicReadArg_descriptor_ = file->message_type(2);
  static const int PbRpcTccNBWrenKVPublicReadArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadArg, key_),
  };
  PbRpcTccNBWrenKVPublicReadArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVPublicReadArg_descriptor_,
      PbRpcTccNBWrenKVPublicReadArg::default_instance_,
      PbRpcTccNBWrenKVPublicReadArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVPublicReadArg));
  PbRpcTccNBWrenKVPublicReadResult_descriptor_ = file->message_type(3);
  static const int PbRpcTccNBWrenKVPublicReadResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadResult, value_),
  };
  PbRpcTccNBWrenKVPublicReadResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVPublicReadResult_descriptor_,
      PbRpcTccNBWrenKVPublicReadResult::default_instance_,
      PbRpcTccNBWrenKVPublicReadResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicReadResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVPublicReadResult));
  PbRpcTccNBWrenKVPublicCommitArg_descriptor_ = file->message_type(4);
  static const int PbRpcTccNBWrenKVPublicCommitArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, lct_),
  };
  PbRpcTccNBWrenKVPublicCommitArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVPublicCommitArg_descriptor_,
      PbRpcTccNBWrenKVPublicCommitArg::default_instance_,
      PbRpcTccNBWrenKVPublicCommitArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVPublicCommitArg));
  PbRpcTccNBWrenKVPublicCommitResult_descriptor_ = file->message_type(5);
  static const int PbRpcTccNBWrenKVPublicCommitResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitResult, ct_),
  };
  PbRpcTccNBWrenKVPublicCommitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVPublicCommitResult_descriptor_,
      PbRpcTccNBWrenKVPublicCommitResult::default_instance_,
      PbRpcTccNBWrenKVPublicCommitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVPublicCommitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVPublicCommitResult));
  PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_ = file->message_type(6);
  static const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, src_),
  };
  PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_,
      PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance_,
      PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg));
  PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_ = file->message_type(7);
  static const int PbRpcTccNBWrenPartitionClientPrepareRequestArg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, ht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, src_),
  };
  PbRpcTccNBWrenPartitionClientPrepareRequestArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_,
      PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance_,
      PbRpcTccNBWrenPartitionClientPrepareRequestArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenPartitionClientPrepareRequestArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenPartitionClientPrepareRequestArg));
  PbRpcStabilizationTime_descriptor_ = file->message_type(8);
  static const int PbRpcStabilizationTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcStabilizationTime, grst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcStabilizationTime, glst_),
  };
  PbRpcStabilizationTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcStabilizationTime_descriptor_,
      PbRpcStabilizationTime::default_instance_,
      PbRpcStabilizationTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcStabilizationTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcStabilizationTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcStabilizationTime));
  PbRpcPeerStabilizationTimes_descriptor_ = file->message_type(9);
  static const int PbRpcPeerStabilizationTimes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPeerStabilizationTimes, rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPeerStabilizationTimes, lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPeerStabilizationTimes, srcpartition_),
  };
  PbRpcPeerStabilizationTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPeerStabilizationTimes_descriptor_,
      PbRpcPeerStabilizationTimes::default_instance_,
      PbRpcPeerStabilizationTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPeerStabilizationTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPeerStabilizationTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPeerStabilizationTimes));
  PbRpcST_descriptor_ = file->message_type(10);
  static const int PbRpcST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcST, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcST, rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcST, lst_),
  };
  PbRpcST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcST_descriptor_,
      PbRpcST::default_instance_,
      PbRpcST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcST));
  PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_ = file->message_type(11);
  static const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, waitedxact_),
  };
  PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_,
      PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance_,
      PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tcc_5fnb_5fwren_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenPublicStartArg_descriptor_, &PbRpcTccNBWrenPublicStartArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenPublicStartResult_descriptor_, &PbRpcTccNBWrenPublicStartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVPublicReadArg_descriptor_, &PbRpcTccNBWrenKVPublicReadArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVPublicReadResult_descriptor_, &PbRpcTccNBWrenKVPublicReadResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVPublicCommitArg_descriptor_, &PbRpcTccNBWrenKVPublicCommitArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVPublicCommitResult_descriptor_, &PbRpcTccNBWrenKVPublicCommitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_, &PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_, &PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcStabilizationTime_descriptor_, &PbRpcStabilizationTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPeerStabilizationTimes_descriptor_, &PbRpcPeerStabilizationTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcST_descriptor_, &PbRpcST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_, &PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tcc_5fnb_5fwren_5fmessages_2eproto() {
  delete PbRpcTccNBWrenPublicStartArg::default_instance_;
  delete PbRpcTccNBWrenPublicStartArg_reflection_;
  delete PbRpcTccNBWrenPublicStartResult::default_instance_;
  delete PbRpcTccNBWrenPublicStartResult_reflection_;
  delete PbRpcTccNBWrenKVPublicReadArg::default_instance_;
  delete PbRpcTccNBWrenKVPublicReadArg_reflection_;
  delete PbRpcTccNBWrenKVPublicReadResult::default_instance_;
  delete PbRpcTccNBWrenKVPublicReadResult_reflection_;
  delete PbRpcTccNBWrenKVPublicCommitArg::default_instance_;
  delete PbRpcTccNBWrenKVPublicCommitArg_reflection_;
  delete PbRpcTccNBWrenKVPublicCommitResult::default_instance_;
  delete PbRpcTccNBWrenKVPublicCommitResult_reflection_;
  delete PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance_;
  delete PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_reflection_;
  delete PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance_;
  delete PbRpcTccNBWrenPartitionClientPrepareRequestArg_reflection_;
  delete PbRpcStabilizationTime::default_instance_;
  delete PbRpcStabilizationTime_reflection_;
  delete PbRpcPeerStabilizationTimes::default_instance_;
  delete PbRpcPeerStabilizationTimes_reflection_;
  delete PbRpcST::default_instance_;
  delete PbRpcST_reflection_;
  delete PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance_;
  delete PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_reflection_;
}

void protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_rpc_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032tcc_nb_wren_messages.proto\032\022rpc_messag"
    "es.proto\"d\n\034PbRpcTccNBWrenPublicStartArg"
    "\022!\n\004GLST\030\001 \002(\0132\023.PbPhysicalTimeSpec\022!\n\004G"
    "RST\030\002 \002(\0132\023.PbPhysicalTimeSpec\"\206\001\n\037PbRpc"
    "TccNBWrenPublicStartResult\022\021\n\tSucceeded\030"
    "\001 \002(\010\022\n\n\002ID\030\002 \002(\003\022!\n\004GRST\030\003 \002(\0132\023.PbPhys"
    "icalTimeSpec\022!\n\004GLST\030\004 \002(\0132\023.PbPhysicalT"
    "imeSpec\"8\n\035PbRpcTccNBWrenKVPublicReadArg"
    "\022\n\n\002ID\030\001 \002(\003\022\013\n\003Key\030\002 \003(\014\"D\n PbRpcTccNBW"
    "renKVPublicReadResult\022\021\n\tSucceeded\030\001 \002(\010"
    "\022\r\n\005Value\030\002 \003(\014\"k\n\037PbRpcTccNBWrenKVPubli"
    "cCommitArg\022\n\n\002ID\030\001 \002(\003\022\013\n\003Key\030\002 \003(\014\022\r\n\005V"
    "alue\030\003 \003(\014\022 \n\003LCT\030\004 \001(\0132\023.PbPhysicalTime"
    "Spec\"X\n\"PbRpcTccNBWrenKVPublicCommitResu"
    "lt\022\021\n\tSucceeded\030\001 \002(\010\022\037\n\002CT\030\002 \002(\0132\023.PbPh"
    "ysicalTimeSpec\"\226\001\n*PbRpcTccNBWrenKVInter"
    "nalTxSliceReadKeysArg\022\013\n\003Key\030\001 \003(\014\022 \n\003LS"
    "T\030\002 \002(\0132\023.PbPhysicalTimeSpec\022 \n\003RST\030\003 \002("
    "\0132\023.PbPhysicalTimeSpec\022\n\n\002id\030\004 \001(\003\022\013\n\003sr"
    "c\030\005 \001(\003\"\312\001\n.PbRpcTccNBWrenPartitionClien"
    "tPrepareRequestArg\022\n\n\002id\030\001 \002(\003\022 \n\003LST\030\002 "
    "\002(\0132\023.PbPhysicalTimeSpec\022 \n\003RST\030\003 \002(\0132\023."
    "PbPhysicalTimeSpec\022\037\n\002HT\030\004 \002(\0132\023.PbPhysi"
    "calTimeSpec\022\013\n\003Key\030\005 \003(\014\022\r\n\005Value\030\006 \003(\014\022"
    "\013\n\003src\030\007 \002(\003\"^\n\026PbRpcStabilizationTime\022!"
    "\n\004GRST\030\001 \002(\0132\023.PbPhysicalTimeSpec\022!\n\004GLS"
    "T\030\002 \002(\0132\023.PbPhysicalTimeSpec\"w\n\033PbRpcPee"
    "rStabilizationTimes\022 \n\003RST\030\001 \002(\0132\023.PbPhy"
    "sicalTimeSpec\022 \n\003LST\030\002 \002(\0132\023.PbPhysicalT"
    "imeSpec\022\024\n\014SrcPartition\030\004 \001(\003\"\\\n\007PbRpcST"
    "\022\r\n\005Round\030\001 \002(\005\022 \n\003RST\030\002 \002(\0132\023.PbPhysica"
    "lTimeSpec\022 \n\003LST\030\003 \002(\0132\023.PbPhysicalTimeS"
    "pec\"~\n-PbRpcTccNBWrenKVInternalTxSliceRe"
    "adKeysResult\022\021\n\tSucceeded\030\001 \002(\010\022\r\n\005Value"
    "\030\002 \003(\014\022\013\n\003Src\030\003 \001(\005\022\n\n\002id\030\004 \001(\003\022\022\n\nwaite"
    "dXact\030\005 \001(\001", 1411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcc_nb_wren_messages.proto", &protobuf_RegisterTypes);
  PbRpcTccNBWrenPublicStartArg::default_instance_ = new PbRpcTccNBWrenPublicStartArg();
  PbRpcTccNBWrenPublicStartResult::default_instance_ = new PbRpcTccNBWrenPublicStartResult();
  PbRpcTccNBWrenKVPublicReadArg::default_instance_ = new PbRpcTccNBWrenKVPublicReadArg();
  PbRpcTccNBWrenKVPublicReadResult::default_instance_ = new PbRpcTccNBWrenKVPublicReadResult();
  PbRpcTccNBWrenKVPublicCommitArg::default_instance_ = new PbRpcTccNBWrenKVPublicCommitArg();
  PbRpcTccNBWrenKVPublicCommitResult::default_instance_ = new PbRpcTccNBWrenKVPublicCommitResult();
  PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance_ = new PbRpcTccNBWrenKVInternalTxSliceReadKeysArg();
  PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance_ = new PbRpcTccNBWrenPartitionClientPrepareRequestArg();
  PbRpcStabilizationTime::default_instance_ = new PbRpcStabilizationTime();
  PbRpcPeerStabilizationTimes::default_instance_ = new PbRpcPeerStabilizationTimes();
  PbRpcST::default_instance_ = new PbRpcST();
  PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance_ = new PbRpcTccNBWrenKVInternalTxSliceReadKeysResult();
  PbRpcTccNBWrenPublicStartArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenPublicStartResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVPublicReadArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVPublicReadResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVPublicCommitArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVPublicCommitResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance_->InitAsDefaultInstance();
  PbRpcStabilizationTime::default_instance_->InitAsDefaultInstance();
  PbRpcPeerStabilizationTimes::default_instance_->InitAsDefaultInstance();
  PbRpcST::default_instance_->InitAsDefaultInstance();
  PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tcc_5fnb_5fwren_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tcc_5fnb_5fwren_5fmessages_2eproto {
  StaticDescriptorInitializer_tcc_5fnb_5fwren_5fmessages_2eproto() {
    protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  }
} static_descriptor_initializer_tcc_5fnb_5fwren_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenPublicStartArg::kGLSTFieldNumber;
const int PbRpcTccNBWrenPublicStartArg::kGRSTFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenPublicStartArg::PbRpcTccNBWrenPublicStartArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenPublicStartArg)
}

void PbRpcTccNBWrenPublicStartArg::InitAsDefaultInstance() {
  glst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  grst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenPublicStartArg::PbRpcTccNBWrenPublicStartArg(const PbRpcTccNBWrenPublicStartArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenPublicStartArg)
}

void PbRpcTccNBWrenPublicStartArg::SharedCtor() {
  _cached_size_ = 0;
  glst_ = NULL;
  grst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenPublicStartArg::~PbRpcTccNBWrenPublicStartArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenPublicStartArg)
  SharedDtor();
}

void PbRpcTccNBWrenPublicStartArg::SharedDtor() {
  if (this != default_instance_) {
    delete glst_;
    delete grst_;
  }
}

void PbRpcTccNBWrenPublicStartArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenPublicStartArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenPublicStartArg_descriptor_;
}

const PbRpcTccNBWrenPublicStartArg& PbRpcTccNBWrenPublicStartArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenPublicStartArg* PbRpcTccNBWrenPublicStartArg::default_instance_ = NULL;

PbRpcTccNBWrenPublicStartArg* PbRpcTccNBWrenPublicStartArg::New() const {
  return new PbRpcTccNBWrenPublicStartArg;
}

void PbRpcTccNBWrenPublicStartArg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_glst()) {
      if (glst_ != NULL) glst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_grst()) {
      if (grst_ != NULL) grst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenPublicStartArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenPublicStartArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec GLST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GRST;
        break;
      }

      // required .PbPhysicalTimeSpec GRST = 2;
      case 2: {
        if (tag == 18) {
         parse_GRST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenPublicStartArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenPublicStartArg)
  return false;
#undef DO_
}

void PbRpcTccNBWrenPublicStartArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenPublicStartArg)
  // required .PbPhysicalTimeSpec GLST = 1;
  if (has_glst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glst(), output);
  }

  // required .PbPhysicalTimeSpec GRST = 2;
  if (has_grst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenPublicStartArg)
}

::google::protobuf::uint8* PbRpcTccNBWrenPublicStartArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenPublicStartArg)
  // required .PbPhysicalTimeSpec GLST = 1;
  if (has_glst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->glst(), target);
  }

  // required .PbPhysicalTimeSpec GRST = 2;
  if (has_grst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenPublicStartArg)
  return target;
}

int PbRpcTccNBWrenPublicStartArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec GLST = 1;
    if (has_glst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glst());
    }

    // required .PbPhysicalTimeSpec GRST = 2;
    if (has_grst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenPublicStartArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenPublicStartArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenPublicStartArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenPublicStartArg::MergeFrom(const PbRpcTccNBWrenPublicStartArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_glst()) {
      mutable_glst()->::PbPhysicalTimeSpec::MergeFrom(from.glst());
    }
    if (from.has_grst()) {
      mutable_grst()->::PbPhysicalTimeSpec::MergeFrom(from.grst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenPublicStartArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenPublicStartArg::CopyFrom(const PbRpcTccNBWrenPublicStartArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenPublicStartArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_glst()) {
    if (!this->glst().IsInitialized()) return false;
  }
  if (has_grst()) {
    if (!this->grst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenPublicStartArg::Swap(PbRpcTccNBWrenPublicStartArg* other) {
  if (other != this) {
    std::swap(glst_, other->glst_);
    std::swap(grst_, other->grst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenPublicStartArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenPublicStartArg_descriptor_;
  metadata.reflection = PbRpcTccNBWrenPublicStartArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenPublicStartResult::kSucceededFieldNumber;
const int PbRpcTccNBWrenPublicStartResult::kIDFieldNumber;
const int PbRpcTccNBWrenPublicStartResult::kGRSTFieldNumber;
const int PbRpcTccNBWrenPublicStartResult::kGLSTFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenPublicStartResult::PbRpcTccNBWrenPublicStartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenPublicStartResult)
}

void PbRpcTccNBWrenPublicStartResult::InitAsDefaultInstance() {
  grst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  glst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenPublicStartResult::PbRpcTccNBWrenPublicStartResult(const PbRpcTccNBWrenPublicStartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenPublicStartResult)
}

void PbRpcTccNBWrenPublicStartResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  id_ = GOOGLE_LONGLONG(0);
  grst_ = NULL;
  glst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenPublicStartResult::~PbRpcTccNBWrenPublicStartResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenPublicStartResult)
  SharedDtor();
}

void PbRpcTccNBWrenPublicStartResult::SharedDtor() {
  if (this != default_instance_) {
    delete grst_;
    delete glst_;
  }
}

void PbRpcTccNBWrenPublicStartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenPublicStartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenPublicStartResult_descriptor_;
}

const PbRpcTccNBWrenPublicStartResult& PbRpcTccNBWrenPublicStartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenPublicStartResult* PbRpcTccNBWrenPublicStartResult::default_instance_ = NULL;

PbRpcTccNBWrenPublicStartResult* PbRpcTccNBWrenPublicStartResult::New() const {
  return new PbRpcTccNBWrenPublicStartResult;
}

void PbRpcTccNBWrenPublicStartResult::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    succeeded_ = false;
    id_ = GOOGLE_LONGLONG(0);
    if (has_grst()) {
      if (grst_ != NULL) grst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_glst()) {
      if (glst_ != NULL) glst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenPublicStartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenPublicStartResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GRST;
        break;
      }

      // required .PbPhysicalTimeSpec GRST = 3;
      case 3: {
        if (tag == 26) {
         parse_GRST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GLST;
        break;
      }

      // required .PbPhysicalTimeSpec GLST = 4;
      case 4: {
        if (tag == 34) {
         parse_GLST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenPublicStartResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenPublicStartResult)
  return false;
#undef DO_
}

void PbRpcTccNBWrenPublicStartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenPublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // required .PbPhysicalTimeSpec GRST = 3;
  if (has_grst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grst(), output);
  }

  // required .PbPhysicalTimeSpec GLST = 4;
  if (has_glst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->glst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenPublicStartResult)
}

::google::protobuf::uint8* PbRpcTccNBWrenPublicStartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenPublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // required .PbPhysicalTimeSpec GRST = 3;
  if (has_grst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grst(), target);
  }

  // required .PbPhysicalTimeSpec GLST = 4;
  if (has_glst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->glst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenPublicStartResult)
  return target;
}

int PbRpcTccNBWrenPublicStartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec GRST = 3;
    if (has_grst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grst());
    }

    // required .PbPhysicalTimeSpec GLST = 4;
    if (has_glst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenPublicStartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenPublicStartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenPublicStartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenPublicStartResult::MergeFrom(const PbRpcTccNBWrenPublicStartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grst()) {
      mutable_grst()->::PbPhysicalTimeSpec::MergeFrom(from.grst());
    }
    if (from.has_glst()) {
      mutable_glst()->::PbPhysicalTimeSpec::MergeFrom(from.glst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenPublicStartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenPublicStartResult::CopyFrom(const PbRpcTccNBWrenPublicStartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenPublicStartResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_grst()) {
    if (!this->grst().IsInitialized()) return false;
  }
  if (has_glst()) {
    if (!this->glst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenPublicStartResult::Swap(PbRpcTccNBWrenPublicStartResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(id_, other->id_);
    std::swap(grst_, other->grst_);
    std::swap(glst_, other->glst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenPublicStartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenPublicStartResult_descriptor_;
  metadata.reflection = PbRpcTccNBWrenPublicStartResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVPublicReadArg::kIDFieldNumber;
const int PbRpcTccNBWrenKVPublicReadArg::kKeyFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVPublicReadArg::PbRpcTccNBWrenKVPublicReadArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVPublicReadArg)
}

void PbRpcTccNBWrenKVPublicReadArg::InitAsDefaultInstance() {
}

PbRpcTccNBWrenKVPublicReadArg::PbRpcTccNBWrenKVPublicReadArg(const PbRpcTccNBWrenKVPublicReadArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVPublicReadArg)
}

void PbRpcTccNBWrenKVPublicReadArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVPublicReadArg::~PbRpcTccNBWrenKVPublicReadArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVPublicReadArg)
  SharedDtor();
}

void PbRpcTccNBWrenKVPublicReadArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccNBWrenKVPublicReadArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicReadArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVPublicReadArg_descriptor_;
}

const PbRpcTccNBWrenKVPublicReadArg& PbRpcTccNBWrenKVPublicReadArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVPublicReadArg* PbRpcTccNBWrenKVPublicReadArg::default_instance_ = NULL;

PbRpcTccNBWrenKVPublicReadArg* PbRpcTccNBWrenKVPublicReadArg::New() const {
  return new PbRpcTccNBWrenKVPublicReadArg;
}

void PbRpcTccNBWrenKVPublicReadArg::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVPublicReadArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVPublicReadArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVPublicReadArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVPublicReadArg)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVPublicReadArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVPublicReadArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVPublicReadArg)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVPublicReadArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVPublicReadArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVPublicReadArg)
  return target;
}

int PbRpcTccNBWrenKVPublicReadArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVPublicReadArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVPublicReadArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVPublicReadArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVPublicReadArg::MergeFrom(const PbRpcTccNBWrenKVPublicReadArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVPublicReadArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVPublicReadArg::CopyFrom(const PbRpcTccNBWrenKVPublicReadArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVPublicReadArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccNBWrenKVPublicReadArg::Swap(PbRpcTccNBWrenKVPublicReadArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVPublicReadArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVPublicReadArg_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVPublicReadArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVPublicReadResult::kSucceededFieldNumber;
const int PbRpcTccNBWrenKVPublicReadResult::kValueFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVPublicReadResult::PbRpcTccNBWrenKVPublicReadResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVPublicReadResult)
}

void PbRpcTccNBWrenKVPublicReadResult::InitAsDefaultInstance() {
}

PbRpcTccNBWrenKVPublicReadResult::PbRpcTccNBWrenKVPublicReadResult(const PbRpcTccNBWrenKVPublicReadResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVPublicReadResult)
}

void PbRpcTccNBWrenKVPublicReadResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVPublicReadResult::~PbRpcTccNBWrenKVPublicReadResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVPublicReadResult)
  SharedDtor();
}

void PbRpcTccNBWrenKVPublicReadResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccNBWrenKVPublicReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVPublicReadResult_descriptor_;
}

const PbRpcTccNBWrenKVPublicReadResult& PbRpcTccNBWrenKVPublicReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVPublicReadResult* PbRpcTccNBWrenKVPublicReadResult::default_instance_ = NULL;

PbRpcTccNBWrenKVPublicReadResult* PbRpcTccNBWrenKVPublicReadResult::New() const {
  return new PbRpcTccNBWrenKVPublicReadResult;
}

void PbRpcTccNBWrenKVPublicReadResult::Clear() {
  succeeded_ = false;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVPublicReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVPublicReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVPublicReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVPublicReadResult)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVPublicReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVPublicReadResult)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVPublicReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVPublicReadResult)
  return target;
}

int PbRpcTccNBWrenKVPublicReadResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVPublicReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVPublicReadResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVPublicReadResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVPublicReadResult::MergeFrom(const PbRpcTccNBWrenKVPublicReadResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVPublicReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVPublicReadResult::CopyFrom(const PbRpcTccNBWrenKVPublicReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVPublicReadResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccNBWrenKVPublicReadResult::Swap(PbRpcTccNBWrenKVPublicReadResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVPublicReadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVPublicReadResult_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVPublicReadResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVPublicCommitArg::kIDFieldNumber;
const int PbRpcTccNBWrenKVPublicCommitArg::kKeyFieldNumber;
const int PbRpcTccNBWrenKVPublicCommitArg::kValueFieldNumber;
const int PbRpcTccNBWrenKVPublicCommitArg::kLCTFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVPublicCommitArg::PbRpcTccNBWrenKVPublicCommitArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVPublicCommitArg)
}

void PbRpcTccNBWrenKVPublicCommitArg::InitAsDefaultInstance() {
  lct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenKVPublicCommitArg::PbRpcTccNBWrenKVPublicCommitArg(const PbRpcTccNBWrenKVPublicCommitArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVPublicCommitArg)
}

void PbRpcTccNBWrenKVPublicCommitArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVPublicCommitArg::~PbRpcTccNBWrenKVPublicCommitArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVPublicCommitArg)
  SharedDtor();
}

void PbRpcTccNBWrenKVPublicCommitArg::SharedDtor() {
  if (this != default_instance_) {
    delete lct_;
  }
}

void PbRpcTccNBWrenKVPublicCommitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicCommitArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVPublicCommitArg_descriptor_;
}

const PbRpcTccNBWrenKVPublicCommitArg& PbRpcTccNBWrenKVPublicCommitArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVPublicCommitArg* PbRpcTccNBWrenKVPublicCommitArg::default_instance_ = NULL;

PbRpcTccNBWrenKVPublicCommitArg* PbRpcTccNBWrenKVPublicCommitArg::New() const {
  return new PbRpcTccNBWrenKVPublicCommitArg;
}

void PbRpcTccNBWrenKVPublicCommitArg::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_lct()) {
      if (lct_ != NULL) lct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVPublicCommitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVPublicCommitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 3;
      case 3: {
        if (tag == 26) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        if (input->ExpectTag(34)) goto parse_LCT;
        break;
      }

      // optional .PbPhysicalTimeSpec LCT = 4;
      case 4: {
        if (tag == 34) {
         parse_LCT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVPublicCommitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVPublicCommitArg)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVPublicCommitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  // optional .PbPhysicalTimeSpec LCT = 4;
  if (has_lct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVPublicCommitArg)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVPublicCommitArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  // optional .PbPhysicalTimeSpec LCT = 4;
  if (has_lct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVPublicCommitArg)
  return target;
}

int PbRpcTccNBWrenKVPublicCommitArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .PbPhysicalTimeSpec LCT = 4;
    if (has_lct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lct());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVPublicCommitArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVPublicCommitArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVPublicCommitArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVPublicCommitArg::MergeFrom(const PbRpcTccNBWrenKVPublicCommitArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lct()) {
      mutable_lct()->::PbPhysicalTimeSpec::MergeFrom(from.lct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVPublicCommitArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVPublicCommitArg::CopyFrom(const PbRpcTccNBWrenKVPublicCommitArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVPublicCommitArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lct()) {
    if (!this->lct().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenKVPublicCommitArg::Swap(PbRpcTccNBWrenKVPublicCommitArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(lct_, other->lct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVPublicCommitArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVPublicCommitArg_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVPublicCommitArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVPublicCommitResult::kSucceededFieldNumber;
const int PbRpcTccNBWrenKVPublicCommitResult::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVPublicCommitResult::PbRpcTccNBWrenKVPublicCommitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVPublicCommitResult)
}

void PbRpcTccNBWrenKVPublicCommitResult::InitAsDefaultInstance() {
  ct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenKVPublicCommitResult::PbRpcTccNBWrenKVPublicCommitResult(const PbRpcTccNBWrenKVPublicCommitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVPublicCommitResult)
}

void PbRpcTccNBWrenKVPublicCommitResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVPublicCommitResult::~PbRpcTccNBWrenKVPublicCommitResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVPublicCommitResult)
  SharedDtor();
}

void PbRpcTccNBWrenKVPublicCommitResult::SharedDtor() {
  if (this != default_instance_) {
    delete ct_;
  }
}

void PbRpcTccNBWrenKVPublicCommitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVPublicCommitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVPublicCommitResult_descriptor_;
}

const PbRpcTccNBWrenKVPublicCommitResult& PbRpcTccNBWrenKVPublicCommitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVPublicCommitResult* PbRpcTccNBWrenKVPublicCommitResult::default_instance_ = NULL;

PbRpcTccNBWrenKVPublicCommitResult* PbRpcTccNBWrenKVPublicCommitResult::New() const {
  return new PbRpcTccNBWrenKVPublicCommitResult;
}

void PbRpcTccNBWrenKVPublicCommitResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    if (has_ct()) {
      if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVPublicCommitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVPublicCommitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // required .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVPublicCommitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVPublicCommitResult)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVPublicCommitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVPublicCommitResult)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVPublicCommitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVPublicCommitResult)
  return target;
}

int PbRpcTccNBWrenKVPublicCommitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required .PbPhysicalTimeSpec CT = 2;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVPublicCommitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVPublicCommitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVPublicCommitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVPublicCommitResult::MergeFrom(const PbRpcTccNBWrenKVPublicCommitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_ct()) {
      mutable_ct()->::PbPhysicalTimeSpec::MergeFrom(from.ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVPublicCommitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVPublicCommitResult::CopyFrom(const PbRpcTccNBWrenKVPublicCommitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVPublicCommitResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ct()) {
    if (!this->ct().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenKVPublicCommitResult::Swap(PbRpcTccNBWrenKVPublicCommitResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(ct_, other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVPublicCommitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVPublicCommitResult_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVPublicCommitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::kKeyFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::kLSTFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::kRSTFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::kIdFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::PbRpcTccNBWrenKVInternalTxSliceReadKeysArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::InitAsDefaultInstance() {
  lst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  rst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::PbRpcTccNBWrenKVInternalTxSliceReadKeysArg(const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lst_ = NULL;
  rst_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::~PbRpcTccNBWrenKVInternalTxSliceReadKeysArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  SharedDtor();
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::SharedDtor() {
  if (this != default_instance_) {
    delete lst_;
    delete rst_;
  }
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_;
}

const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg& PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysArg* PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::default_instance_ = NULL;

PbRpcTccNBWrenKVInternalTxSliceReadKeysArg* PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::New() const {
  return new PbRpcTccNBWrenKVInternalTxSliceReadKeysArg;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccNBWrenKVInternalTxSliceReadKeysArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(id_, src_);
    if (has_lst()) {
      if (lst_ != NULL) lst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_rst()) {
      if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Key = 1;
      case 1: {
        if (tag == 10) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Key;
        if (input->ExpectTag(18)) goto parse_LST;
        break;
      }

      // required .PbPhysicalTimeSpec LST = 2;
      case 2: {
        if (tag == 18) {
         parse_LST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RST;
        break;
      }

      // required .PbPhysicalTimeSpec RST = 3;
      case 3: {
        if (tag == 26) {
         parse_RST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_src;
        break;
      }

      // optional int64 src = 5;
      case 5: {
        if (tag == 40) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(i), output);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  // required .PbPhysicalTimeSpec RST = 3;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rst(), output);
  }

  // optional int64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // optional int64 src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->key(i), target);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  // required .PbPhysicalTimeSpec RST = 3;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rst(), target);
  }

  // optional int64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // optional int64 src = 5;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVInternalTxSliceReadKeysArg)
  return target;
}

int PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .PbPhysicalTimeSpec LST = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

    // required .PbPhysicalTimeSpec RST = 3;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rst());
    }

    // optional int64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated bytes Key = 1;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::MergeFrom(const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lst()) {
      mutable_lst()->::PbPhysicalTimeSpec::MergeFrom(from.lst());
    }
    if (from.has_rst()) {
      mutable_rst()->::PbPhysicalTimeSpec::MergeFrom(from.rst());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::CopyFrom(const PbRpcTccNBWrenKVInternalTxSliceReadKeysArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_lst()) {
    if (!this->lst().IsInitialized()) return false;
  }
  if (has_rst()) {
    if (!this->rst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::Swap(PbRpcTccNBWrenKVInternalTxSliceReadKeysArg* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(lst_, other->lst_);
    std::swap(rst_, other->rst_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVInternalTxSliceReadKeysArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVInternalTxSliceReadKeysArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kIdFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kLSTFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kRSTFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kHTFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kKeyFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kValueFieldNumber;
const int PbRpcTccNBWrenPartitionClientPrepareRequestArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenPartitionClientPrepareRequestArg::PbRpcTccNBWrenPartitionClientPrepareRequestArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::InitAsDefaultInstance() {
  lst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  rst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  ht_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcTccNBWrenPartitionClientPrepareRequestArg::PbRpcTccNBWrenPartitionClientPrepareRequestArg(const PbRpcTccNBWrenPartitionClientPrepareRequestArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lst_ = NULL;
  rst_ = NULL;
  ht_ = NULL;
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenPartitionClientPrepareRequestArg::~PbRpcTccNBWrenPartitionClientPrepareRequestArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  SharedDtor();
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::SharedDtor() {
  if (this != default_instance_) {
    delete lst_;
    delete rst_;
    delete ht_;
  }
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenPartitionClientPrepareRequestArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_;
}

const PbRpcTccNBWrenPartitionClientPrepareRequestArg& PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenPartitionClientPrepareRequestArg* PbRpcTccNBWrenPartitionClientPrepareRequestArg::default_instance_ = NULL;

PbRpcTccNBWrenPartitionClientPrepareRequestArg* PbRpcTccNBWrenPartitionClientPrepareRequestArg::New() const {
  return new PbRpcTccNBWrenPartitionClientPrepareRequestArg;
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::Clear() {
  if (_has_bits_[0 / 32] & 79) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_lst()) {
      if (lst_ != NULL) lst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_rst()) {
      if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_ht()) {
      if (ht_ != NULL) ht_->::PbPhysicalTimeSpec::Clear();
    }
    src_ = GOOGLE_LONGLONG(0);
  }
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenPartitionClientPrepareRequestArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LST;
        break;
      }

      // required .PbPhysicalTimeSpec LST = 2;
      case 2: {
        if (tag == 18) {
         parse_LST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RST;
        break;
      }

      // required .PbPhysicalTimeSpec RST = 3;
      case 3: {
        if (tag == 26) {
         parse_RST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HT;
        break;
      }

      // required .PbPhysicalTimeSpec HT = 4;
      case 4: {
        if (tag == 34) {
         parse_HT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ht()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 5;
      case 5: {
        if (tag == 42) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Key;
        if (input->ExpectTag(50)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 6;
      case 6: {
        if (tag == 50) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Value;
        if (input->ExpectTag(56)) goto parse_src;
        break;
      }

      // required int64 src = 7;
      case 7: {
        if (tag == 56) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  return false;
#undef DO_
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  // required .PbPhysicalTimeSpec RST = 3;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rst(), output);
  }

  // required .PbPhysicalTimeSpec HT = 4;
  if (has_ht()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ht(), output);
  }

  // repeated bytes Key = 5;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->key(i), output);
  }

  // repeated bytes Value = 6;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->value(i), output);
  }

  // required int64 src = 7;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
}

::google::protobuf::uint8* PbRpcTccNBWrenPartitionClientPrepareRequestArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  // required .PbPhysicalTimeSpec RST = 3;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rst(), target);
  }

  // required .PbPhysicalTimeSpec HT = 4;
  if (has_ht()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ht(), target);
  }

  // repeated bytes Key = 5;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->key(i), target);
  }

  // repeated bytes Value = 6;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->value(i), target);
  }

  // required int64 src = 7;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenPartitionClientPrepareRequestArg)
  return target;
}

int PbRpcTccNBWrenPartitionClientPrepareRequestArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec LST = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

    // required .PbPhysicalTimeSpec RST = 3;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rst());
    }

    // required .PbPhysicalTimeSpec HT = 4;
    if (has_ht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ht());
    }

    // required int64 src = 7;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated bytes Key = 5;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 6;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenPartitionClientPrepareRequestArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenPartitionClientPrepareRequestArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::MergeFrom(const PbRpcTccNBWrenPartitionClientPrepareRequestArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lst()) {
      mutable_lst()->::PbPhysicalTimeSpec::MergeFrom(from.lst());
    }
    if (from.has_rst()) {
      mutable_rst()->::PbPhysicalTimeSpec::MergeFrom(from.rst());
    }
    if (from.has_ht()) {
      mutable_ht()->::PbPhysicalTimeSpec::MergeFrom(from.ht());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::CopyFrom(const PbRpcTccNBWrenPartitionClientPrepareRequestArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenPartitionClientPrepareRequestArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;

  if (has_lst()) {
    if (!this->lst().IsInitialized()) return false;
  }
  if (has_rst()) {
    if (!this->rst().IsInitialized()) return false;
  }
  if (has_ht()) {
    if (!this->ht().IsInitialized()) return false;
  }
  return true;
}

void PbRpcTccNBWrenPartitionClientPrepareRequestArg::Swap(PbRpcTccNBWrenPartitionClientPrepareRequestArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lst_, other->lst_);
    std::swap(rst_, other->rst_);
    std::swap(ht_, other->ht_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenPartitionClientPrepareRequestArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenPartitionClientPrepareRequestArg_descriptor_;
  metadata.reflection = PbRpcTccNBWrenPartitionClientPrepareRequestArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcStabilizationTime::kGRSTFieldNumber;
const int PbRpcStabilizationTime::kGLSTFieldNumber;
#endif  // !_MSC_VER

PbRpcStabilizationTime::PbRpcStabilizationTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcStabilizationTime)
}

void PbRpcStabilizationTime::InitAsDefaultInstance() {
  grst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  glst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcStabilizationTime::PbRpcStabilizationTime(const PbRpcStabilizationTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcStabilizationTime)
}

void PbRpcStabilizationTime::SharedCtor() {
  _cached_size_ = 0;
  grst_ = NULL;
  glst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcStabilizationTime::~PbRpcStabilizationTime() {
  // @@protoc_insertion_point(destructor:PbRpcStabilizationTime)
  SharedDtor();
}

void PbRpcStabilizationTime::SharedDtor() {
  if (this != default_instance_) {
    delete grst_;
    delete glst_;
  }
}

void PbRpcStabilizationTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcStabilizationTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcStabilizationTime_descriptor_;
}

const PbRpcStabilizationTime& PbRpcStabilizationTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcStabilizationTime* PbRpcStabilizationTime::default_instance_ = NULL;

PbRpcStabilizationTime* PbRpcStabilizationTime::New() const {
  return new PbRpcStabilizationTime;
}

void PbRpcStabilizationTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_grst()) {
      if (grst_ != NULL) grst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_glst()) {
      if (glst_ != NULL) glst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcStabilizationTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcStabilizationTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec GRST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GLST;
        break;
      }

      // required .PbPhysicalTimeSpec GLST = 2;
      case 2: {
        if (tag == 18) {
         parse_GLST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcStabilizationTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcStabilizationTime)
  return false;
#undef DO_
}

void PbRpcStabilizationTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcStabilizationTime)
  // required .PbPhysicalTimeSpec GRST = 1;
  if (has_grst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grst(), output);
  }

  // required .PbPhysicalTimeSpec GLST = 2;
  if (has_glst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->glst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcStabilizationTime)
}

::google::protobuf::uint8* PbRpcStabilizationTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcStabilizationTime)
  // required .PbPhysicalTimeSpec GRST = 1;
  if (has_grst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grst(), target);
  }

  // required .PbPhysicalTimeSpec GLST = 2;
  if (has_glst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->glst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcStabilizationTime)
  return target;
}

int PbRpcStabilizationTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec GRST = 1;
    if (has_grst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grst());
    }

    // required .PbPhysicalTimeSpec GLST = 2;
    if (has_glst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcStabilizationTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcStabilizationTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcStabilizationTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcStabilizationTime::MergeFrom(const PbRpcStabilizationTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grst()) {
      mutable_grst()->::PbPhysicalTimeSpec::MergeFrom(from.grst());
    }
    if (from.has_glst()) {
      mutable_glst()->::PbPhysicalTimeSpec::MergeFrom(from.glst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcStabilizationTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcStabilizationTime::CopyFrom(const PbRpcStabilizationTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcStabilizationTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_grst()) {
    if (!this->grst().IsInitialized()) return false;
  }
  if (has_glst()) {
    if (!this->glst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcStabilizationTime::Swap(PbRpcStabilizationTime* other) {
  if (other != this) {
    std::swap(grst_, other->grst_);
    std::swap(glst_, other->glst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcStabilizationTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcStabilizationTime_descriptor_;
  metadata.reflection = PbRpcStabilizationTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPeerStabilizationTimes::kRSTFieldNumber;
const int PbRpcPeerStabilizationTimes::kLSTFieldNumber;
const int PbRpcPeerStabilizationTimes::kSrcPartitionFieldNumber;
#endif  // !_MSC_VER

PbRpcPeerStabilizationTimes::PbRpcPeerStabilizationTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPeerStabilizationTimes)
}

void PbRpcPeerStabilizationTimes::InitAsDefaultInstance() {
  rst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  lst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPeerStabilizationTimes::PbRpcPeerStabilizationTimes(const PbRpcPeerStabilizationTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPeerStabilizationTimes)
}

void PbRpcPeerStabilizationTimes::SharedCtor() {
  _cached_size_ = 0;
  rst_ = NULL;
  lst_ = NULL;
  srcpartition_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPeerStabilizationTimes::~PbRpcPeerStabilizationTimes() {
  // @@protoc_insertion_point(destructor:PbRpcPeerStabilizationTimes)
  SharedDtor();
}

void PbRpcPeerStabilizationTimes::SharedDtor() {
  if (this != default_instance_) {
    delete rst_;
    delete lst_;
  }
}

void PbRpcPeerStabilizationTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPeerStabilizationTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPeerStabilizationTimes_descriptor_;
}

const PbRpcPeerStabilizationTimes& PbRpcPeerStabilizationTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPeerStabilizationTimes* PbRpcPeerStabilizationTimes::default_instance_ = NULL;

PbRpcPeerStabilizationTimes* PbRpcPeerStabilizationTimes::New() const {
  return new PbRpcPeerStabilizationTimes;
}

void PbRpcPeerStabilizationTimes::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_rst()) {
      if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_lst()) {
      if (lst_ != NULL) lst_->::PbPhysicalTimeSpec::Clear();
    }
    srcpartition_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPeerStabilizationTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPeerStabilizationTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec RST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LST;
        break;
      }

      // required .PbPhysicalTimeSpec LST = 2;
      case 2: {
        if (tag == 18) {
         parse_LST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SrcPartition;
        break;
      }

      // optional int64 SrcPartition = 4;
      case 4: {
        if (tag == 32) {
         parse_SrcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPeerStabilizationTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPeerStabilizationTimes)
  return false;
#undef DO_
}

void PbRpcPeerStabilizationTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPeerStabilizationTimes)
  // required .PbPhysicalTimeSpec RST = 1;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rst(), output);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  // optional int64 SrcPartition = 4;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->srcpartition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPeerStabilizationTimes)
}

::google::protobuf::uint8* PbRpcPeerStabilizationTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPeerStabilizationTimes)
  // required .PbPhysicalTimeSpec RST = 1;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rst(), target);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  // optional int64 SrcPartition = 4;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->srcpartition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPeerStabilizationTimes)
  return target;
}

int PbRpcPeerStabilizationTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec RST = 1;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rst());
    }

    // required .PbPhysicalTimeSpec LST = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

    // optional int64 SrcPartition = 4;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcpartition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPeerStabilizationTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPeerStabilizationTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPeerStabilizationTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPeerStabilizationTimes::MergeFrom(const PbRpcPeerStabilizationTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rst()) {
      mutable_rst()->::PbPhysicalTimeSpec::MergeFrom(from.rst());
    }
    if (from.has_lst()) {
      mutable_lst()->::PbPhysicalTimeSpec::MergeFrom(from.lst());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPeerStabilizationTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPeerStabilizationTimes::CopyFrom(const PbRpcPeerStabilizationTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPeerStabilizationTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rst()) {
    if (!this->rst().IsInitialized()) return false;
  }
  if (has_lst()) {
    if (!this->lst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPeerStabilizationTimes::Swap(PbRpcPeerStabilizationTimes* other) {
  if (other != this) {
    std::swap(rst_, other->rst_);
    std::swap(lst_, other->lst_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPeerStabilizationTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPeerStabilizationTimes_descriptor_;
  metadata.reflection = PbRpcPeerStabilizationTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcST::kRoundFieldNumber;
const int PbRpcST::kRSTFieldNumber;
const int PbRpcST::kLSTFieldNumber;
#endif  // !_MSC_VER

PbRpcST::PbRpcST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcST)
}

void PbRpcST::InitAsDefaultInstance() {
  rst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  lst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcST::PbRpcST(const PbRpcST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcST)
}

void PbRpcST::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  rst_ = NULL;
  lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcST::~PbRpcST() {
  // @@protoc_insertion_point(destructor:PbRpcST)
  SharedDtor();
}

void PbRpcST::SharedDtor() {
  if (this != default_instance_) {
    delete rst_;
    delete lst_;
  }
}

void PbRpcST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcST_descriptor_;
}

const PbRpcST& PbRpcST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcST* PbRpcST::default_instance_ = NULL;

PbRpcST* PbRpcST::New() const {
  return new PbRpcST;
}

void PbRpcST::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    round_ = 0;
    if (has_rst()) {
      if (rst_ != NULL) rst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_lst()) {
      if (lst_ != NULL) lst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RST;
        break;
      }

      // required .PbPhysicalTimeSpec RST = 2;
      case 2: {
        if (tag == 18) {
         parse_RST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LST;
        break;
      }

      // required .PbPhysicalTimeSpec LST = 3;
      case 3: {
        if (tag == 26) {
         parse_LST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcST)
  return false;
#undef DO_
}

void PbRpcST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcST)
  // required int32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // required .PbPhysicalTimeSpec RST = 2;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rst(), output);
  }

  // required .PbPhysicalTimeSpec LST = 3;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcST)
}

::google::protobuf::uint8* PbRpcST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcST)
  // required int32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // required .PbPhysicalTimeSpec RST = 2;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rst(), target);
  }

  // required .PbPhysicalTimeSpec LST = 3;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcST)
  return target;
}

int PbRpcST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // required .PbPhysicalTimeSpec RST = 2;
    if (has_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rst());
    }

    // required .PbPhysicalTimeSpec LST = 3;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcST::MergeFrom(const PbRpcST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_rst()) {
      mutable_rst()->::PbPhysicalTimeSpec::MergeFrom(from.rst());
    }
    if (from.has_lst()) {
      mutable_lst()->::PbPhysicalTimeSpec::MergeFrom(from.lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcST::CopyFrom(const PbRpcST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rst()) {
    if (!this->rst().IsInitialized()) return false;
  }
  if (has_lst()) {
    if (!this->lst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcST::Swap(PbRpcST* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(rst_, other->rst_);
    std::swap(lst_, other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcST_descriptor_;
  metadata.reflection = PbRpcST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::kSucceededFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::kValueFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::kSrcFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::kIdFieldNumber;
const int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::kWaitedXactFieldNumber;
#endif  // !_MSC_VER

PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::PbRpcTccNBWrenKVInternalTxSliceReadKeysResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::InitAsDefaultInstance() {
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::PbRpcTccNBWrenKVInternalTxSliceReadKeysResult(const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  src_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  waitedxact_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::~PbRpcTccNBWrenKVInternalTxSliceReadKeysResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  SharedDtor();
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_;
}

const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult& PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fnb_5fwren_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccNBWrenKVInternalTxSliceReadKeysResult* PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::default_instance_ = NULL;

PbRpcTccNBWrenKVInternalTxSliceReadKeysResult* PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::New() const {
  return new PbRpcTccNBWrenKVInternalTxSliceReadKeysResult;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccNBWrenKVInternalTxSliceReadKeysResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(succeeded_, waitedxact_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectTag(24)) goto parse_Src;
        break;
      }

      // optional int32 Src = 3;
      case 3: {
        if (tag == 24) {
         parse_Src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_waitedXact;
        break;
      }

      // optional double waitedXact = 5;
      case 5: {
        if (tag == 41) {
         parse_waitedXact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitedxact_)));
          set_has_waitedxact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  return false;
#undef DO_
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  // optional int32 Src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->src(), output);
  }

  // optional int64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // optional double waitedXact = 5;
  if (has_waitedxact()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->waitedxact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
}

::google::protobuf::uint8* PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  // optional int32 Src = 3;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->src(), target);
  }

  // optional int64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // optional double waitedXact = 5;
  if (has_waitedxact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->waitedxact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccNBWrenKVInternalTxSliceReadKeysResult)
  return target;
}

int PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional int32 Src = 3;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // optional int64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional double waitedXact = 5;
    if (has_waitedxact()) {
      total_size += 1 + 8;
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::MergeFrom(const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_waitedxact()) {
      set_waitedxact(from.waitedxact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::CopyFrom(const PbRpcTccNBWrenKVInternalTxSliceReadKeysResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::Swap(PbRpcTccNBWrenKVInternalTxSliceReadKeysResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(src_, other->src_);
    std::swap(id_, other->id_);
    std::swap(waitedxact_, other->waitedxact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccNBWrenKVInternalTxSliceReadKeysResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_descriptor_;
  metadata.reflection = PbRpcTccNBWrenKVInternalTxSliceReadKeysResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
