// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcc_cure_messages.proto

#ifndef PROTOBUF_tcc_5fcure_5fmessages_2eproto__INCLUDED
#define PROTOBUF_tcc_5fcure_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

class PbRpcTccCurePublicStartArg;
class PbRpcTccCurePublicStartResult;
class PbRpcTccCureKVPublicReadArg;
class PbRpcTccCureKVPublicReadResult;
class PbRpcTccCureKVPublicCommitArg;
class PbRpcTccCureKVPublicCommitResult;
class PbRpcTccCureKVInternalTxSliceGetArg;
class PbRpcTccCureKVInternalTxSliceGetResult;
class PbRpcTccCureKVInternalTxSliceReadKeysArg;
class PbRpcTccCureKVInternalTxSliceReadKeysResult;
class PbRpcTccCurePartitionClientPrepareRequestArg;
class PbRpcTccCureKVPublicGetServerConfigResult;
class PbRpTccCureCommitRequestArg;

// ===================================================================

class PbRpcTccCurePublicStartArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCurePublicStartArg();
  virtual ~PbRpcTccCurePublicStartArg();

  PbRpcTccCurePublicStartArg(const PbRpcTccCurePublicStartArg& from);

  inline PbRpcTccCurePublicStartArg& operator=(const PbRpcTccCurePublicStartArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCurePublicStartArg& default_instance();

  void Swap(PbRpcTccCurePublicStartArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCurePublicStartArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCurePublicStartArg& from);
  void MergeFrom(const PbRpcTccCurePublicStartArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbPhysicalTimeSpec DV = 1;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 1;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // @@protoc_insertion_point(class_scope:PbRpcTccCurePublicStartArg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCurePublicStartArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCurePublicStartResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCurePublicStartResult();
  virtual ~PbRpcTccCurePublicStartResult();

  PbRpcTccCurePublicStartResult(const PbRpcTccCurePublicStartResult& from);

  inline PbRpcTccCurePublicStartResult& operator=(const PbRpcTccCurePublicStartResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCurePublicStartResult& default_instance();

  void Swap(PbRpcTccCurePublicStartResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCurePublicStartResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCurePublicStartResult& from);
  void MergeFrom(const PbRpcTccCurePublicStartResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required int64 ID = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated .PbPhysicalTimeSpec DV = 3;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // @@protoc_insertion_point(class_scope:PbRpcTccCurePublicStartResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCurePublicStartResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVPublicReadArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVPublicReadArg();
  virtual ~PbRpcTccCureKVPublicReadArg();

  PbRpcTccCureKVPublicReadArg(const PbRpcTccCureKVPublicReadArg& from);

  inline PbRpcTccCureKVPublicReadArg& operator=(const PbRpcTccCureKVPublicReadArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVPublicReadArg& default_instance();

  void Swap(PbRpcTccCureKVPublicReadArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVPublicReadArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVPublicReadArg& from);
  void MergeFrom(const PbRpcTccCureKVPublicReadArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated bytes Key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVPublicReadArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVPublicReadArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVPublicReadResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVPublicReadResult();
  virtual ~PbRpcTccCureKVPublicReadResult();

  PbRpcTccCureKVPublicReadResult(const PbRpcTccCureKVPublicReadResult& from);

  inline PbRpcTccCureKVPublicReadResult& operator=(const PbRpcTccCureKVPublicReadResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVPublicReadResult& default_instance();

  void Swap(PbRpcTccCureKVPublicReadResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVPublicReadResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVPublicReadResult& from);
  void MergeFrom(const PbRpcTccCureKVPublicReadResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated bytes Value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVPublicReadResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVPublicReadResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVPublicCommitArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVPublicCommitArg();
  virtual ~PbRpcTccCureKVPublicCommitArg();

  PbRpcTccCureKVPublicCommitArg(const PbRpcTccCureKVPublicCommitArg& from);

  inline PbRpcTccCureKVPublicCommitArg& operator=(const PbRpcTccCureKVPublicCommitArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVPublicCommitArg& default_instance();

  void Swap(PbRpcTccCureKVPublicCommitArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVPublicCommitArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVPublicCommitArg& from);
  void MergeFrom(const PbRpcTccCureKVPublicCommitArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated bytes Key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated bytes Value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVPublicCommitArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVPublicCommitArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVPublicCommitResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVPublicCommitResult();
  virtual ~PbRpcTccCureKVPublicCommitResult();

  PbRpcTccCureKVPublicCommitResult(const PbRpcTccCureKVPublicCommitResult& from);

  inline PbRpcTccCureKVPublicCommitResult& operator=(const PbRpcTccCureKVPublicCommitResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVPublicCommitResult& default_instance();

  void Swap(PbRpcTccCureKVPublicCommitResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVPublicCommitResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVPublicCommitResult& from);
  void MergeFrom(const PbRpcTccCureKVPublicCommitResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated .PbPhysicalTimeSpec CT = 2;
  inline int ct_size() const;
  inline void clear_ct();
  static const int kCTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ct(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_ct(int index);
  inline ::PbPhysicalTimeSpec* add_ct();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      ct() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_ct();

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVPublicCommitResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > ct_;
  bool succeeded_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVPublicCommitResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVInternalTxSliceGetArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVInternalTxSliceGetArg();
  virtual ~PbRpcTccCureKVInternalTxSliceGetArg();

  PbRpcTccCureKVInternalTxSliceGetArg(const PbRpcTccCureKVInternalTxSliceGetArg& from);

  inline PbRpcTccCureKVInternalTxSliceGetArg& operator=(const PbRpcTccCureKVInternalTxSliceGetArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVInternalTxSliceGetArg& default_instance();

  void Swap(PbRpcTccCureKVInternalTxSliceGetArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVInternalTxSliceGetArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVInternalTxSliceGetArg& from);
  void MergeFrom(const PbRpcTccCureKVInternalTxSliceGetArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // repeated .PbPhysicalTimeSpec DV = 2;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // optional int64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 4;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 4;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVInternalTxSliceGetArg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVInternalTxSliceGetArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVInternalTxSliceGetResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVInternalTxSliceGetResult();
  virtual ~PbRpcTccCureKVInternalTxSliceGetResult();

  PbRpcTccCureKVInternalTxSliceGetResult(const PbRpcTccCureKVInternalTxSliceGetResult& from);

  inline PbRpcTccCureKVInternalTxSliceGetResult& operator=(const PbRpcTccCureKVInternalTxSliceGetResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVInternalTxSliceGetResult& default_instance();

  void Swap(PbRpcTccCureKVInternalTxSliceGetResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVInternalTxSliceGetResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVInternalTxSliceGetResult& from);
  void MergeFrom(const PbRpcTccCureKVInternalTxSliceGetResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required bytes GetValue = 2;
  inline bool has_getvalue() const;
  inline void clear_getvalue();
  static const int kGetValueFieldNumber = 2;
  inline const ::std::string& getvalue() const;
  inline void set_getvalue(const ::std::string& value);
  inline void set_getvalue(const char* value);
  inline void set_getvalue(const void* value, size_t size);
  inline ::std::string* mutable_getvalue();
  inline ::std::string* release_getvalue();
  inline void set_allocated_getvalue(::std::string* getvalue);

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // optional double waitedXact = 4;
  inline bool has_waitedxact() const;
  inline void clear_waitedxact();
  static const int kWaitedXactFieldNumber = 4;
  inline double waitedxact() const;
  inline void set_waitedxact(double value);

  // optional int64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVInternalTxSliceGetResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_getvalue();
  inline void clear_has_getvalue();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_waitedxact();
  inline void clear_has_waitedxact();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* getvalue_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  double waitedxact_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVInternalTxSliceGetResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVInternalTxSliceReadKeysArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVInternalTxSliceReadKeysArg();
  virtual ~PbRpcTccCureKVInternalTxSliceReadKeysArg();

  PbRpcTccCureKVInternalTxSliceReadKeysArg(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from);

  inline PbRpcTccCureKVInternalTxSliceReadKeysArg& operator=(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVInternalTxSliceReadKeysArg& default_instance();

  void Swap(PbRpcTccCureKVInternalTxSliceReadKeysArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVInternalTxSliceReadKeysArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from);
  void MergeFrom(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated .PbPhysicalTimeSpec DV = 2;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // optional int64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 4;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 4;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVInternalTxSliceReadKeysArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVInternalTxSliceReadKeysArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVInternalTxSliceReadKeysResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVInternalTxSliceReadKeysResult();
  virtual ~PbRpcTccCureKVInternalTxSliceReadKeysResult();

  PbRpcTccCureKVInternalTxSliceReadKeysResult(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from);

  inline PbRpcTccCureKVInternalTxSliceReadKeysResult& operator=(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVInternalTxSliceReadKeysResult& default_instance();

  void Swap(PbRpcTccCureKVInternalTxSliceReadKeysResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVInternalTxSliceReadKeysResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from);
  void MergeFrom(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // repeated bytes Value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // optional int32 SrcReplica = 3;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 3;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // optional double waitedXact = 4;
  inline bool has_waitedxact() const;
  inline void clear_waitedxact();
  static const int kWaitedXactFieldNumber = 4;
  inline double waitedxact() const;
  inline void set_waitedxact(double value);

  // optional int64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVInternalTxSliceReadKeysResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_waitedxact();
  inline void clear_has_waitedxact();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  bool succeeded_;
  ::google::protobuf::int32 srcreplica_;
  double waitedxact_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVInternalTxSliceReadKeysResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCurePartitionClientPrepareRequestArg : public ::google::protobuf::Message {
 public:
  PbRpcTccCurePartitionClientPrepareRequestArg();
  virtual ~PbRpcTccCurePartitionClientPrepareRequestArg();

  PbRpcTccCurePartitionClientPrepareRequestArg(const PbRpcTccCurePartitionClientPrepareRequestArg& from);

  inline PbRpcTccCurePartitionClientPrepareRequestArg& operator=(const PbRpcTccCurePartitionClientPrepareRequestArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCurePartitionClientPrepareRequestArg& default_instance();

  void Swap(PbRpcTccCurePartitionClientPrepareRequestArg* other);

  // implements Message ----------------------------------------------

  PbRpcTccCurePartitionClientPrepareRequestArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCurePartitionClientPrepareRequestArg& from);
  void MergeFrom(const PbRpcTccCurePartitionClientPrepareRequestArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated .PbPhysicalTimeSpec DV = 2;
  inline int dv_size() const;
  inline void clear_dv();
  static const int kDVFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& dv(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_dv(int index);
  inline ::PbPhysicalTimeSpec* add_dv();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      dv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_dv();

  // repeated bytes Key = 3;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // repeated bytes Value = 4;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // required int64 src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCurePartitionClientPrepareRequestArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > dv_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::int64 src_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCurePartitionClientPrepareRequestArg* default_instance_;
};
// -------------------------------------------------------------------

class PbRpcTccCureKVPublicGetServerConfigResult : public ::google::protobuf::Message {
 public:
  PbRpcTccCureKVPublicGetServerConfigResult();
  virtual ~PbRpcTccCureKVPublicGetServerConfigResult();

  PbRpcTccCureKVPublicGetServerConfigResult(const PbRpcTccCureKVPublicGetServerConfigResult& from);

  inline PbRpcTccCureKVPublicGetServerConfigResult& operator=(const PbRpcTccCureKVPublicGetServerConfigResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpcTccCureKVPublicGetServerConfigResult& default_instance();

  void Swap(PbRpcTccCureKVPublicGetServerConfigResult* other);

  // implements Message ----------------------------------------------

  PbRpcTccCureKVPublicGetServerConfigResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpcTccCureKVPublicGetServerConfigResult& from);
  void MergeFrom(const PbRpcTccCureKVPublicGetServerConfigResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Succeeded = 1;
  inline bool has_succeeded() const;
  inline void clear_succeeded();
  static const int kSucceededFieldNumber = 1;
  inline bool succeeded() const;
  inline void set_succeeded(bool value);

  // required int32 NumPartitions = 2;
  inline bool has_numpartitions() const;
  inline void clear_numpartitions();
  static const int kNumPartitionsFieldNumber = 2;
  inline ::google::protobuf::int32 numpartitions() const;
  inline void set_numpartitions(::google::protobuf::int32 value);

  // required int32 NumReplicasPerPartition = 3;
  inline bool has_numreplicasperpartition() const;
  inline void clear_numreplicasperpartition();
  static const int kNumReplicasPerPartitionFieldNumber = 3;
  inline ::google::protobuf::int32 numreplicasperpartition() const;
  inline void set_numreplicasperpartition(::google::protobuf::int32 value);

  // required int32 replicaId = 4;
  inline bool has_replicaid() const;
  inline void clear_replicaid();
  static const int kReplicaIdFieldNumber = 4;
  inline ::google::protobuf::int32 replicaid() const;
  inline void set_replicaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbRpcTccCureKVPublicGetServerConfigResult)
 private:
  inline void set_has_succeeded();
  inline void clear_has_succeeded();
  inline void set_has_numpartitions();
  inline void clear_has_numpartitions();
  inline void set_has_numreplicasperpartition();
  inline void clear_has_numreplicasperpartition();
  inline void set_has_replicaid();
  inline void clear_has_replicaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool succeeded_;
  ::google::protobuf::int32 numpartitions_;
  ::google::protobuf::int32 numreplicasperpartition_;
  ::google::protobuf::int32 replicaid_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpcTccCureKVPublicGetServerConfigResult* default_instance_;
};
// -------------------------------------------------------------------

class PbRpTccCureCommitRequestArg : public ::google::protobuf::Message {
 public:
  PbRpTccCureCommitRequestArg();
  virtual ~PbRpTccCureCommitRequestArg();

  PbRpTccCureCommitRequestArg(const PbRpTccCureCommitRequestArg& from);

  inline PbRpTccCureCommitRequestArg& operator=(const PbRpTccCureCommitRequestArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRpTccCureCommitRequestArg& default_instance();

  void Swap(PbRpTccCureCommitRequestArg* other);

  // implements Message ----------------------------------------------

  PbRpTccCureCommitRequestArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRpTccCureCommitRequestArg& from);
  void MergeFrom(const PbRpTccCureCommitRequestArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // repeated .PbPhysicalTimeSpec CT = 2;
  inline int ct_size() const;
  inline void clear_ct();
  static const int kCTFieldNumber = 2;
  inline const ::PbPhysicalTimeSpec& ct(int index) const;
  inline ::PbPhysicalTimeSpec* mutable_ct(int index);
  inline ::PbPhysicalTimeSpec* add_ct();
  inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
      ct() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
      mutable_ct();

  // @@protoc_insertion_point(class_scope:PbRpTccCureCommitRequestArg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec > ct_;
  friend void  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static PbRpTccCureCommitRequestArg* default_instance_;
};
// ===================================================================


// ===================================================================

// PbRpcTccCurePublicStartArg

// repeated .PbPhysicalTimeSpec DV = 1;
inline int PbRpcTccCurePublicStartArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcTccCurePublicStartArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCurePublicStartArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePublicStartArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePublicStartArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCurePublicStartArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePublicStartArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcTccCurePublicStartArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCurePublicStartArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCurePublicStartArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCurePublicStartArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCurePublicStartArg.DV)
  return &dv_;
}

// -------------------------------------------------------------------

// PbRpcTccCurePublicStartResult

// required bool Succeeded = 1;
inline bool PbRpcTccCurePublicStartResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCurePublicStartResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCurePublicStartResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCurePublicStartResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCurePublicStartResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePublicStartResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCurePublicStartResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCurePublicStartResult.Succeeded)
}

// required int64 ID = 2;
inline bool PbRpcTccCurePublicStartResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccCurePublicStartResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccCurePublicStartResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccCurePublicStartResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCurePublicStartResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePublicStartResult.ID)
  return id_;
}
inline void PbRpcTccCurePublicStartResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCurePublicStartResult.ID)
}

// repeated .PbPhysicalTimeSpec DV = 3;
inline int PbRpcTccCurePublicStartResult::dv_size() const {
  return dv_.size();
}
inline void PbRpcTccCurePublicStartResult::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCurePublicStartResult::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePublicStartResult.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePublicStartResult::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCurePublicStartResult.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePublicStartResult::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcTccCurePublicStartResult.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCurePublicStartResult::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCurePublicStartResult.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCurePublicStartResult::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCurePublicStartResult.DV)
  return &dv_;
}

// -------------------------------------------------------------------

// PbRpcTccCureKVPublicReadArg

// required int64 ID = 1;
inline bool PbRpcTccCureKVPublicReadArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVPublicReadArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVPublicReadArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVPublicReadArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVPublicReadArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicReadArg.ID)
  return id_;
}
inline void PbRpcTccCureKVPublicReadArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicReadArg.ID)
}

// repeated bytes Key = 2;
inline int PbRpcTccCureKVPublicReadArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccCureKVPublicReadArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccCureKVPublicReadArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicReadArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccCureKVPublicReadArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVPublicReadArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccCureKVPublicReadArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicReadArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVPublicReadArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVPublicReadArg.Key)
}
inline void PbRpcTccCureKVPublicReadArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVPublicReadArg.Key)
}
inline ::std::string* PbRpcTccCureKVPublicReadArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccCureKVPublicReadArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVPublicReadArg.Key)
}
inline void PbRpcTccCureKVPublicReadArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVPublicReadArg.Key)
}
inline void PbRpcTccCureKVPublicReadArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVPublicReadArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVPublicReadArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVPublicReadArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVPublicReadArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVPublicReadArg.Key)
  return &key_;
}

// -------------------------------------------------------------------

// PbRpcTccCureKVPublicReadResult

// required bool Succeeded = 1;
inline bool PbRpcTccCureKVPublicReadResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVPublicReadResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVPublicReadResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVPublicReadResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCureKVPublicReadResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicReadResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCureKVPublicReadResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicReadResult.Succeeded)
}

// repeated bytes Value = 2;
inline int PbRpcTccCureKVPublicReadResult::value_size() const {
  return value_.size();
}
inline void PbRpcTccCureKVPublicReadResult::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccCureKVPublicReadResult::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicReadResult.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccCureKVPublicReadResult::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVPublicReadResult.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccCureKVPublicReadResult::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicReadResult.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVPublicReadResult::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVPublicReadResult.Value)
}
inline void PbRpcTccCureKVPublicReadResult::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVPublicReadResult.Value)
}
inline ::std::string* PbRpcTccCureKVPublicReadResult::add_value() {
  return value_.Add();
}
inline void PbRpcTccCureKVPublicReadResult::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVPublicReadResult.Value)
}
inline void PbRpcTccCureKVPublicReadResult::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVPublicReadResult.Value)
}
inline void PbRpcTccCureKVPublicReadResult::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVPublicReadResult.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVPublicReadResult::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVPublicReadResult.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVPublicReadResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVPublicReadResult.Value)
  return &value_;
}

// -------------------------------------------------------------------

// PbRpcTccCureKVPublicCommitArg

// required int64 ID = 1;
inline bool PbRpcTccCureKVPublicCommitArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVPublicCommitArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVPublicCommitArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVPublicCommitArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVPublicCommitArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicCommitArg.ID)
  return id_;
}
inline void PbRpcTccCureKVPublicCommitArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicCommitArg.ID)
}

// repeated bytes Key = 2;
inline int PbRpcTccCureKVPublicCommitArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccCureKVPublicCommitArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccCureKVPublicCommitArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicCommitArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccCureKVPublicCommitArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVPublicCommitArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccCureKVPublicCommitArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicCommitArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVPublicCommitArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVPublicCommitArg.Key)
}
inline void PbRpcTccCureKVPublicCommitArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVPublicCommitArg.Key)
}
inline ::std::string* PbRpcTccCureKVPublicCommitArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccCureKVPublicCommitArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVPublicCommitArg.Key)
}
inline void PbRpcTccCureKVPublicCommitArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVPublicCommitArg.Key)
}
inline void PbRpcTccCureKVPublicCommitArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVPublicCommitArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVPublicCommitArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVPublicCommitArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVPublicCommitArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVPublicCommitArg.Key)
  return &key_;
}

// repeated bytes Value = 3;
inline int PbRpcTccCureKVPublicCommitArg::value_size() const {
  return value_.size();
}
inline void PbRpcTccCureKVPublicCommitArg::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccCureKVPublicCommitArg::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicCommitArg.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccCureKVPublicCommitArg::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVPublicCommitArg.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccCureKVPublicCommitArg::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicCommitArg.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVPublicCommitArg::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVPublicCommitArg.Value)
}
inline void PbRpcTccCureKVPublicCommitArg::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVPublicCommitArg.Value)
}
inline ::std::string* PbRpcTccCureKVPublicCommitArg::add_value() {
  return value_.Add();
}
inline void PbRpcTccCureKVPublicCommitArg::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVPublicCommitArg.Value)
}
inline void PbRpcTccCureKVPublicCommitArg::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVPublicCommitArg.Value)
}
inline void PbRpcTccCureKVPublicCommitArg::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVPublicCommitArg.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVPublicCommitArg::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVPublicCommitArg.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVPublicCommitArg::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVPublicCommitArg.Value)
  return &value_;
}

// -------------------------------------------------------------------

// PbRpcTccCureKVPublicCommitResult

// required bool Succeeded = 1;
inline bool PbRpcTccCureKVPublicCommitResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVPublicCommitResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVPublicCommitResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVPublicCommitResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCureKVPublicCommitResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicCommitResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCureKVPublicCommitResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicCommitResult.Succeeded)
}

// repeated .PbPhysicalTimeSpec CT = 2;
inline int PbRpcTccCureKVPublicCommitResult::ct_size() const {
  return ct_.size();
}
inline void PbRpcTccCureKVPublicCommitResult::clear_ct() {
  ct_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCureKVPublicCommitResult::ct(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicCommitResult.CT)
  return ct_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVPublicCommitResult::mutable_ct(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVPublicCommitResult.CT)
  return ct_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVPublicCommitResult::add_ct() {
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVPublicCommitResult.CT)
  return ct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCureKVPublicCommitResult::ct() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVPublicCommitResult.CT)
  return ct_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCureKVPublicCommitResult::mutable_ct() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVPublicCommitResult.CT)
  return &ct_;
}

// -------------------------------------------------------------------

// PbRpcTccCureKVInternalTxSliceGetArg

// required bytes Key = 1;
inline bool PbRpcTccCureKVInternalTxSliceGetArg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbRpcTccCureKVInternalTxSliceGetArg::key() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetArg.Key)
  return *key_;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetArg.Key)
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVInternalTxSliceGetArg.Key)
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVInternalTxSliceGetArg.Key)
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceGetArg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceGetArg.Key)
  return key_;
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceGetArg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccCureKVInternalTxSliceGetArg.Key)
}

// repeated .PbPhysicalTimeSpec DV = 2;
inline int PbRpcTccCureKVInternalTxSliceGetArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCureKVInternalTxSliceGetArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVInternalTxSliceGetArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceGetArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVInternalTxSliceGetArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVInternalTxSliceGetArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCureKVInternalTxSliceGetArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVInternalTxSliceGetArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCureKVInternalTxSliceGetArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVInternalTxSliceGetArg.DV)
  return &dv_;
}

// optional int64 id = 3;
inline bool PbRpcTccCureKVInternalTxSliceGetArg::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceGetArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetArg.id)
  return id_;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetArg.id)
}

// optional int64 src = 4;
inline bool PbRpcTccCureKVInternalTxSliceGetArg::has_src() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_has_src() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceGetArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetArg.src)
  return src_;
}
inline void PbRpcTccCureKVInternalTxSliceGetArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetArg.src)
}

// -------------------------------------------------------------------

// PbRpcTccCureKVInternalTxSliceGetResult

// required bool Succeeded = 1;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCureKVInternalTxSliceGetResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.Succeeded)
}

// required bytes GetValue = 2;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_getvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_getvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_getvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_getvalue() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_->clear();
  }
  clear_has_getvalue();
}
inline const ::std::string& PbRpcTccCureKVInternalTxSliceGetResult::getvalue() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
  return *getvalue_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_getvalue(const ::std::string& value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_getvalue(const char* value) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_getvalue(const void* value, size_t size) {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  getvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceGetResult::mutable_getvalue() {
  set_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
  return getvalue_;
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceGetResult::release_getvalue() {
  clear_has_getvalue();
  if (getvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getvalue_;
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_allocated_getvalue(::std::string* getvalue) {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (getvalue) {
    set_has_getvalue();
    getvalue_ = getvalue;
  } else {
    clear_has_getvalue();
    getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbRpcTccCureKVInternalTxSliceGetResult.GetValue)
}

// optional int32 SrcReplica = 3;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcTccCureKVInternalTxSliceGetResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.SrcReplica)
}

// optional double waitedXact = 4;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_waitedxact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_waitedxact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_waitedxact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_waitedxact() {
  waitedxact_ = 0;
  clear_has_waitedxact();
}
inline double PbRpcTccCureKVInternalTxSliceGetResult::waitedxact() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.waitedXact)
  return waitedxact_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_waitedxact(double value) {
  set_has_waitedxact();
  waitedxact_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.waitedXact)
}

// optional int64 id = 5;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceGetResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.id)
  return id_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.id)
}

// optional int64 src = 6;
inline bool PbRpcTccCureKVInternalTxSliceGetResult::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceGetResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceGetResult.src)
  return src_;
}
inline void PbRpcTccCureKVInternalTxSliceGetResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceGetResult.src)
}

// -------------------------------------------------------------------

// PbRpcTccCureKVInternalTxSliceReadKeysArg

// repeated bytes Key = 1;
inline int PbRpcTccCureKVInternalTxSliceReadKeysArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccCureKVInternalTxSliceReadKeysArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceReadKeysArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceReadKeysArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVInternalTxSliceReadKeysArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVInternalTxSliceReadKeysArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVInternalTxSliceReadKeysArg.Key)
  return &key_;
}

// repeated .PbPhysicalTimeSpec DV = 2;
inline int PbRpcTccCureKVInternalTxSliceReadKeysArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCureKVInternalTxSliceReadKeysArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVInternalTxSliceReadKeysArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceReadKeysArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCureKVInternalTxSliceReadKeysArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVInternalTxSliceReadKeysArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCureKVInternalTxSliceReadKeysArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVInternalTxSliceReadKeysArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCureKVInternalTxSliceReadKeysArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVInternalTxSliceReadKeysArg.DV)
  return &dv_;
}

// optional int64 id = 3;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysArg::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceReadKeysArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysArg.id)
  return id_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysArg.id)
}

// optional int64 src = 4;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysArg::has_src() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_has_src() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceReadKeysArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysArg.src)
  return src_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysArg.src)
}

// -------------------------------------------------------------------

// PbRpcTccCureKVInternalTxSliceReadKeysResult

// required bool Succeeded = 1;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.Succeeded)
}

// repeated bytes Value = 2;
inline int PbRpcTccCureKVInternalTxSliceReadKeysResult::value_size() const {
  return value_.size();
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccCureKVInternalTxSliceReadKeysResult::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceReadKeysResult::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
}
inline ::std::string* PbRpcTccCureKVInternalTxSliceReadKeysResult::add_value() {
  return value_.Add();
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCureKVInternalTxSliceReadKeysResult::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCureKVInternalTxSliceReadKeysResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCureKVInternalTxSliceReadKeysResult.Value)
  return &value_;
}

// optional int32 SrcReplica = 3;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbRpcTccCureKVInternalTxSliceReadKeysResult::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.SrcReplica)
  return srcreplica_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.SrcReplica)
}

// optional double waitedXact = 4;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::has_waitedxact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_has_waitedxact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_has_waitedxact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_waitedxact() {
  waitedxact_ = 0;
  clear_has_waitedxact();
}
inline double PbRpcTccCureKVInternalTxSliceReadKeysResult::waitedxact() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.waitedXact)
  return waitedxact_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_waitedxact(double value) {
  set_has_waitedxact();
  waitedxact_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.waitedXact)
}

// optional int64 id = 5;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceReadKeysResult::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.id)
  return id_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.id)
}

// optional int64 src = 6;
inline bool PbRpcTccCureKVInternalTxSliceReadKeysResult::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccCureKVInternalTxSliceReadKeysResult::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVInternalTxSliceReadKeysResult.src)
  return src_;
}
inline void PbRpcTccCureKVInternalTxSliceReadKeysResult::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVInternalTxSliceReadKeysResult.src)
}

// -------------------------------------------------------------------

// PbRpcTccCurePartitionClientPrepareRequestArg

// required int64 id = 1;
inline bool PbRpcTccCurePartitionClientPrepareRequestArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpcTccCurePartitionClientPrepareRequestArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePartitionClientPrepareRequestArg.id)
  return id_;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCurePartitionClientPrepareRequestArg.id)
}

// repeated .PbPhysicalTimeSpec DV = 2;
inline int PbRpcTccCurePartitionClientPrepareRequestArg::dv_size() const {
  return dv_.size();
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_dv() {
  dv_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpcTccCurePartitionClientPrepareRequestArg::dv(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePartitionClientPrepareRequestArg.DV)
  return dv_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePartitionClientPrepareRequestArg::mutable_dv(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCurePartitionClientPrepareRequestArg.DV)
  return dv_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpcTccCurePartitionClientPrepareRequestArg::add_dv() {
  // @@protoc_insertion_point(field_add:PbRpcTccCurePartitionClientPrepareRequestArg.DV)
  return dv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpcTccCurePartitionClientPrepareRequestArg::dv() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCurePartitionClientPrepareRequestArg.DV)
  return dv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpcTccCurePartitionClientPrepareRequestArg::mutable_dv() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCurePartitionClientPrepareRequestArg.DV)
  return &dv_;
}

// repeated bytes Key = 3;
inline int PbRpcTccCurePartitionClientPrepareRequestArg::key_size() const {
  return key_.size();
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_key() {
  key_.Clear();
}
inline const ::std::string& PbRpcTccCurePartitionClientPrepareRequestArg::key(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
  return key_.Get(index);
}
inline ::std::string* PbRpcTccCurePartitionClientPrepareRequestArg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
  return key_.Mutable(index);
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
  key_.Mutable(index)->assign(value);
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
}
inline ::std::string* PbRpcTccCurePartitionClientPrepareRequestArg::add_key() {
  return key_.Add();
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCurePartitionClientPrepareRequestArg::key() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCurePartitionClientPrepareRequestArg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCurePartitionClientPrepareRequestArg.Key)
  return &key_;
}

// repeated bytes Value = 4;
inline int PbRpcTccCurePartitionClientPrepareRequestArg::value_size() const {
  return value_.size();
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_value() {
  value_.Clear();
}
inline const ::std::string& PbRpcTccCurePartitionClientPrepareRequestArg::value(int index) const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
  return value_.Get(index);
}
inline ::std::string* PbRpcTccCurePartitionClientPrepareRequestArg::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
  return value_.Mutable(index);
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
  value_.Mutable(index)->assign(value);
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
}
inline ::std::string* PbRpcTccCurePartitionClientPrepareRequestArg::add_value() {
  return value_.Add();
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbRpcTccCurePartitionClientPrepareRequestArg::value() const {
  // @@protoc_insertion_point(field_list:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbRpcTccCurePartitionClientPrepareRequestArg::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:PbRpcTccCurePartitionClientPrepareRequestArg.Value)
  return &value_;
}

// required int64 src = 5;
inline bool PbRpcTccCurePartitionClientPrepareRequestArg::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 PbRpcTccCurePartitionClientPrepareRequestArg::src() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCurePartitionClientPrepareRequestArg.src)
  return src_;
}
inline void PbRpcTccCurePartitionClientPrepareRequestArg::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCurePartitionClientPrepareRequestArg.src)
}

// -------------------------------------------------------------------

// PbRpcTccCureKVPublicGetServerConfigResult

// required bool Succeeded = 1;
inline bool PbRpcTccCureKVPublicGetServerConfigResult::has_succeeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_has_succeeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool PbRpcTccCureKVPublicGetServerConfigResult::succeeded() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicGetServerConfigResult.Succeeded)
  return succeeded_;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicGetServerConfigResult.Succeeded)
}

// required int32 NumPartitions = 2;
inline bool PbRpcTccCureKVPublicGetServerConfigResult::has_numpartitions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_has_numpartitions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_has_numpartitions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_numpartitions() {
  numpartitions_ = 0;
  clear_has_numpartitions();
}
inline ::google::protobuf::int32 PbRpcTccCureKVPublicGetServerConfigResult::numpartitions() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicGetServerConfigResult.NumPartitions)
  return numpartitions_;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_numpartitions(::google::protobuf::int32 value) {
  set_has_numpartitions();
  numpartitions_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicGetServerConfigResult.NumPartitions)
}

// required int32 NumReplicasPerPartition = 3;
inline bool PbRpcTccCureKVPublicGetServerConfigResult::has_numreplicasperpartition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_has_numreplicasperpartition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_has_numreplicasperpartition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_numreplicasperpartition() {
  numreplicasperpartition_ = 0;
  clear_has_numreplicasperpartition();
}
inline ::google::protobuf::int32 PbRpcTccCureKVPublicGetServerConfigResult::numreplicasperpartition() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicGetServerConfigResult.NumReplicasPerPartition)
  return numreplicasperpartition_;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_numreplicasperpartition(::google::protobuf::int32 value) {
  set_has_numreplicasperpartition();
  numreplicasperpartition_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicGetServerConfigResult.NumReplicasPerPartition)
}

// required int32 replicaId = 4;
inline bool PbRpcTccCureKVPublicGetServerConfigResult::has_replicaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_has_replicaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_has_replicaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::clear_replicaid() {
  replicaid_ = 0;
  clear_has_replicaid();
}
inline ::google::protobuf::int32 PbRpcTccCureKVPublicGetServerConfigResult::replicaid() const {
  // @@protoc_insertion_point(field_get:PbRpcTccCureKVPublicGetServerConfigResult.replicaId)
  return replicaid_;
}
inline void PbRpcTccCureKVPublicGetServerConfigResult::set_replicaid(::google::protobuf::int32 value) {
  set_has_replicaid();
  replicaid_ = value;
  // @@protoc_insertion_point(field_set:PbRpcTccCureKVPublicGetServerConfigResult.replicaId)
}

// -------------------------------------------------------------------

// PbRpTccCureCommitRequestArg

// required int64 id = 1;
inline bool PbRpTccCureCommitRequestArg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRpTccCureCommitRequestArg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRpTccCureCommitRequestArg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRpTccCureCommitRequestArg::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PbRpTccCureCommitRequestArg::id() const {
  // @@protoc_insertion_point(field_get:PbRpTccCureCommitRequestArg.id)
  return id_;
}
inline void PbRpTccCureCommitRequestArg::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PbRpTccCureCommitRequestArg.id)
}

// repeated .PbPhysicalTimeSpec CT = 2;
inline int PbRpTccCureCommitRequestArg::ct_size() const {
  return ct_.size();
}
inline void PbRpTccCureCommitRequestArg::clear_ct() {
  ct_.Clear();
}
inline const ::PbPhysicalTimeSpec& PbRpTccCureCommitRequestArg::ct(int index) const {
  // @@protoc_insertion_point(field_get:PbRpTccCureCommitRequestArg.CT)
  return ct_.Get(index);
}
inline ::PbPhysicalTimeSpec* PbRpTccCureCommitRequestArg::mutable_ct(int index) {
  // @@protoc_insertion_point(field_mutable:PbRpTccCureCommitRequestArg.CT)
  return ct_.Mutable(index);
}
inline ::PbPhysicalTimeSpec* PbRpTccCureCommitRequestArg::add_ct() {
  // @@protoc_insertion_point(field_add:PbRpTccCureCommitRequestArg.CT)
  return ct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >&
PbRpTccCureCommitRequestArg::ct() const {
  // @@protoc_insertion_point(field_list:PbRpTccCureCommitRequestArg.CT)
  return ct_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbPhysicalTimeSpec >*
PbRpTccCureCommitRequestArg::mutable_ct() {
  // @@protoc_insertion_point(field_mutable_list:PbRpTccCureCommitRequestArg.CT)
  return &ct_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcc_5fcure_5fmessages_2eproto__INCLUDED
