// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcc_cure_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tcc_cure_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbRpcTccCurePublicStartArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCurePublicStartArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCurePublicStartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCurePublicStartResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicReadArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVPublicReadArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVPublicReadResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicCommitArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVPublicCommitArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicCommitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVPublicCommitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceGetArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVInternalTxSliceGetArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceGetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVInternalTxSliceGetResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVInternalTxSliceReadKeysArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVInternalTxSliceReadKeysResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCurePartitionClientPrepareRequestArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicGetServerConfigResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTccCureKVPublicGetServerConfigResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpTccCureCommitRequestArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpTccCureCommitRequestArg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto() {
  protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tcc_cure_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PbRpcTccCurePublicStartArg_descriptor_ = file->message_type(0);
  static const int PbRpcTccCurePublicStartArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartArg, dv_),
  };
  PbRpcTccCurePublicStartArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCurePublicStartArg_descriptor_,
      PbRpcTccCurePublicStartArg::default_instance_,
      PbRpcTccCurePublicStartArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCurePublicStartArg));
  PbRpcTccCurePublicStartResult_descriptor_ = file->message_type(1);
  static const int PbRpcTccCurePublicStartResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartResult, dv_),
  };
  PbRpcTccCurePublicStartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCurePublicStartResult_descriptor_,
      PbRpcTccCurePublicStartResult::default_instance_,
      PbRpcTccCurePublicStartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePublicStartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCurePublicStartResult));
  PbRpcTccCureKVPublicReadArg_descriptor_ = file->message_type(2);
  static const int PbRpcTccCureKVPublicReadArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadArg, key_),
  };
  PbRpcTccCureKVPublicReadArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVPublicReadArg_descriptor_,
      PbRpcTccCureKVPublicReadArg::default_instance_,
      PbRpcTccCureKVPublicReadArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVPublicReadArg));
  PbRpcTccCureKVPublicReadResult_descriptor_ = file->message_type(3);
  static const int PbRpcTccCureKVPublicReadResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadResult, value_),
  };
  PbRpcTccCureKVPublicReadResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVPublicReadResult_descriptor_,
      PbRpcTccCureKVPublicReadResult::default_instance_,
      PbRpcTccCureKVPublicReadResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicReadResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVPublicReadResult));
  PbRpcTccCureKVPublicCommitArg_descriptor_ = file->message_type(4);
  static const int PbRpcTccCureKVPublicCommitArg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitArg, value_),
  };
  PbRpcTccCureKVPublicCommitArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVPublicCommitArg_descriptor_,
      PbRpcTccCureKVPublicCommitArg::default_instance_,
      PbRpcTccCureKVPublicCommitArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVPublicCommitArg));
  PbRpcTccCureKVPublicCommitResult_descriptor_ = file->message_type(5);
  static const int PbRpcTccCureKVPublicCommitResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitResult, ct_),
  };
  PbRpcTccCureKVPublicCommitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVPublicCommitResult_descriptor_,
      PbRpcTccCureKVPublicCommitResult::default_instance_,
      PbRpcTccCureKVPublicCommitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicCommitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVPublicCommitResult));
  PbRpcTccCureKVInternalTxSliceGetArg_descriptor_ = file->message_type(6);
  static const int PbRpcTccCureKVInternalTxSliceGetArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, src_),
  };
  PbRpcTccCureKVInternalTxSliceGetArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVInternalTxSliceGetArg_descriptor_,
      PbRpcTccCureKVInternalTxSliceGetArg::default_instance_,
      PbRpcTccCureKVInternalTxSliceGetArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVInternalTxSliceGetArg));
  PbRpcTccCureKVInternalTxSliceGetResult_descriptor_ = file->message_type(7);
  static const int PbRpcTccCureKVInternalTxSliceGetResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, getvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, srcreplica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, waitedxact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, src_),
  };
  PbRpcTccCureKVInternalTxSliceGetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVInternalTxSliceGetResult_descriptor_,
      PbRpcTccCureKVInternalTxSliceGetResult::default_instance_,
      PbRpcTccCureKVInternalTxSliceGetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceGetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVInternalTxSliceGetResult));
  PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_ = file->message_type(8);
  static const int PbRpcTccCureKVInternalTxSliceReadKeysArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, src_),
  };
  PbRpcTccCureKVInternalTxSliceReadKeysArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_,
      PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance_,
      PbRpcTccCureKVInternalTxSliceReadKeysArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVInternalTxSliceReadKeysArg));
  PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_ = file->message_type(9);
  static const int PbRpcTccCureKVInternalTxSliceReadKeysResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, srcreplica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, waitedxact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, src_),
  };
  PbRpcTccCureKVInternalTxSliceReadKeysResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_,
      PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance_,
      PbRpcTccCureKVInternalTxSliceReadKeysResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVInternalTxSliceReadKeysResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVInternalTxSliceReadKeysResult));
  PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_ = file->message_type(10);
  static const int PbRpcTccCurePartitionClientPrepareRequestArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, src_),
  };
  PbRpcTccCurePartitionClientPrepareRequestArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_,
      PbRpcTccCurePartitionClientPrepareRequestArg::default_instance_,
      PbRpcTccCurePartitionClientPrepareRequestArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCurePartitionClientPrepareRequestArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCurePartitionClientPrepareRequestArg));
  PbRpcTccCureKVPublicGetServerConfigResult_descriptor_ = file->message_type(11);
  static const int PbRpcTccCureKVPublicGetServerConfigResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, numpartitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, numreplicasperpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, replicaid_),
  };
  PbRpcTccCureKVPublicGetServerConfigResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTccCureKVPublicGetServerConfigResult_descriptor_,
      PbRpcTccCureKVPublicGetServerConfigResult::default_instance_,
      PbRpcTccCureKVPublicGetServerConfigResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTccCureKVPublicGetServerConfigResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTccCureKVPublicGetServerConfigResult));
  PbRpTccCureCommitRequestArg_descriptor_ = file->message_type(12);
  static const int PbRpTccCureCommitRequestArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpTccCureCommitRequestArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpTccCureCommitRequestArg, ct_),
  };
  PbRpTccCureCommitRequestArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpTccCureCommitRequestArg_descriptor_,
      PbRpTccCureCommitRequestArg::default_instance_,
      PbRpTccCureCommitRequestArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpTccCureCommitRequestArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpTccCureCommitRequestArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpTccCureCommitRequestArg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tcc_5fcure_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCurePublicStartArg_descriptor_, &PbRpcTccCurePublicStartArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCurePublicStartResult_descriptor_, &PbRpcTccCurePublicStartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVPublicReadArg_descriptor_, &PbRpcTccCureKVPublicReadArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVPublicReadResult_descriptor_, &PbRpcTccCureKVPublicReadResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVPublicCommitArg_descriptor_, &PbRpcTccCureKVPublicCommitArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVPublicCommitResult_descriptor_, &PbRpcTccCureKVPublicCommitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVInternalTxSliceGetArg_descriptor_, &PbRpcTccCureKVInternalTxSliceGetArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVInternalTxSliceGetResult_descriptor_, &PbRpcTccCureKVInternalTxSliceGetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_, &PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_, &PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_, &PbRpcTccCurePartitionClientPrepareRequestArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTccCureKVPublicGetServerConfigResult_descriptor_, &PbRpcTccCureKVPublicGetServerConfigResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpTccCureCommitRequestArg_descriptor_, &PbRpTccCureCommitRequestArg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto() {
  delete PbRpcTccCurePublicStartArg::default_instance_;
  delete PbRpcTccCurePublicStartArg_reflection_;
  delete PbRpcTccCurePublicStartResult::default_instance_;
  delete PbRpcTccCurePublicStartResult_reflection_;
  delete PbRpcTccCureKVPublicReadArg::default_instance_;
  delete PbRpcTccCureKVPublicReadArg_reflection_;
  delete PbRpcTccCureKVPublicReadResult::default_instance_;
  delete PbRpcTccCureKVPublicReadResult_reflection_;
  delete PbRpcTccCureKVPublicCommitArg::default_instance_;
  delete PbRpcTccCureKVPublicCommitArg_reflection_;
  delete PbRpcTccCureKVPublicCommitResult::default_instance_;
  delete PbRpcTccCureKVPublicCommitResult_reflection_;
  delete PbRpcTccCureKVInternalTxSliceGetArg::default_instance_;
  delete PbRpcTccCureKVInternalTxSliceGetArg_reflection_;
  delete PbRpcTccCureKVInternalTxSliceGetResult::default_instance_;
  delete PbRpcTccCureKVInternalTxSliceGetResult_reflection_;
  delete PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance_;
  delete PbRpcTccCureKVInternalTxSliceReadKeysArg_reflection_;
  delete PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance_;
  delete PbRpcTccCureKVInternalTxSliceReadKeysResult_reflection_;
  delete PbRpcTccCurePartitionClientPrepareRequestArg::default_instance_;
  delete PbRpcTccCurePartitionClientPrepareRequestArg_reflection_;
  delete PbRpcTccCureKVPublicGetServerConfigResult::default_instance_;
  delete PbRpcTccCureKVPublicGetServerConfigResult_reflection_;
  delete PbRpTccCureCommitRequestArg::default_instance_;
  delete PbRpTccCureCommitRequestArg_reflection_;
}

void protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_rpc_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027tcc_cure_messages.proto\032\022rpc_messages."
    "proto\"=\n\032PbRpcTccCurePublicStartArg\022\037\n\002D"
    "V\030\001 \003(\0132\023.PbPhysicalTimeSpec\"_\n\035PbRpcTcc"
    "CurePublicStartResult\022\021\n\tSucceeded\030\001 \002(\010"
    "\022\n\n\002ID\030\002 \002(\003\022\037\n\002DV\030\003 \003(\0132\023.PbPhysicalTim"
    "eSpec\"6\n\033PbRpcTccCureKVPublicReadArg\022\n\n\002"
    "ID\030\001 \002(\003\022\013\n\003Key\030\002 \003(\014\"B\n\036PbRpcTccCureKVP"
    "ublicReadResult\022\021\n\tSucceeded\030\001 \002(\010\022\r\n\005Va"
    "lue\030\002 \003(\014\"G\n\035PbRpcTccCureKVPublicCommitA"
    "rg\022\n\n\002ID\030\001 \002(\003\022\013\n\003Key\030\002 \003(\014\022\r\n\005Value\030\003 \003"
    "(\014\"V\n PbRpcTccCureKVPublicCommitResult\022\021"
    "\n\tSucceeded\030\001 \002(\010\022\037\n\002CT\030\002 \003(\0132\023.PbPhysic"
    "alTimeSpec\"l\n#PbRpcTccCureKVInternalTxSl"
    "iceGetArg\022\013\n\003Key\030\001 \002(\014\022\037\n\002DV\030\002 \003(\0132\023.PbP"
    "hysicalTimeSpec\022\n\n\002id\030\003 \001(\003\022\013\n\003src\030\004 \001(\003"
    "\"\216\001\n&PbRpcTccCureKVInternalTxSliceGetRes"
    "ult\022\021\n\tSucceeded\030\001 \002(\010\022\020\n\010GetValue\030\002 \002(\014"
    "\022\022\n\nSrcReplica\030\003 \001(\005\022\022\n\nwaitedXact\030\004 \001(\001"
    "\022\n\n\002id\030\005 \001(\003\022\013\n\003src\030\006 \001(\003\"q\n(PbRpcTccCur"
    "eKVInternalTxSliceReadKeysArg\022\013\n\003Key\030\001 \003"
    "(\014\022\037\n\002DV\030\002 \003(\0132\023.PbPhysicalTimeSpec\022\n\n\002i"
    "d\030\003 \001(\003\022\013\n\003src\030\004 \001(\003\"\220\001\n+PbRpcTccCureKVI"
    "nternalTxSliceReadKeysResult\022\021\n\tSucceede"
    "d\030\001 \002(\010\022\r\n\005Value\030\002 \003(\014\022\022\n\nSrcReplica\030\003 \001"
    "(\005\022\022\n\nwaitedXact\030\004 \001(\001\022\n\n\002id\030\005 \001(\003\022\013\n\003sr"
    "c\030\006 \001(\003\"\204\001\n,PbRpcTccCurePartitionClientP"
    "repareRequestArg\022\n\n\002id\030\001 \002(\003\022\037\n\002DV\030\002 \003(\013"
    "2\023.PbPhysicalTimeSpec\022\013\n\003Key\030\003 \003(\014\022\r\n\005Va"
    "lue\030\004 \003(\014\022\013\n\003src\030\005 \002(\003\"\211\001\n)PbRpcTccCureK"
    "VPublicGetServerConfigResult\022\021\n\tSucceede"
    "d\030\001 \002(\010\022\025\n\rNumPartitions\030\002 \002(\005\022\037\n\027NumRep"
    "licasPerPartition\030\003 \002(\005\022\021\n\treplicaId\030\004 \002"
    "(\005\"J\n\033PbRpTccCureCommitRequestArg\022\n\n\002id\030"
    "\001 \002(\003\022\037\n\002CT\030\002 \003(\0132\023.PbPhysicalTimeSpec", 1358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcc_cure_messages.proto", &protobuf_RegisterTypes);
  PbRpcTccCurePublicStartArg::default_instance_ = new PbRpcTccCurePublicStartArg();
  PbRpcTccCurePublicStartResult::default_instance_ = new PbRpcTccCurePublicStartResult();
  PbRpcTccCureKVPublicReadArg::default_instance_ = new PbRpcTccCureKVPublicReadArg();
  PbRpcTccCureKVPublicReadResult::default_instance_ = new PbRpcTccCureKVPublicReadResult();
  PbRpcTccCureKVPublicCommitArg::default_instance_ = new PbRpcTccCureKVPublicCommitArg();
  PbRpcTccCureKVPublicCommitResult::default_instance_ = new PbRpcTccCureKVPublicCommitResult();
  PbRpcTccCureKVInternalTxSliceGetArg::default_instance_ = new PbRpcTccCureKVInternalTxSliceGetArg();
  PbRpcTccCureKVInternalTxSliceGetResult::default_instance_ = new PbRpcTccCureKVInternalTxSliceGetResult();
  PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance_ = new PbRpcTccCureKVInternalTxSliceReadKeysArg();
  PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance_ = new PbRpcTccCureKVInternalTxSliceReadKeysResult();
  PbRpcTccCurePartitionClientPrepareRequestArg::default_instance_ = new PbRpcTccCurePartitionClientPrepareRequestArg();
  PbRpcTccCureKVPublicGetServerConfigResult::default_instance_ = new PbRpcTccCureKVPublicGetServerConfigResult();
  PbRpTccCureCommitRequestArg::default_instance_ = new PbRpTccCureCommitRequestArg();
  PbRpcTccCurePublicStartArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCurePublicStartResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVPublicReadArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVPublicReadResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVPublicCommitArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVPublicCommitResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVInternalTxSliceGetArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVInternalTxSliceGetResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance_->InitAsDefaultInstance();
  PbRpcTccCurePartitionClientPrepareRequestArg::default_instance_->InitAsDefaultInstance();
  PbRpcTccCureKVPublicGetServerConfigResult::default_instance_->InitAsDefaultInstance();
  PbRpTccCureCommitRequestArg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tcc_5fcure_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tcc_5fcure_5fmessages_2eproto {
  StaticDescriptorInitializer_tcc_5fcure_5fmessages_2eproto() {
    protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  }
} static_descriptor_initializer_tcc_5fcure_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCurePublicStartArg::kDVFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCurePublicStartArg::PbRpcTccCurePublicStartArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCurePublicStartArg)
}

void PbRpcTccCurePublicStartArg::InitAsDefaultInstance() {
}

PbRpcTccCurePublicStartArg::PbRpcTccCurePublicStartArg(const PbRpcTccCurePublicStartArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCurePublicStartArg)
}

void PbRpcTccCurePublicStartArg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCurePublicStartArg::~PbRpcTccCurePublicStartArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCurePublicStartArg)
  SharedDtor();
}

void PbRpcTccCurePublicStartArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCurePublicStartArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCurePublicStartArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCurePublicStartArg_descriptor_;
}

const PbRpcTccCurePublicStartArg& PbRpcTccCurePublicStartArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCurePublicStartArg* PbRpcTccCurePublicStartArg::default_instance_ = NULL;

PbRpcTccCurePublicStartArg* PbRpcTccCurePublicStartArg::New() const {
  return new PbRpcTccCurePublicStartArg;
}

void PbRpcTccCurePublicStartArg::Clear() {
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCurePublicStartArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCurePublicStartArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbPhysicalTimeSpec DV = 1;
      case 1: {
        if (tag == 10) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCurePublicStartArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCurePublicStartArg)
  return false;
#undef DO_
}

void PbRpcTccCurePublicStartArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCurePublicStartArg)
  // repeated .PbPhysicalTimeSpec DV = 1;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCurePublicStartArg)
}

::google::protobuf::uint8* PbRpcTccCurePublicStartArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCurePublicStartArg)
  // repeated .PbPhysicalTimeSpec DV = 1;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCurePublicStartArg)
  return target;
}

int PbRpcTccCurePublicStartArg::ByteSize() const {
  int total_size = 0;

  // repeated .PbPhysicalTimeSpec DV = 1;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCurePublicStartArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCurePublicStartArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCurePublicStartArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCurePublicStartArg::MergeFrom(const PbRpcTccCurePublicStartArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCurePublicStartArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCurePublicStartArg::CopyFrom(const PbRpcTccCurePublicStartArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCurePublicStartArg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcTccCurePublicStartArg::Swap(PbRpcTccCurePublicStartArg* other) {
  if (other != this) {
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCurePublicStartArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCurePublicStartArg_descriptor_;
  metadata.reflection = PbRpcTccCurePublicStartArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCurePublicStartResult::kSucceededFieldNumber;
const int PbRpcTccCurePublicStartResult::kIDFieldNumber;
const int PbRpcTccCurePublicStartResult::kDVFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCurePublicStartResult::PbRpcTccCurePublicStartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCurePublicStartResult)
}

void PbRpcTccCurePublicStartResult::InitAsDefaultInstance() {
}

PbRpcTccCurePublicStartResult::PbRpcTccCurePublicStartResult(const PbRpcTccCurePublicStartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCurePublicStartResult)
}

void PbRpcTccCurePublicStartResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCurePublicStartResult::~PbRpcTccCurePublicStartResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCurePublicStartResult)
  SharedDtor();
}

void PbRpcTccCurePublicStartResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCurePublicStartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCurePublicStartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCurePublicStartResult_descriptor_;
}

const PbRpcTccCurePublicStartResult& PbRpcTccCurePublicStartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCurePublicStartResult* PbRpcTccCurePublicStartResult::default_instance_ = NULL;

PbRpcTccCurePublicStartResult* PbRpcTccCurePublicStartResult::New() const {
  return new PbRpcTccCurePublicStartResult;
}

void PbRpcTccCurePublicStartResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    id_ = GOOGLE_LONGLONG(0);
  }
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCurePublicStartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCurePublicStartResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 3;
      case 3: {
        if (tag == 26) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCurePublicStartResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCurePublicStartResult)
  return false;
#undef DO_
}

void PbRpcTccCurePublicStartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCurePublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 3;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCurePublicStartResult)
}

::google::protobuf::uint8* PbRpcTccCurePublicStartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCurePublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 3;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCurePublicStartResult)
  return target;
}

int PbRpcTccCurePublicStartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 3;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCurePublicStartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCurePublicStartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCurePublicStartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCurePublicStartResult::MergeFrom(const PbRpcTccCurePublicStartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCurePublicStartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCurePublicStartResult::CopyFrom(const PbRpcTccCurePublicStartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCurePublicStartResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcTccCurePublicStartResult::Swap(PbRpcTccCurePublicStartResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(id_, other->id_);
    dv_.Swap(&other->dv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCurePublicStartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCurePublicStartResult_descriptor_;
  metadata.reflection = PbRpcTccCurePublicStartResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVPublicReadArg::kIDFieldNumber;
const int PbRpcTccCureKVPublicReadArg::kKeyFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVPublicReadArg::PbRpcTccCureKVPublicReadArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVPublicReadArg)
}

void PbRpcTccCureKVPublicReadArg::InitAsDefaultInstance() {
}

PbRpcTccCureKVPublicReadArg::PbRpcTccCureKVPublicReadArg(const PbRpcTccCureKVPublicReadArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVPublicReadArg)
}

void PbRpcTccCureKVPublicReadArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVPublicReadArg::~PbRpcTccCureKVPublicReadArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVPublicReadArg)
  SharedDtor();
}

void PbRpcTccCureKVPublicReadArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVPublicReadArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicReadArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVPublicReadArg_descriptor_;
}

const PbRpcTccCureKVPublicReadArg& PbRpcTccCureKVPublicReadArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVPublicReadArg* PbRpcTccCureKVPublicReadArg::default_instance_ = NULL;

PbRpcTccCureKVPublicReadArg* PbRpcTccCureKVPublicReadArg::New() const {
  return new PbRpcTccCureKVPublicReadArg;
}

void PbRpcTccCureKVPublicReadArg::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVPublicReadArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVPublicReadArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVPublicReadArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVPublicReadArg)
  return false;
#undef DO_
}

void PbRpcTccCureKVPublicReadArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVPublicReadArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVPublicReadArg)
}

::google::protobuf::uint8* PbRpcTccCureKVPublicReadArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVPublicReadArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVPublicReadArg)
  return target;
}

int PbRpcTccCureKVPublicReadArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVPublicReadArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVPublicReadArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVPublicReadArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVPublicReadArg::MergeFrom(const PbRpcTccCureKVPublicReadArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVPublicReadArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVPublicReadArg::CopyFrom(const PbRpcTccCureKVPublicReadArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVPublicReadArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccCureKVPublicReadArg::Swap(PbRpcTccCureKVPublicReadArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVPublicReadArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVPublicReadArg_descriptor_;
  metadata.reflection = PbRpcTccCureKVPublicReadArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVPublicReadResult::kSucceededFieldNumber;
const int PbRpcTccCureKVPublicReadResult::kValueFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVPublicReadResult::PbRpcTccCureKVPublicReadResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVPublicReadResult)
}

void PbRpcTccCureKVPublicReadResult::InitAsDefaultInstance() {
}

PbRpcTccCureKVPublicReadResult::PbRpcTccCureKVPublicReadResult(const PbRpcTccCureKVPublicReadResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVPublicReadResult)
}

void PbRpcTccCureKVPublicReadResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVPublicReadResult::~PbRpcTccCureKVPublicReadResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVPublicReadResult)
  SharedDtor();
}

void PbRpcTccCureKVPublicReadResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVPublicReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVPublicReadResult_descriptor_;
}

const PbRpcTccCureKVPublicReadResult& PbRpcTccCureKVPublicReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVPublicReadResult* PbRpcTccCureKVPublicReadResult::default_instance_ = NULL;

PbRpcTccCureKVPublicReadResult* PbRpcTccCureKVPublicReadResult::New() const {
  return new PbRpcTccCureKVPublicReadResult;
}

void PbRpcTccCureKVPublicReadResult::Clear() {
  succeeded_ = false;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVPublicReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVPublicReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVPublicReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVPublicReadResult)
  return false;
#undef DO_
}

void PbRpcTccCureKVPublicReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVPublicReadResult)
}

::google::protobuf::uint8* PbRpcTccCureKVPublicReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVPublicReadResult)
  return target;
}

int PbRpcTccCureKVPublicReadResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVPublicReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVPublicReadResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVPublicReadResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVPublicReadResult::MergeFrom(const PbRpcTccCureKVPublicReadResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVPublicReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVPublicReadResult::CopyFrom(const PbRpcTccCureKVPublicReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVPublicReadResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccCureKVPublicReadResult::Swap(PbRpcTccCureKVPublicReadResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVPublicReadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVPublicReadResult_descriptor_;
  metadata.reflection = PbRpcTccCureKVPublicReadResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVPublicCommitArg::kIDFieldNumber;
const int PbRpcTccCureKVPublicCommitArg::kKeyFieldNumber;
const int PbRpcTccCureKVPublicCommitArg::kValueFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVPublicCommitArg::PbRpcTccCureKVPublicCommitArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVPublicCommitArg)
}

void PbRpcTccCureKVPublicCommitArg::InitAsDefaultInstance() {
}

PbRpcTccCureKVPublicCommitArg::PbRpcTccCureKVPublicCommitArg(const PbRpcTccCureKVPublicCommitArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVPublicCommitArg)
}

void PbRpcTccCureKVPublicCommitArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVPublicCommitArg::~PbRpcTccCureKVPublicCommitArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVPublicCommitArg)
  SharedDtor();
}

void PbRpcTccCureKVPublicCommitArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVPublicCommitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicCommitArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVPublicCommitArg_descriptor_;
}

const PbRpcTccCureKVPublicCommitArg& PbRpcTccCureKVPublicCommitArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVPublicCommitArg* PbRpcTccCureKVPublicCommitArg::default_instance_ = NULL;

PbRpcTccCureKVPublicCommitArg* PbRpcTccCureKVPublicCommitArg::New() const {
  return new PbRpcTccCureKVPublicCommitArg;
}

void PbRpcTccCureKVPublicCommitArg::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVPublicCommitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVPublicCommitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 3;
      case 3: {
        if (tag == 26) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVPublicCommitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVPublicCommitArg)
  return false;
#undef DO_
}

void PbRpcTccCureKVPublicCommitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVPublicCommitArg)
}

::google::protobuf::uint8* PbRpcTccCureKVPublicCommitArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVPublicCommitArg)
  return target;
}

int PbRpcTccCureKVPublicCommitArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVPublicCommitArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVPublicCommitArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVPublicCommitArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVPublicCommitArg::MergeFrom(const PbRpcTccCureKVPublicCommitArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVPublicCommitArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVPublicCommitArg::CopyFrom(const PbRpcTccCureKVPublicCommitArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVPublicCommitArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccCureKVPublicCommitArg::Swap(PbRpcTccCureKVPublicCommitArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVPublicCommitArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVPublicCommitArg_descriptor_;
  metadata.reflection = PbRpcTccCureKVPublicCommitArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVPublicCommitResult::kSucceededFieldNumber;
const int PbRpcTccCureKVPublicCommitResult::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVPublicCommitResult::PbRpcTccCureKVPublicCommitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVPublicCommitResult)
}

void PbRpcTccCureKVPublicCommitResult::InitAsDefaultInstance() {
}

PbRpcTccCureKVPublicCommitResult::PbRpcTccCureKVPublicCommitResult(const PbRpcTccCureKVPublicCommitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVPublicCommitResult)
}

void PbRpcTccCureKVPublicCommitResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVPublicCommitResult::~PbRpcTccCureKVPublicCommitResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVPublicCommitResult)
  SharedDtor();
}

void PbRpcTccCureKVPublicCommitResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVPublicCommitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicCommitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVPublicCommitResult_descriptor_;
}

const PbRpcTccCureKVPublicCommitResult& PbRpcTccCureKVPublicCommitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVPublicCommitResult* PbRpcTccCureKVPublicCommitResult::default_instance_ = NULL;

PbRpcTccCureKVPublicCommitResult* PbRpcTccCureKVPublicCommitResult::New() const {
  return new PbRpcTccCureKVPublicCommitResult;
}

void PbRpcTccCureKVPublicCommitResult::Clear() {
  succeeded_ = false;
  ct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVPublicCommitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVPublicCommitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // repeated .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVPublicCommitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVPublicCommitResult)
  return false;
#undef DO_
}

void PbRpcTccCureKVPublicCommitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated .PbPhysicalTimeSpec CT = 2;
  for (int i = 0; i < this->ct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVPublicCommitResult)
}

::google::protobuf::uint8* PbRpcTccCureKVPublicCommitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated .PbPhysicalTimeSpec CT = 2;
  for (int i = 0; i < this->ct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVPublicCommitResult)
  return target;
}

int PbRpcTccCureKVPublicCommitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PbPhysicalTimeSpec CT = 2;
  total_size += 1 * this->ct_size();
  for (int i = 0; i < this->ct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVPublicCommitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVPublicCommitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVPublicCommitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVPublicCommitResult::MergeFrom(const PbRpcTccCureKVPublicCommitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ct_.MergeFrom(from.ct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVPublicCommitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVPublicCommitResult::CopyFrom(const PbRpcTccCureKVPublicCommitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVPublicCommitResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ct())) return false;
  return true;
}

void PbRpcTccCureKVPublicCommitResult::Swap(PbRpcTccCureKVPublicCommitResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    ct_.Swap(&other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVPublicCommitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVPublicCommitResult_descriptor_;
  metadata.reflection = PbRpcTccCureKVPublicCommitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVInternalTxSliceGetArg::kKeyFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetArg::kDVFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetArg::kIdFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVInternalTxSliceGetArg::PbRpcTccCureKVInternalTxSliceGetArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVInternalTxSliceGetArg)
}

void PbRpcTccCureKVInternalTxSliceGetArg::InitAsDefaultInstance() {
}

PbRpcTccCureKVInternalTxSliceGetArg::PbRpcTccCureKVInternalTxSliceGetArg(const PbRpcTccCureKVInternalTxSliceGetArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVInternalTxSliceGetArg)
}

void PbRpcTccCureKVInternalTxSliceGetArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVInternalTxSliceGetArg::~PbRpcTccCureKVInternalTxSliceGetArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVInternalTxSliceGetArg)
  SharedDtor();
}

void PbRpcTccCureKVInternalTxSliceGetArg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVInternalTxSliceGetArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceGetArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVInternalTxSliceGetArg_descriptor_;
}

const PbRpcTccCureKVInternalTxSliceGetArg& PbRpcTccCureKVInternalTxSliceGetArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVInternalTxSliceGetArg* PbRpcTccCureKVInternalTxSliceGetArg::default_instance_ = NULL;

PbRpcTccCureKVInternalTxSliceGetArg* PbRpcTccCureKVInternalTxSliceGetArg::New() const {
  return new PbRpcTccCureKVInternalTxSliceGetArg;
}

void PbRpcTccCureKVInternalTxSliceGetArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccCureKVInternalTxSliceGetArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(id_, src_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVInternalTxSliceGetArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVInternalTxSliceGetArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 2;
      case 2: {
        if (tag == 18) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DV;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_src;
        break;
      }

      // optional int64 src = 4;
      case 4: {
        if (tag == 32) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVInternalTxSliceGetArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVInternalTxSliceGetArg)
  return false;
#undef DO_
}

void PbRpcTccCureKVInternalTxSliceGetArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVInternalTxSliceGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dv(i), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional int64 src = 4;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVInternalTxSliceGetArg)
}

::google::protobuf::uint8* PbRpcTccCureKVInternalTxSliceGetArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVInternalTxSliceGetArg)
  // required bytes Key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dv(i), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional int64 src = 4;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVInternalTxSliceGetArg)
  return target;
}

int PbRpcTccCureKVInternalTxSliceGetArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 4;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 2;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVInternalTxSliceGetArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVInternalTxSliceGetArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVInternalTxSliceGetArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVInternalTxSliceGetArg::MergeFrom(const PbRpcTccCureKVInternalTxSliceGetArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVInternalTxSliceGetArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVInternalTxSliceGetArg::CopyFrom(const PbRpcTccCureKVInternalTxSliceGetArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVInternalTxSliceGetArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcTccCureKVInternalTxSliceGetArg::Swap(PbRpcTccCureKVInternalTxSliceGetArg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    dv_.Swap(&other->dv_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVInternalTxSliceGetArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVInternalTxSliceGetArg_descriptor_;
  metadata.reflection = PbRpcTccCureKVInternalTxSliceGetArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVInternalTxSliceGetResult::kSucceededFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetResult::kGetValueFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetResult::kSrcReplicaFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetResult::kWaitedXactFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetResult::kIdFieldNumber;
const int PbRpcTccCureKVInternalTxSliceGetResult::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVInternalTxSliceGetResult::PbRpcTccCureKVInternalTxSliceGetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVInternalTxSliceGetResult)
}

void PbRpcTccCureKVInternalTxSliceGetResult::InitAsDefaultInstance() {
}

PbRpcTccCureKVInternalTxSliceGetResult::PbRpcTccCureKVInternalTxSliceGetResult(const PbRpcTccCureKVInternalTxSliceGetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVInternalTxSliceGetResult)
}

void PbRpcTccCureKVInternalTxSliceGetResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  getvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcreplica_ = 0;
  waitedxact_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVInternalTxSliceGetResult::~PbRpcTccCureKVInternalTxSliceGetResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVInternalTxSliceGetResult)
  SharedDtor();
}

void PbRpcTccCureKVInternalTxSliceGetResult::SharedDtor() {
  if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getvalue_;
  }
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVInternalTxSliceGetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceGetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVInternalTxSliceGetResult_descriptor_;
}

const PbRpcTccCureKVInternalTxSliceGetResult& PbRpcTccCureKVInternalTxSliceGetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVInternalTxSliceGetResult* PbRpcTccCureKVInternalTxSliceGetResult::default_instance_ = NULL;

PbRpcTccCureKVInternalTxSliceGetResult* PbRpcTccCureKVInternalTxSliceGetResult::New() const {
  return new PbRpcTccCureKVInternalTxSliceGetResult;
}

void PbRpcTccCureKVInternalTxSliceGetResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccCureKVInternalTxSliceGetResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(succeeded_, src_);
    if (has_getvalue()) {
      if (getvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        getvalue_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVInternalTxSliceGetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVInternalTxSliceGetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetValue;
        break;
      }

      // required bytes GetValue = 2;
      case 2: {
        if (tag == 18) {
         parse_GetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_getvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 3;
      case 3: {
        if (tag == 24) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_waitedXact;
        break;
      }

      // optional double waitedXact = 4;
      case 4: {
        if (tag == 33) {
         parse_waitedXact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitedxact_)));
          set_has_waitedxact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_src;
        break;
      }

      // optional int64 src = 6;
      case 6: {
        if (tag == 48) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVInternalTxSliceGetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVInternalTxSliceGetResult)
  return false;
#undef DO_
}

void PbRpcTccCureKVInternalTxSliceGetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVInternalTxSliceGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->getvalue(), output);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcreplica(), output);
  }

  // optional double waitedXact = 4;
  if (has_waitedxact()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->waitedxact(), output);
  }

  // optional int64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  // optional int64 src = 6;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVInternalTxSliceGetResult)
}

::google::protobuf::uint8* PbRpcTccCureKVInternalTxSliceGetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVInternalTxSliceGetResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required bytes GetValue = 2;
  if (has_getvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->getvalue(), target);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcreplica(), target);
  }

  // optional double waitedXact = 4;
  if (has_waitedxact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->waitedxact(), target);
  }

  // optional int64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  // optional int64 src = 6;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVInternalTxSliceGetResult)
  return target;
}

int PbRpcTccCureKVInternalTxSliceGetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required bytes GetValue = 2;
    if (has_getvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->getvalue());
    }

    // optional int32 SrcReplica = 3;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

    // optional double waitedXact = 4;
    if (has_waitedxact()) {
      total_size += 1 + 8;
    }

    // optional int64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 6;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVInternalTxSliceGetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVInternalTxSliceGetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVInternalTxSliceGetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVInternalTxSliceGetResult::MergeFrom(const PbRpcTccCureKVInternalTxSliceGetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_getvalue()) {
      set_getvalue(from.getvalue());
    }
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
    if (from.has_waitedxact()) {
      set_waitedxact(from.waitedxact());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVInternalTxSliceGetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVInternalTxSliceGetResult::CopyFrom(const PbRpcTccCureKVInternalTxSliceGetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVInternalTxSliceGetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbRpcTccCureKVInternalTxSliceGetResult::Swap(PbRpcTccCureKVInternalTxSliceGetResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(getvalue_, other->getvalue_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(waitedxact_, other->waitedxact_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVInternalTxSliceGetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVInternalTxSliceGetResult_descriptor_;
  metadata.reflection = PbRpcTccCureKVInternalTxSliceGetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVInternalTxSliceReadKeysArg::kKeyFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysArg::kDVFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysArg::kIdFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVInternalTxSliceReadKeysArg::PbRpcTccCureKVInternalTxSliceReadKeysArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVInternalTxSliceReadKeysArg)
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::InitAsDefaultInstance() {
}

PbRpcTccCureKVInternalTxSliceReadKeysArg::PbRpcTccCureKVInternalTxSliceReadKeysArg(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVInternalTxSliceReadKeysArg)
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVInternalTxSliceReadKeysArg::~PbRpcTccCureKVInternalTxSliceReadKeysArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  SharedDtor();
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceReadKeysArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_;
}

const PbRpcTccCureKVInternalTxSliceReadKeysArg& PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVInternalTxSliceReadKeysArg* PbRpcTccCureKVInternalTxSliceReadKeysArg::default_instance_ = NULL;

PbRpcTccCureKVInternalTxSliceReadKeysArg* PbRpcTccCureKVInternalTxSliceReadKeysArg::New() const {
  return new PbRpcTccCureKVInternalTxSliceReadKeysArg;
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccCureKVInternalTxSliceReadKeysArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, src_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  dv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVInternalTxSliceReadKeysArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Key = 1;
      case 1: {
        if (tag == 10) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Key;
        if (input->ExpectTag(18)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 2;
      case 2: {
        if (tag == 18) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DV;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_src;
        break;
      }

      // optional int64 src = 4;
      case 4: {
        if (tag == 32) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  return false;
#undef DO_
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(i), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dv(i), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional int64 src = 4;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVInternalTxSliceReadKeysArg)
}

::google::protobuf::uint8* PbRpcTccCureKVInternalTxSliceReadKeysArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->key(i), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dv(i), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional int64 src = 4;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVInternalTxSliceReadKeysArg)
  return target;
}

int PbRpcTccCureKVInternalTxSliceReadKeysArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 4;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated bytes Key = 1;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVInternalTxSliceReadKeysArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVInternalTxSliceReadKeysArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::MergeFrom(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  dv_.MergeFrom(from.dv_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::CopyFrom(const PbRpcTccCureKVInternalTxSliceReadKeysArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVInternalTxSliceReadKeysArg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcTccCureKVInternalTxSliceReadKeysArg::Swap(PbRpcTccCureKVInternalTxSliceReadKeysArg* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    dv_.Swap(&other->dv_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVInternalTxSliceReadKeysArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVInternalTxSliceReadKeysArg_descriptor_;
  metadata.reflection = PbRpcTccCureKVInternalTxSliceReadKeysArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kSucceededFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kValueFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kSrcReplicaFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kWaitedXactFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kIdFieldNumber;
const int PbRpcTccCureKVInternalTxSliceReadKeysResult::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVInternalTxSliceReadKeysResult::PbRpcTccCureKVInternalTxSliceReadKeysResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVInternalTxSliceReadKeysResult)
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::InitAsDefaultInstance() {
}

PbRpcTccCureKVInternalTxSliceReadKeysResult::PbRpcTccCureKVInternalTxSliceReadKeysResult(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVInternalTxSliceReadKeysResult)
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  srcreplica_ = 0;
  waitedxact_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVInternalTxSliceReadKeysResult::~PbRpcTccCureKVInternalTxSliceReadKeysResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  SharedDtor();
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVInternalTxSliceReadKeysResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_;
}

const PbRpcTccCureKVInternalTxSliceReadKeysResult& PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVInternalTxSliceReadKeysResult* PbRpcTccCureKVInternalTxSliceReadKeysResult::default_instance_ = NULL;

PbRpcTccCureKVInternalTxSliceReadKeysResult* PbRpcTccCureKVInternalTxSliceReadKeysResult::New() const {
  return new PbRpcTccCureKVInternalTxSliceReadKeysResult;
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccCureKVInternalTxSliceReadKeysResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(succeeded_, src_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVInternalTxSliceReadKeysResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectTag(24)) goto parse_SrcReplica;
        break;
      }

      // optional int32 SrcReplica = 3;
      case 3: {
        if (tag == 24) {
         parse_SrcReplica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcreplica_)));
          set_has_srcreplica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_waitedXact;
        break;
      }

      // optional double waitedXact = 4;
      case 4: {
        if (tag == 33) {
         parse_waitedXact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitedxact_)));
          set_has_waitedxact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_src;
        break;
      }

      // optional int64 src = 6;
      case 6: {
        if (tag == 48) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  return false;
#undef DO_
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcreplica(), output);
  }

  // optional double waitedXact = 4;
  if (has_waitedxact()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->waitedxact(), output);
  }

  // optional int64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  // optional int64 src = 6;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVInternalTxSliceReadKeysResult)
}

::google::protobuf::uint8* PbRpcTccCureKVInternalTxSliceReadKeysResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  // optional int32 SrcReplica = 3;
  if (has_srcreplica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcreplica(), target);
  }

  // optional double waitedXact = 4;
  if (has_waitedxact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->waitedxact(), target);
  }

  // optional int64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  // optional int64 src = 6;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVInternalTxSliceReadKeysResult)
  return target;
}

int PbRpcTccCureKVInternalTxSliceReadKeysResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional int32 SrcReplica = 3;
    if (has_srcreplica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcreplica());
    }

    // optional double waitedXact = 4;
    if (has_waitedxact()) {
      total_size += 1 + 8;
    }

    // optional int64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 src = 6;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVInternalTxSliceReadKeysResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVInternalTxSliceReadKeysResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::MergeFrom(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_srcreplica()) {
      set_srcreplica(from.srcreplica());
    }
    if (from.has_waitedxact()) {
      set_waitedxact(from.waitedxact());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::CopyFrom(const PbRpcTccCureKVInternalTxSliceReadKeysResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVInternalTxSliceReadKeysResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcTccCureKVInternalTxSliceReadKeysResult::Swap(PbRpcTccCureKVInternalTxSliceReadKeysResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(srcreplica_, other->srcreplica_);
    std::swap(waitedxact_, other->waitedxact_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVInternalTxSliceReadKeysResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVInternalTxSliceReadKeysResult_descriptor_;
  metadata.reflection = PbRpcTccCureKVInternalTxSliceReadKeysResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCurePartitionClientPrepareRequestArg::kIdFieldNumber;
const int PbRpcTccCurePartitionClientPrepareRequestArg::kDVFieldNumber;
const int PbRpcTccCurePartitionClientPrepareRequestArg::kKeyFieldNumber;
const int PbRpcTccCurePartitionClientPrepareRequestArg::kValueFieldNumber;
const int PbRpcTccCurePartitionClientPrepareRequestArg::kSrcFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCurePartitionClientPrepareRequestArg::PbRpcTccCurePartitionClientPrepareRequestArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCurePartitionClientPrepareRequestArg)
}

void PbRpcTccCurePartitionClientPrepareRequestArg::InitAsDefaultInstance() {
}

PbRpcTccCurePartitionClientPrepareRequestArg::PbRpcTccCurePartitionClientPrepareRequestArg(const PbRpcTccCurePartitionClientPrepareRequestArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCurePartitionClientPrepareRequestArg)
}

void PbRpcTccCurePartitionClientPrepareRequestArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCurePartitionClientPrepareRequestArg::~PbRpcTccCurePartitionClientPrepareRequestArg() {
  // @@protoc_insertion_point(destructor:PbRpcTccCurePartitionClientPrepareRequestArg)
  SharedDtor();
}

void PbRpcTccCurePartitionClientPrepareRequestArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCurePartitionClientPrepareRequestArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCurePartitionClientPrepareRequestArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_;
}

const PbRpcTccCurePartitionClientPrepareRequestArg& PbRpcTccCurePartitionClientPrepareRequestArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCurePartitionClientPrepareRequestArg* PbRpcTccCurePartitionClientPrepareRequestArg::default_instance_ = NULL;

PbRpcTccCurePartitionClientPrepareRequestArg* PbRpcTccCurePartitionClientPrepareRequestArg::New() const {
  return new PbRpcTccCurePartitionClientPrepareRequestArg;
}

void PbRpcTccCurePartitionClientPrepareRequestArg::Clear() {
  if (_has_bits_[0 / 32] & 17) {
    id_ = GOOGLE_LONGLONG(0);
    src_ = GOOGLE_LONGLONG(0);
  }
  dv_.Clear();
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCurePartitionClientPrepareRequestArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCurePartitionClientPrepareRequestArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DV;
        break;
      }

      // repeated .PbPhysicalTimeSpec DV = 2;
      case 2: {
        if (tag == 18) {
         parse_DV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DV;
        if (input->ExpectTag(26)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 3;
      case 3: {
        if (tag == 26) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Key;
        if (input->ExpectTag(34)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 4;
      case 4: {
        if (tag == 34) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Value;
        if (input->ExpectTag(40)) goto parse_src;
        break;
      }

      // required int64 src = 5;
      case 5: {
        if (tag == 40) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCurePartitionClientPrepareRequestArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCurePartitionClientPrepareRequestArg)
  return false;
#undef DO_
}

void PbRpcTccCurePartitionClientPrepareRequestArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCurePartitionClientPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dv(i), output);
  }

  // repeated bytes Key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(i), output);
  }

  // repeated bytes Value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(i), output);
  }

  // required int64 src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCurePartitionClientPrepareRequestArg)
}

::google::protobuf::uint8* PbRpcTccCurePartitionClientPrepareRequestArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCurePartitionClientPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .PbPhysicalTimeSpec DV = 2;
  for (int i = 0; i < this->dv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dv(i), target);
  }

  // repeated bytes Key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->key(i), target);
  }

  // repeated bytes Value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->value(i), target);
  }

  // required int64 src = 5;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCurePartitionClientPrepareRequestArg)
  return target;
}

int PbRpcTccCurePartitionClientPrepareRequestArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int64 src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated .PbPhysicalTimeSpec DV = 2;
  total_size += 1 * this->dv_size();
  for (int i = 0; i < this->dv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dv(i));
  }

  // repeated bytes Key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 4;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCurePartitionClientPrepareRequestArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCurePartitionClientPrepareRequestArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCurePartitionClientPrepareRequestArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCurePartitionClientPrepareRequestArg::MergeFrom(const PbRpcTccCurePartitionClientPrepareRequestArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dv_.MergeFrom(from.dv_);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCurePartitionClientPrepareRequestArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCurePartitionClientPrepareRequestArg::CopyFrom(const PbRpcTccCurePartitionClientPrepareRequestArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCurePartitionClientPrepareRequestArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dv())) return false;
  return true;
}

void PbRpcTccCurePartitionClientPrepareRequestArg::Swap(PbRpcTccCurePartitionClientPrepareRequestArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    dv_.Swap(&other->dv_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCurePartitionClientPrepareRequestArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCurePartitionClientPrepareRequestArg_descriptor_;
  metadata.reflection = PbRpcTccCurePartitionClientPrepareRequestArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcTccCureKVPublicGetServerConfigResult::kSucceededFieldNumber;
const int PbRpcTccCureKVPublicGetServerConfigResult::kNumPartitionsFieldNumber;
const int PbRpcTccCureKVPublicGetServerConfigResult::kNumReplicasPerPartitionFieldNumber;
const int PbRpcTccCureKVPublicGetServerConfigResult::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

PbRpcTccCureKVPublicGetServerConfigResult::PbRpcTccCureKVPublicGetServerConfigResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTccCureKVPublicGetServerConfigResult)
}

void PbRpcTccCureKVPublicGetServerConfigResult::InitAsDefaultInstance() {
}

PbRpcTccCureKVPublicGetServerConfigResult::PbRpcTccCureKVPublicGetServerConfigResult(const PbRpcTccCureKVPublicGetServerConfigResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTccCureKVPublicGetServerConfigResult)
}

void PbRpcTccCureKVPublicGetServerConfigResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  numpartitions_ = 0;
  numreplicasperpartition_ = 0;
  replicaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTccCureKVPublicGetServerConfigResult::~PbRpcTccCureKVPublicGetServerConfigResult() {
  // @@protoc_insertion_point(destructor:PbRpcTccCureKVPublicGetServerConfigResult)
  SharedDtor();
}

void PbRpcTccCureKVPublicGetServerConfigResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTccCureKVPublicGetServerConfigResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTccCureKVPublicGetServerConfigResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTccCureKVPublicGetServerConfigResult_descriptor_;
}

const PbRpcTccCureKVPublicGetServerConfigResult& PbRpcTccCureKVPublicGetServerConfigResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTccCureKVPublicGetServerConfigResult* PbRpcTccCureKVPublicGetServerConfigResult::default_instance_ = NULL;

PbRpcTccCureKVPublicGetServerConfigResult* PbRpcTccCureKVPublicGetServerConfigResult::New() const {
  return new PbRpcTccCureKVPublicGetServerConfigResult;
}

void PbRpcTccCureKVPublicGetServerConfigResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTccCureKVPublicGetServerConfigResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(succeeded_, replicaid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTccCureKVPublicGetServerConfigResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTccCureKVPublicGetServerConfigResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumPartitions;
        break;
      }

      // required int32 NumPartitions = 2;
      case 2: {
        if (tag == 16) {
         parse_NumPartitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpartitions_)));
          set_has_numpartitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumReplicasPerPartition;
        break;
      }

      // required int32 NumReplicasPerPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_NumReplicasPerPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numreplicasperpartition_)));
          set_has_numreplicasperpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_replicaId;
        break;
      }

      // required int32 replicaId = 4;
      case 4: {
        if (tag == 32) {
         parse_replicaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicaid_)));
          set_has_replicaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTccCureKVPublicGetServerConfigResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTccCureKVPublicGetServerConfigResult)
  return false;
#undef DO_
}

void PbRpcTccCureKVPublicGetServerConfigResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTccCureKVPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numpartitions(), output);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numreplicasperpartition(), output);
  }

  // required int32 replicaId = 4;
  if (has_replicaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replicaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTccCureKVPublicGetServerConfigResult)
}

::google::protobuf::uint8* PbRpcTccCureKVPublicGetServerConfigResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTccCureKVPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numpartitions(), target);
  }

  // required int32 NumReplicasPerPartition = 3;
  if (has_numreplicasperpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numreplicasperpartition(), target);
  }

  // required int32 replicaId = 4;
  if (has_replicaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replicaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTccCureKVPublicGetServerConfigResult)
  return target;
}

int PbRpcTccCureKVPublicGetServerConfigResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int32 NumPartitions = 2;
    if (has_numpartitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpartitions());
    }

    // required int32 NumReplicasPerPartition = 3;
    if (has_numreplicasperpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numreplicasperpartition());
    }

    // required int32 replicaId = 4;
    if (has_replicaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTccCureKVPublicGetServerConfigResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTccCureKVPublicGetServerConfigResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTccCureKVPublicGetServerConfigResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTccCureKVPublicGetServerConfigResult::MergeFrom(const PbRpcTccCureKVPublicGetServerConfigResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_numpartitions()) {
      set_numpartitions(from.numpartitions());
    }
    if (from.has_numreplicasperpartition()) {
      set_numreplicasperpartition(from.numreplicasperpartition());
    }
    if (from.has_replicaid()) {
      set_replicaid(from.replicaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTccCureKVPublicGetServerConfigResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTccCureKVPublicGetServerConfigResult::CopyFrom(const PbRpcTccCureKVPublicGetServerConfigResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTccCureKVPublicGetServerConfigResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PbRpcTccCureKVPublicGetServerConfigResult::Swap(PbRpcTccCureKVPublicGetServerConfigResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(numpartitions_, other->numpartitions_);
    std::swap(numreplicasperpartition_, other->numreplicasperpartition_);
    std::swap(replicaid_, other->replicaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTccCureKVPublicGetServerConfigResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTccCureKVPublicGetServerConfigResult_descriptor_;
  metadata.reflection = PbRpcTccCureKVPublicGetServerConfigResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpTccCureCommitRequestArg::kIdFieldNumber;
const int PbRpTccCureCommitRequestArg::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpTccCureCommitRequestArg::PbRpTccCureCommitRequestArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpTccCureCommitRequestArg)
}

void PbRpTccCureCommitRequestArg::InitAsDefaultInstance() {
}

PbRpTccCureCommitRequestArg::PbRpTccCureCommitRequestArg(const PbRpTccCureCommitRequestArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpTccCureCommitRequestArg)
}

void PbRpTccCureCommitRequestArg::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpTccCureCommitRequestArg::~PbRpTccCureCommitRequestArg() {
  // @@protoc_insertion_point(destructor:PbRpTccCureCommitRequestArg)
  SharedDtor();
}

void PbRpTccCureCommitRequestArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpTccCureCommitRequestArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpTccCureCommitRequestArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpTccCureCommitRequestArg_descriptor_;
}

const PbRpTccCureCommitRequestArg& PbRpTccCureCommitRequestArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tcc_5fcure_5fmessages_2eproto();
  return *default_instance_;
}

PbRpTccCureCommitRequestArg* PbRpTccCureCommitRequestArg::default_instance_ = NULL;

PbRpTccCureCommitRequestArg* PbRpTccCureCommitRequestArg::New() const {
  return new PbRpTccCureCommitRequestArg;
}

void PbRpTccCureCommitRequestArg::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  ct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpTccCureCommitRequestArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpTccCureCommitRequestArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // repeated .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpTccCureCommitRequestArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpTccCureCommitRequestArg)
  return false;
#undef DO_
}

void PbRpTccCureCommitRequestArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpTccCureCommitRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .PbPhysicalTimeSpec CT = 2;
  for (int i = 0; i < this->ct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpTccCureCommitRequestArg)
}

::google::protobuf::uint8* PbRpTccCureCommitRequestArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpTccCureCommitRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .PbPhysicalTimeSpec CT = 2;
  for (int i = 0; i < this->ct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpTccCureCommitRequestArg)
  return target;
}

int PbRpTccCureCommitRequestArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .PbPhysicalTimeSpec CT = 2;
  total_size += 1 * this->ct_size();
  for (int i = 0; i < this->ct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpTccCureCommitRequestArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpTccCureCommitRequestArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpTccCureCommitRequestArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpTccCureCommitRequestArg::MergeFrom(const PbRpTccCureCommitRequestArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ct_.MergeFrom(from.ct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpTccCureCommitRequestArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpTccCureCommitRequestArg::CopyFrom(const PbRpTccCureCommitRequestArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpTccCureCommitRequestArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ct())) return false;
  return true;
}

void PbRpTccCureCommitRequestArg::Swap(PbRpTccCureCommitRequestArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    ct_.Swap(&other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpTccCureCommitRequestArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpTccCureCommitRequestArg_descriptor_;
  metadata.reflection = PbRpTccCureCommitRequestArg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
